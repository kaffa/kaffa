<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Kaffa.im - article</title><link href="https://kaffa.im/" rel="alternate"></link><link href="https://kaffa.im/feeds/article.atom.xml" rel="self"></link><id>https://kaffa.im/</id><updated>2024-01-17T12:00:00+08:00</updated><entry><title>世界与你，从发音错的单词说开去</title><link href="https://kaffa.im/the-world-and-you-starting-from-mispronounced-words.html" rel="alternate"></link><published>2024-01-17T12:00:00+08:00</published><updated>2024-01-17T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2024-01-17:/the-world-and-you-starting-from-mispronounced-words.html</id><summary type="html"></summary><content type="html">&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;世界的问题，归根都是自己的问题&lt;/h2&gt;
&lt;p&gt;虽然我的英文水平也有限，但有时候确实不习惯身边有很多人的发音。&lt;/p&gt;
&lt;p&gt;通常有两种情况：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;发错音，比如 apache 阿帕奇、scheme s该马、cache 凯奇&lt;/li&gt;
&lt;li&gt;发音与我习惯的发音不同，其中有一部分外来词，比如 Résumé/Resume RE素姆、ZARA 扎RA&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;后来我想了一想，基于一个更大的结论『如果你发现世界有问题，那不是世界的问题，而是你的问题。』（得出这个结论的原因在之前也提过，是因世界是你的意识界面。）我们可以继续推导。&lt;/p&gt;
&lt;p&gt;如果你认为或习惯的发音与你所处的环境中听到的不同，那不是世界的问题，不是别人的发音问题，而是自己听到这样发音后不习惯的问题。更进一步说，一个人英语发音与大多数母语英语的人的发音不一致，可能原因是那个人的老师发音也不对，或者TA没有听到过正确的发音就根据经验去读了，还不自知，这是TA那边的事；但你这一边，听到了这样的发音，你知道TA的英语发音与你知道的大多数母语英语的人的发音不一致，你也有两种选择，接受还是不接受，习惯于此，还是不习惯于此。&lt;/p&gt;
&lt;p&gt;类似的，还有命名，比如你在与合作方的合作中中使用了一些不地道的词，此时有两种情况，你的合作方是英文母语，TA们第一感觉一定会觉得异样，此时有可能人家能理解并接受，只是背后偷笑一下，还是愿意与你继续配合，或者人家不能理解也不接受，建议你改为更恰当的用词。&lt;/p&gt;
&lt;p&gt;其实，我要说的是，这些都是会发生的，但其合理性还是看什么是强势面。&lt;/p&gt;
&lt;p&gt;比如，英文母语的人也可以接受 you say how much is how much 的表达，也不会认为语法错的表达就违法了，但你出国留学，使用语法错的表达，人家教授就是可以给你扣分。&lt;/p&gt;
&lt;p&gt;语言最基本功能的是沟通。发音是一种约定，并不是道德和法律。在某种场景下，只是一种规范（一种筛选器）。很难说清，这些规范是否是这个世界的恶意，或者什么更长远的考虑。&lt;/p&gt;
&lt;p&gt;文化是有生命力的，如果存在合理性，看似不合理的读音会演变，甚至语法错的表达也会被写进字典作为特例。&lt;/p&gt;
&lt;p&gt;所以，如果你也遇到和我一样的问题，你可以：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;学习一下以下项目，并推荐以下项目给TA&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/shimohq/chinese-programmer-wrong-pronunciation"&gt;https://github.com/shimohq/chinese-programmer-wrong-pronunciation&lt;/a&gt;
&lt;a class="reference external" href="https://github.com/Wei-Xia/most-frequent-technology-english-words"&gt;https://github.com/Wei-Xia/most-frequent-technology-english-words&lt;/a&gt;&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;修身齐家，以地道的语言表达，但输出自己的文化。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第二种更有说服力。&lt;/p&gt;
&lt;/div&gt;
</content><category term="article"></category></entry><entry><title>用逻辑探测事实背后的秘密</title><link href="https://kaffa.im/detect-the-secrets-behind-via-logic.html" rel="alternate"></link><published>2024-01-12T15:00:00+08:00</published><updated>2024-01-12T15:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2024-01-12:/detect-the-secrets-behind-via-logic.html</id><summary type="html"></summary><content type="html">&lt;p&gt;生活的某部分，和解(po)题(an)是一致的，比如找东西。&lt;/p&gt;
&lt;p&gt;最开始当我学习占星时，我喜欢使用占星骰子作为工具来探讨丢失物品的可能性。&lt;/p&gt;
&lt;p&gt;但直到后来我发现我擅长找到别人难以找到的东西，并不是依赖于占星骰子，而是依赖于逻辑链。&lt;/p&gt;
&lt;p&gt;这部分找东西的能力是从读到刑侦学的 Locard Exchange Principle 时顿悟的。&lt;/p&gt;
&lt;p&gt;Locard 说：凡犯罪者，必留痕迹。LEP 强调的是物质的交换。&lt;/p&gt;
&lt;p&gt;我从中领悟到的是逻辑的链式传递，既：当从事实出发有多种可能性时，选择可能性最高的逻辑作为假设继续延伸推理。&lt;/p&gt;
&lt;p&gt;因为可能性的延伸基于事实，如果有两种可能性时，先去掉无法继续向后推理的可能，除非保留的推理无法继续推进后再返回来考虑另一种可能。&lt;/p&gt;
&lt;p&gt;这个思维过程，在计算机科学被叫做回溯。&lt;/p&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;猫屋布帘&lt;/h2&gt;
&lt;p&gt;LP说，猫屋上一块布帘，用石头压住的，中午时不见了，怀疑被人拿走了。&lt;/p&gt;
&lt;p&gt;我的第一感觉不是人，而是猫干的。&lt;/p&gt;
&lt;p&gt;经实地查看，发现帘子依然在猫屋附近。&lt;/p&gt;
&lt;p&gt;我的「第六感」其实不是直觉，而是基于逻辑得到的：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;被石头压住的帘子不见了 --&amp;gt; 帘子被动过；&lt;/li&gt;
&lt;li&gt;帘子被动过 ——&amp;gt; 有人动过或者非人动过，非人因素主要是风或者是猫；&lt;/li&gt;
&lt;li&gt;假设是外来人员，小区有近16栋楼，近60个单元，四处是摄像头，外来人员专门走到某一栋人少的猫屋去拿一块布帘，从随机的角度来说，可能性最多为2%；假设是小区内人员，布帘不能换钱，成年人没有动机，可能性很低，而小孩捣乱拿走可能性却不低，但事情发生时间是工作日的中午，熊孩子需要吃午饭后午休，然后上学，可能性便降低了。&lt;/li&gt;
&lt;li&gt;人的可能性似乎说不太通，那么考虑是非人因素，但因为被石头压住，没有台风是吹不走的；所以基本就剩下动物，猫屋边上常有很多猫活动，是狗的可能性也不大，且狗都被人牵着遛，搞破坏的可能不如猫那么高。&lt;/li&gt;
&lt;li&gt;最后，据说找到帘子时，发现帘子盖住了一只蝴蝶奄奄一息，有一种可能是，猫抓蝴蝶时拉走了帘子。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述就是一个经典的回溯过程。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;优衣库包包定价&lt;/h2&gt;
&lt;p&gt;我们发现一只优衣库包的定价从79元涨价到了199元，第一个感觉是可能性很低，一定是哪里弄错了。&lt;/p&gt;
&lt;p&gt;后来发现，其实是两只包，只是样式类似，却定价不同。&lt;/p&gt;
&lt;p&gt;为什么我较确定是哪里弄错了，主要是有一个隐藏事实，就是优衣库的定价和打折规则。&lt;/p&gt;
&lt;p&gt;很少一下子涨价近2.5倍的，通常价格的波动范围是50%，30%，20%，但一下子好几倍除非是尾货，或者是超级折扣。&lt;/p&gt;
&lt;p&gt;就是说，这里需要一个常识就是零售的定价规则，优衣库一定有专业团队在负责定价的事，不会出现离谱的变化。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h2&gt;逻辑是一种很好用的工具&lt;/h2&gt;
&lt;p&gt;工具既一种结构应对另一种结构。逻辑作为工具，结构中只有两个因素，事实和推理，因此非常干脆，属于每人必备的瑞士军刀。&lt;/p&gt;
&lt;/div&gt;
</content><category term="article"></category><category term="logic"></category></entry><entry><title>几件无关程序开发的事</title><link href="https://kaffa.im/some-tiny-things-and-systemic-thinking.html" rel="alternate"></link><published>2024-01-11T15:00:00+08:00</published><updated>2024-01-11T15:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2024-01-11:/some-tiny-things-and-systemic-thinking.html</id><summary type="html">&lt;p class="first last"&gt;修理日记&lt;/p&gt;
</summary><content type="html">&lt;div class="notification"&gt;
  该图片由&lt;a href="https://pixabay.com/zh/users/skitterphoto-324082/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3129361"&gt;Rudy and Peter Skitterians&lt;/a&gt;在&lt;a href="https://pixabay.com/zh//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3129361"&gt;Pixabay&lt;/a&gt;上发布
&lt;/div&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;有时我们并不需要从世界获取什么，我们只是路过了世界的趣味之处，学会与之共处。&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;修灯&lt;/h2&gt;
&lt;p&gt;灯罩坏了，拖延症让我好两月都没修。&lt;/p&gt;
&lt;p&gt;灯罩坏掉的原因是里面的塑料卡老化了。&lt;/p&gt;
&lt;p&gt;为了解决灯没有灯罩的问题，我在网上购入了一盏新灯。&lt;/p&gt;
&lt;p&gt;然而，旧灯换新灯，只为解决灯罩问题，似乎也没有必要。&lt;/p&gt;
&lt;p&gt;修灯罩 or 换灯，这是一个问题。&lt;/p&gt;
&lt;p&gt;最终，我还是选择了继续使用旧灯，毕竟，旧灯的灯泡没坏。&lt;/p&gt;
&lt;p&gt;要解决的——其实是灯罩卡的问题。&lt;/p&gt;
&lt;p&gt;但修理灯罩卡，既要处理老化的塑料，塑料老化是不可逆的。&lt;/p&gt;
&lt;p&gt;于是，又陷入了换灯 or 修灯罩卡的摇摆。&lt;/p&gt;
&lt;p&gt;直到今天，我解决了这个问题。&lt;/p&gt;
&lt;p&gt;原因是因为我面对了问题本身。&lt;/p&gt;
&lt;p&gt;剩下的就是找到工具和资源，换一种思路。&lt;/p&gt;
&lt;p&gt;看似不可能处理的塑料老化问题被我 work around 了。&lt;/p&gt;
&lt;p&gt;灯罩卡被我用一把超长的螺丝刀拆(jie)开(ou)了，我发现可以在现有的结构上加一个金属卡来替换老化掉的塑料部分。&lt;/p&gt;
&lt;p&gt;我从旧插座上拆得两块铜片，重新加工为卡子的形状，替换了原先的塑料卡。&lt;/p&gt;
&lt;p&gt;我的灯罩回归了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;造笔&lt;/h2&gt;
&lt;p&gt;不知有没有人和我一样想过，利拉鲁肽针管像一支笔。&lt;/p&gt;
&lt;p&gt;我仔细看过前端，觉得它其实可以适配为一只墨水笔。&lt;/p&gt;
&lt;p&gt;加上我好奇它的结构，今日得空，便对它进行了拆解。&lt;/p&gt;
&lt;p&gt;其实针管外表并没有明显的拆解位置，但好在我有一些常识和逻辑。这种普通针管，就是注射器，简直是童年阴影之一。&lt;/p&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h3&gt;针管结构原型&lt;/h3&gt;
&lt;p&gt;为了拆解针管的结构，我会假设是一个普通人来设计的。&lt;/p&gt;
&lt;p&gt;这种抛弃型针管是普通针管的改良，它的基本结构与普通针管大概率是一致的（&lt;strong&gt;人不需要在不需要的地方进行颠覆性创新&lt;/strong&gt;）。&lt;/p&gt;
&lt;p&gt;将针管做成抛弃型的，更多的是一种商业权衡：为了用药的便利性和安全性，付出更高的成本。&lt;/p&gt;
&lt;p&gt;这种结构就是：针头+针管+药水+推进器。&lt;/p&gt;
&lt;p&gt;我们会发现，枪的原型其实也是一样的：管状物+被推进物+推进器。只不过枪的被推进物是子弹可以替换。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h3&gt;拆解的思路&lt;/h3&gt;
&lt;p&gt;采用排除法，在抛弃型利拉鲁肽针管上，可见的分解处有三处，进行松紧度探索以后，发现可方便打开的是尾部和指示窗。&lt;/p&gt;
&lt;p&gt;打开尾部。发现一根弹簧提供了按压头的回弹力，结合按压头的作用确定，尾部提供了可量化的推进力以压缩指定剂量的针药水，且这个推动力是单向的，此时回想一下生活中单向阀的经验，就知道针管中间大概率设计为一种有去无回的旋转结构，可以向下旋转推进，但无法逆行，最后拆开后发现事实也是如此。&lt;/p&gt;
&lt;p&gt;指示窗。打开尾部后看懂结构后，发现指示窗中并没有机械结构，之所以能显示刻度，是因为刻度只是一个视图，既压缩高度的一个显示。&lt;/p&gt;
&lt;p&gt;真正的工业设计集中在针管中部1/3处，其中有一个结构丝滑的塑料螺纹芯，也是模具最细致的地方。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h3&gt;制作成笔&lt;/h3&gt;
&lt;p&gt;笔芯手头有欧标G2和日UNI的UMR-85N，分别适配了两只，都是可以的。&lt;/p&gt;
&lt;img alt="Liraglutide 针管适配 UMR-85N 笔芯" src="https://kaffa.im/static/img/2024/liraglutide-and-umr-85n.jpg" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-7"&gt;
&lt;h2&gt;心得&lt;/h2&gt;
&lt;p&gt;解决问题需要：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;面对问题的心态&lt;/li&gt;
&lt;li&gt;解决问题的工具&lt;/li&gt;
&lt;li&gt;解决问题的资源&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;人的潜意识是很聪明的，这里的三者并没有先后顺序，很可能是解决问题的条件具备后，解决问题心态才被构建起来。&lt;/p&gt;
&lt;p&gt;然而这个问题放在商业公司中就很简单：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;外企的处理办法，主打一个懒：『打电话给服务公司。』&lt;/li&gt;
&lt;li&gt;有钱的国内公司，主打一个富贵：『重赏之下，必有天才，钱给够，没啥干不了。』&lt;/li&gt;
&lt;li&gt;上司的解决之道，主打一个权术：『你实在修不了，要不要换人试试。』&lt;/li&gt;
&lt;li&gt;中层的解决办法，主打一个PUA：『兄弟团队有工具，姊妹团队有资源，找TA们支援支援。』&lt;/li&gt;
&lt;li&gt;基层的应对之法，主打一个强势：『活就摆那了，有条件要修，没有条件创造条件也要修。』&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;公司每个员工都在角色中，有着非常恰当的职业修养，最后事总会落到会干想干的人身上，被解决掉。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-8"&gt;
&lt;h2&gt;启示&lt;/h2&gt;
&lt;p&gt;旧的结构中，如果有细小的零件不适用，导致结构失效，最便捷的解决方式往往不是造新的结构取代旧结构，而是拆解不适用的零件，进行适配和零件替换。于是，似乎，基于上述结论，诺记被水果颠覆了。有时候还需要考虑到旧结构的系统性溃败。于是是需要替换零件，或是更新结构，最好由资源竞争结合操盘的人来定。&lt;/p&gt;
&lt;p&gt;拆解一个系统，如果没有思路，可以从建设这个系统的思路展开，因为，虽然产品设计师和工程师的思维一般由差异，但是在相同的产品设计上，工程师的实现会很类似。&lt;/p&gt;
&lt;/div&gt;
</content><category term="article"></category><category term="systemic-thinking"></category></entry><entry><title>泡茶的方法</title><link href="https://kaffa.im/make-tea.html" rel="alternate"></link><published>2023-12-26T12:36:00+08:00</published><updated>2023-12-26T12:36:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2023-12-26:/make-tea.html</id><summary type="html">&lt;p class="first last"&gt;如何把茶泡得好喝，这是个问题...&lt;/p&gt;
</summary><content type="html">&lt;div class="notification"&gt;
  该图片由&lt;a href="https://pixabay.com/zh/users/mirkostoedter-20529864/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=6078275"&gt;Mirko Stödter&lt;/a&gt;在&lt;a href="https://pixabay.com/zh//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=6078275"&gt;Pixabay&lt;/a&gt;上发布
&lt;/div&gt;&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;茶&lt;/h2&gt;
&lt;p&gt;茶源自中国，作为中国人怎能不懂如何将茶泡得好喝呢？&lt;/p&gt;
&lt;p&gt;在世界语言中，&amp;quot;茶&amp;quot;有两种读音，一种读 cha，另一种是 tea。这两种都源自中文，前者是普通话，后者是福建沿海闽南话。显然，采用第一种读音的国家，茶叶源自中国陆路传播；而采用第二种读音的国家，茶叶源自中国海路传播。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;茶和我&lt;/h2&gt;
&lt;p&gt;第一次喝茶可能是爷爷的茶叶罐，那时候的茶多是绿茶散茶，可能是原生态的黄山毛峰。&lt;/p&gt;
&lt;p&gt;第二次在老家的旋转餐厅，碧螺春的茶叶是一个小球，泡开后就成了小芽或叶片。&lt;/p&gt;
&lt;p&gt;后面记忆中的茶是龙井问茶，龙井茶在溪流中漂流而下，游客取而饮之，茶叶是竖直在茶杯中的。&lt;/p&gt;
&lt;p&gt;再后面的茶是普洱茶、古树茶，在中山一位商人那里喝到非常不错的冰岛和勐库茶，据说那边寨子里的古树，超100年的，都被茶叶商人包下了，每年逢季就会去蹲茶，产量实在有限，茶叶肥厚，茶味生猛。&lt;/p&gt;
&lt;p&gt;然后在南方喝的多的是凤凰单枞和铁观音，铁观音真是很少喝到天然香的，在外也常饮乌龙茶，乌龙适合牛饮，在外聊事，通常都是熟普或菊普。&lt;/p&gt;
&lt;p&gt;后来参会，伴手礼常常是不错的正山小种和金骏眉。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h2&gt;2023泡的茶&lt;/h2&gt;
&lt;p&gt;家里剩下的是正山小种和生普。&lt;/p&gt;
&lt;p&gt;我并非对茶没有偏好的，按有茶时，不挑茶，现在自己泡茶，只想把茶泡得适味。&lt;/p&gt;
&lt;p&gt;目前我按下面的方法投茶，至于上投还是下投，我一般都是下投，毕竟很久没有喝碧螺春和毛尖。&lt;/p&gt;
&lt;table border="1" class="table is-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="23%" /&gt;
&lt;col width="77%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;茶名&lt;/th&gt;
&lt;th class="head"&gt;显示&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;正山小种&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;投茶：5g&lt;/li&gt;
&lt;li&gt;水温：85°C&lt;/li&gt;
&lt;li&gt;水量：160ml&lt;/li&gt;
&lt;li&gt;时间：3-10s，每多2泡延2秒&lt;/li&gt;
&lt;li&gt;次数：7times&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;冰岛古树&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;投茶：7g&lt;/li&gt;
&lt;li&gt;水温：92°C~95°C&lt;/li&gt;
&lt;li&gt;水量：110ml&lt;/li&gt;
&lt;li&gt;时间：3-10s&lt;/li&gt;
&lt;li&gt;次数：10times&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;锡兰红茶&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;投茶：2-3g&lt;/li&gt;
&lt;li&gt;水温：100°C&lt;/li&gt;
&lt;li&gt;水量：200ml&lt;/li&gt;
&lt;li&gt;时间：5m&lt;/li&gt;
&lt;li&gt;次数：2times&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;金骏眉&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;投茶：4g&lt;/li&gt;
&lt;li&gt;水温：85°C&lt;/li&gt;
&lt;li&gt;水量：200ml&lt;/li&gt;
&lt;li&gt;时间：5s，每泡延5秒&lt;/li&gt;
&lt;li&gt;次数：5times&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;大红袍&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;投茶：8g&lt;/li&gt;
&lt;li&gt;水温：98°C&lt;/li&gt;
&lt;li&gt;水量：200ml&lt;/li&gt;
&lt;li&gt;时间：10s，每多2泡延10秒&lt;/li&gt;
&lt;li&gt;次数：6times&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;铁观音&lt;/td&gt;
&lt;td&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;投茶：7g&lt;/li&gt;
&lt;li&gt;水温：100°C&lt;/li&gt;
&lt;li&gt;水量：200ml&lt;/li&gt;
&lt;li&gt;时间：10s，每多2泡延10秒&lt;/li&gt;
&lt;li&gt;次数：6times&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="article"></category><category term="泡茶"></category><category term="Tea"></category></entry><entry><title>纪念币预约那点事</title><link href="https://kaffa.im/about-making-reservations-for-commemorative-coins.html" rel="alternate"></link><published>2023-12-07T07:45:00+08:00</published><updated>2023-12-07T07:45:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2023-12-07:/about-making-reservations-for-commemorative-coins.html</id><summary type="html">&lt;p class="first last"&gt;本文记录如何查询纪念币预约的信息&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;背景&lt;/h2&gt;
&lt;p&gt;素有收藏钱币的爱好，逢纪念币必预约。&lt;/p&gt;
&lt;p&gt;近年大部分币的发行量非常大，藏家的主要目的如果不是为了欣赏而是为了升值，恐怕要失望。&lt;/p&gt;
&lt;p&gt;纪念币作为投资标的，特点是量大时流动性不好。&lt;/p&gt;
&lt;p&gt;如果以十年二十年看，所有纪念币的年化收益是否跑得过定期也不一定。&lt;/p&gt;
&lt;p&gt;除非你很有收藏品投资眼光，选到「稀有」组合。&lt;/p&gt;
&lt;p&gt;但若是有收藏爱好，则上述都不必考虑。&lt;/p&gt;
&lt;p&gt;对于这样大规模发行的普通纪念币来说，都是与同面额人民币等值流通，因此其获取成本就是预约时间。&lt;/p&gt;
&lt;p&gt;网上预约成本可以忽略，线下预约则通常需要早起排队。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;如何查询纪念币预约信息&lt;/h2&gt;
&lt;p&gt;我国纪念币是中国人民银行（后简称人行）统筹发行。&lt;/p&gt;
&lt;p&gt;中国人民银行有省市、特区级派出机构。例如中国人民银行湖北省分行、中国人民银行武汉分行、中国人民银行深圳市分行。&lt;/p&gt;
&lt;p&gt;官方的纪念币发行通知，最早就是在人行发布，然后各级分支机构再继续进行更细则的通知。&lt;/p&gt;
&lt;p&gt;然后，通常由人行分行对银行进行通知，再由银行指定各自的预约办法。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h2&gt;余量预约&lt;/h2&gt;
&lt;p&gt;经常会存在有人预约了纪念币但不去兑换取回情况，因此需要对纪念币余量进行预约。&lt;/p&gt;
&lt;p&gt;预约分为线上预约和线下预约，一般余量会采取线下预约。&lt;/p&gt;
&lt;p&gt;线下预约的通知，一般也是由人行总行到人行分行，人行总行到各银行总行，各银行总行再到各银行各分行。&lt;/p&gt;
&lt;p&gt;如果银行比较规范，则会严格按这个流程来。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h2&gt;线下预约偷跑&lt;/h2&gt;
&lt;p&gt;实际的，也存在人行分行未发通知，某些银行也未在官网发通知就直接进行线下预约的偷跑情况。&lt;/p&gt;
&lt;p&gt;对于这种情况，一定层度上，熟人关系优先获得上有竞争优势，有失公平性。&lt;/p&gt;
&lt;p&gt;据观察，现在的线下预约，除开少量个人，似乎是由组织有纪律的团体大规模排队兑入。&lt;/p&gt;
&lt;p&gt;主因还是有利可图。&lt;/p&gt;
&lt;p&gt;比如去年今年某些品种溢价高达50%，甚至100%以上，这样，组织大规模后除开组织的成本，在市场上沽出，还有可观的利润。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h2&gt;对纪念币升值的预估&lt;/h2&gt;
&lt;p&gt;如果纪念币有一个类似股票市场的指数，该指数未来大概率是r型的，既稳步攀升中，略有下跌，但从远期来看，还是持续攀升的。&lt;/p&gt;
&lt;/div&gt;
</content><category term="article"></category><category term="纪念币"></category></entry><entry><title>「浮空秘境」零氪玩法</title><link href="https://kaffa.im/no-charge-game-strategy-of-pixel-heroes.html" rel="alternate"></link><published>2023-11-26T22:09:00+08:00</published><updated>2023-11-26T22:09:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2023-11-26:/no-charge-game-strategy-of-pixel-heroes.html</id><summary type="html">&lt;p class="first last"&gt;此篇是我个人总结的「浮空秘境」零氪玩法，即获得PK竞争力的主要策略。&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;游戏背景&lt;/h2&gt;
&lt;img alt="「浮空秘境」，又名「马赛克英雄」" src="https://kaffa.im/static/img/2023/pixel-heroes.jpg" /&gt;
&lt;p&gt;「浮空秘境」是一个像素风的回合制卡牌游戏，开发的公司是厦门魔兔网络科技有限公司，据说员工并不多，但游戏出海很顺利。我是在 TapTap 中获悉的，苹果App Store 中也有推荐。&lt;/p&gt;
&lt;p&gt;本游戏女性向定位，角色服装投宅男所好，美术和神话背景还可以虽然有点克苏鲁。许多节日活动的内嵌小游戏有点意思，比如，商人投资(根据官方消息和小道消息决定15轮中对商品的买卖)、丢星星(比反应速度)、类似羊了个羊的三消、类1024。其余也没有什么惊喜，总的来说就是换皮卡牌，升级卡等级，季节活动钻石永远不够。&lt;/p&gt;
&lt;p&gt;如果可以对制作方说一句话，我觉得英雄王「吉尔」的那句就挺不错：你的小把戏在我眼里毫无意义。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;主要设定&lt;/h2&gt;
&lt;p&gt;游戏的主要是回合制PK，玩家选六个英雄按自身设定和属性进行PK，英雄按获得容易度分为：神话、传说、史诗。&lt;/p&gt;
&lt;p&gt;英雄按所属阵营分为：圣域、暗裔、联盟、蛮荒、森灵。其中圣暗和联蛮森在上阵时，对生命和攻击的加成值不同，然后是上阵的英雄按阵营的加成，光暗的特殊技能，还有付费皮肤加成，称号的累加加成。&lt;/p&gt;
&lt;p&gt;决定PK的主因是英雄的生命和攻击，其差异主要由级别决定，其次是6只英雄中每种的数量，查下表后进行累加。&lt;/p&gt;
&lt;table border="1" class="table is-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="34%" /&gt;
&lt;col width="22%" /&gt;
&lt;col width="22%" /&gt;
&lt;col width="22%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;联盟 or 蛮荒 or 森灵&lt;/th&gt;
&lt;th class="head"&gt;圣域 or 暗裔&lt;/th&gt;
&lt;th class="head"&gt;生命&lt;/th&gt;
&lt;th class="head"&gt;攻击&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;6%&lt;/td&gt;
&lt;td&gt;4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;15%&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;22%&lt;/td&gt;
&lt;td&gt;16%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;30%&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;5%&lt;/td&gt;
&lt;td&gt;3%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;td&gt;7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;15%&lt;/td&gt;
&lt;td&gt;11%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;td&gt;16%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;28%&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;36%&lt;/td&gt;
&lt;td&gt;24%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;对上述英雄数量进行倒排举例，这里列举了大多情况。&lt;/p&gt;
&lt;table border="1" class="table is-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="8%" /&gt;
&lt;col width="8%" /&gt;
&lt;col width="8%" /&gt;
&lt;col width="8%" /&gt;
&lt;col width="8%" /&gt;
&lt;col width="30%" /&gt;
&lt;col width="30%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;圣域&lt;/th&gt;
&lt;th class="head"&gt;暗裔&lt;/th&gt;
&lt;th class="head"&gt;联盟&lt;/th&gt;
&lt;th class="head"&gt;蛮荒&lt;/th&gt;
&lt;th class="head"&gt;森灵&lt;/th&gt;
&lt;th class="head"&gt;生命&lt;/th&gt;
&lt;th class="head"&gt;攻击&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;36%&lt;/td&gt;
&lt;td&gt;24%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;33% = 28% +  5%&lt;/td&gt;
&lt;td&gt;23% = 20% +  3%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;30% = 20% + 10%&lt;/td&gt;
&lt;td&gt;23% = 16% +  7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;30% = 15% + 15%&lt;/td&gt;
&lt;td&gt;22% = 11% + 11%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;30% = 10% + 20%&lt;/td&gt;
&lt;td&gt;23% =  7% + 16%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;33% =  5% + 28%&lt;/td&gt;
&lt;td&gt;23% =  3% + 20%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;36%&lt;/td&gt;
&lt;td&gt;24%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;28% = 28% +  0%&lt;/td&gt;
&lt;td&gt;20% = 20% +  0%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;26% = 20% +  6%&lt;/td&gt;
&lt;td&gt;20% = 16% +  4%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;25% = 15% + 10%&lt;/td&gt;
&lt;td&gt;18% = 11% +  7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;25% = 10% + 15%&lt;/td&gt;
&lt;td&gt;17% =  7% + 10%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;27% =  5% + 22%&lt;/td&gt;
&lt;td&gt;19% =  3% + 16%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;30%&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;30% =  5% +  5% + 20%&lt;/td&gt;
&lt;td&gt;23% =  3% +  3% + 16%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;25% =  5% + 10% + 10%&lt;/td&gt;
&lt;td&gt;17% =  3% +  7% + 7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;25% = 10% +  5% + 10%&lt;/td&gt;
&lt;td&gt;17% =   7% + 3% + 7%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;&amp;nbsp;&lt;/td&gt;
&lt;td&gt;26% = 10% + 10% +  6%&lt;/td&gt;
&lt;td&gt;18% =   7% + 7% + 4%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上述表格最后一行有点意思的是，6名联蛮森英雄vs51圣暗组合最多只有3%的生命和攻击GAP，vs42圣暗组合只剩3%的攻击GAP，vs411圣暗组合还可以持平，这也是零氪玩家在氪金玩家还未养成10星圣暗队时的最大机会点了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果是这种思路，还是可以选择有追击优势的「安纳塔」的阵营，加上「贡露」「庞克」，换点「迦楼罗」「莫奈」「洛洛伊」，再肝出几套服装获得少许加成。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然而，时间拉长了，也没有什么意外，根据上述表格，最重要的参数无疑就是圣暗数量，全圣或全暗，简单来说就是氪金 vs 不氪金：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;6联 vs 6圣，生命差6%，攻击差4%&lt;/li&gt;
&lt;li&gt;6联 vs 5圣1暗/1圣5暗，生命差3%，攻击差3%&lt;/li&gt;
&lt;li&gt;6联 vs 4圣2暗/2圣4暗，攻击差3%&lt;/li&gt;
&lt;li&gt;6联 vs 3圣3暗，攻击差2%&lt;/li&gt;
&lt;li&gt;6联 vs 1圣1暗4联，攻击差3%&lt;/li&gt;
&lt;li&gt;6联 vs 2圣4联/2暗4联，领先&lt;/li&gt;
&lt;li&gt;6联 vs 1圣2暗3联/2圣1暗3联 + 3联，领先&lt;/li&gt;
&lt;li&gt;6联 vs 2圣2暗2联，领先&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里的新发现是：42全圣暗，和4联1圣1暗，生命和攻击持平。这个仿佛在说，「芙蕾雅」配「卡戎」或「芙蕾雅」配「塔纳托斯」。&lt;/p&gt;
&lt;p&gt;当然，游戏还有很多其他数值细节的升级，英雄的技能组合等等，但技能生克关系并未明示，不好比较，只知道物连、法连、强袭比较稀有，以。&lt;/p&gt;
&lt;table border="1" class="table is-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;col width="33%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;稀有&lt;/th&gt;
&lt;th class="head"&gt;强力&lt;/th&gt;
&lt;th class="head"&gt;普通&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;物连
法连
强袭&lt;/td&gt;
&lt;td&gt;魔法
武力
狂暴
祝福
坚韧
还魂
复活
穿甲
掌控
霸体
怒火
饮血
战备
铁壁
庇护&lt;/td&gt;
&lt;td&gt;追击
狂怒
降疗
灭杀
驱散
挑衅
奉献
灵动
回春
医术
净化
急袭
意志
破甲
反震&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;总的来说，游戏是比较有趣的，要获得实力，如果不花时间，那只有氪金。氪金可以获得更多的圣域、暗裔英雄，获得加成更高的皮肤。&lt;/p&gt;
&lt;p&gt;如果需要6位英雄的顶级皮肤，则需要 328 × 6 = 1968 元，这个价格买台 iPad 9 似乎更香。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h2&gt;游戏策略&lt;/h2&gt;
&lt;p&gt;首先定义问题，这里要探讨的游戏策略是：对于游戏初期和中期，零充值的前提下，如何获得更大的PK竞争优势？&lt;/p&gt;
&lt;p&gt;游戏主要货币是金币和钻石，金币是市场相关的，钻石可以充值。&lt;/p&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h3&gt;探索过程&lt;/h3&gt;
&lt;p&gt;通过在游戏「浮空秘境」内创建多个角色。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;有一个角色一个月升级到 100 多级，430w 战力，属于该服满月玩家的常规水平。&lt;/li&gt;
&lt;li&gt;剩余的大部分角色三周左右，都在 80 多级，战力从 240w 到 290w 不等。&lt;/li&gt;
&lt;li&gt;在A1区服创建的角色，在武神殿的勇者神殿最后一名是 600w 战力，而较新区服的是 200w 战力，这说明2～3个月的时间价值是 400w 战力。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h3&gt;主要策略&lt;/h3&gt;
&lt;p&gt;我的主要策略是：『围绕英雄』，初期专注英雄数量；中期专注英雄质量，钻石抽卡优先「圣暗英雄」，其次考虑「神话英雄」。&lt;/p&gt;
&lt;p&gt;我的主要打法是：主升「安纳塔」。&lt;/p&gt;
&lt;p&gt;在100级之前，可以主要围绕送的刺「安纳塔」和甜心「芙蕾雅」，还有与「安纳塔」同阵营的「贡露」输出也不错。&lt;/p&gt;
&lt;p&gt;此策略有效的原因：由于「安纳塔」唯一具有追杀机制，因此前期完全可以主升她到 10 星，这样升级过程，她的级别一直会是常规级别的两倍，对于均衡升级的队伍，可以被她一轮秒杀。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-7"&gt;
&lt;h3&gt;钻石花销优先级&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;初期初期专注英雄数量，凡是能提高英雄数量的都购买；其次买金币和经验，界石可以不买，在主升「安纳塔」实战中从来不缺。&lt;/li&gt;
&lt;li&gt;中期专注英雄质量，凡是能获得「圣暗英雄」的一定不要错过。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一、有活动时，确保钻石主要用在有保底的抽卡上。&lt;/p&gt;
&lt;p&gt;确保活动的每日有5400钻进行20抽圣域或暗裔，通常有 120 抽，分布在7天，所以每日抽满20抽，加送1抽，基本是能保证 7 天 获得 1-2 只圣或暗。&lt;/p&gt;
&lt;p&gt;是的，有时运气好 25 抽之内获得 1 只后，可以继续抽，那么即使 120 抽保底，也可以获得第二只；如果有时运气不好 25 抽之外获得 1 只后，如果继续抽，可能会出现在活动结束日，119 抽 依然没有获得，此时你会充值进行 1 抽吗；所以，笼统来说，当在第二天 30 抽内获得，都可以继续抽同一只圣暗；否则，建议退而求其次，此时选择第二志愿，根据自己的阵营选择无间行者陈、星月之锢瑶光、神木重锤冬、牧灵之梦西西妮娜、风铃轻语洛洛伊。&lt;/p&gt;
&lt;p&gt;二、其次，英雄召唤的概率太低拉不开太大差距，但可能是心理作用，积累连续120抽抽中神话、传说英雄的概率要比 10 抽大，10 抽比 1 抽大。&lt;/p&gt;
&lt;p&gt;三、对于种族魔晶，似乎是另一个打破平衡的道具，充值到级别后，魔晶召唤必出5星英雄或英灵，所以选择充值抽，可以先囤一下在召唤界面看帮助研究概率后再抽。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="faq"&gt;
&lt;h3&gt;FAQ&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;首冲6元送瑶光要不要冲？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选择「安纳塔」追击策略，「瑶光」领先的日子很快就过去了，学姐的存在并没有太大意义，可以不充，但高阶「瑶光」在初期确实能提供一些竞争优势，如果前期抽中「瑶光」，说明也许学姐与你有元，6元也是值的。&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;「神海探险」是否要做满？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;是的，从概率上来说，需要每日做满，骰子数量会定时刷新，如果购买了数量要做完，另外在殿堂商店可以多购买5次。&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;哪里最能赚钻石？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;季节活动中的小游戏、神海探险，季节活动小游戏次数最能拉开差距，时光颂歌、武神殿是每人都有的累计，只有先后，长期来看没有额外的竞争优势。&lt;/p&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;快进和不快进有什么差别？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我估计快进是一种快速计算，可能会采用更平均的概率，而战斗每轮都会产生一些随机，够幸运的话，会产生更好的结果。但估计很多人都没有耐心手动做灾厄之神、公会试炼魔物来袭，因为手动要有意义需要做二到三次，才会获得一个比较优势。&lt;/p&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;账号是否有幸运值之类的参数？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;说实话不知道，但在批量账号中，感觉有 25% 的账号短期内存在幸运优势，如果不是「浮空秘境」游戏中设置的，则可能是在更上级游戏中设置的。（￣Ｑ￣）╯&lt;/p&gt;
&lt;ol class="arabic simple" start="6"&gt;
&lt;li&gt;传说中的必中光暗十连抽存在吗？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;大概率是不存在的，虽然并非不可实现。从产品和开发的角度来说，首先产品不会设计这样的功能，它可能会被滥用，且需要投入额外的成本，其次，开发实现起来比较麻烦，也还会挑战这个特性的必要性和公平性，所以大概率不会被投票通过。&lt;/p&gt;
&lt;ol class="arabic simple" start="7"&gt;
&lt;li&gt;界石和纹耀需要囤积吗？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;界石在十星后有点用，需要提前几天囤积；纹耀需要工具英雄定向囤积。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-8"&gt;
&lt;h3&gt;我邀请码，祝你好运！&lt;/h3&gt;
&lt;p&gt;可使用我的邀请码支持本文的创作：48c273b213e6&lt;/p&gt;
&lt;img alt="「浮空秘境」，又名「马赛克英雄」，我的邀请码" src="https://kaffa.im/static/img/2023/48c273b213e6.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="article"></category><category term="浮空秘境"></category><category term="马赛克英雄"></category></entry><entry><title>Computer Port 一文说清电脑接口</title><link href="https://kaffa.im/computer-port-in-a-nutshell.html" rel="alternate"></link><published>2023-11-19T13:05:00+08:00</published><updated>2023-11-19T13:05:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2023-11-19:/computer-port-in-a-nutshell.html</id><summary type="html">&lt;p class="first last"&gt;从使用者角度梳理电脑接口，将散落各处的信息合并到一篇文章中，避开技术细节，只介绍作为普通使用者需要了解的信息。&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="port"&gt;
&lt;h2&gt;接口 Port&lt;/h2&gt;
&lt;p&gt;在过去二十五年中，我接触到的 Port 主要指三种东西：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;电脑接口&lt;/li&gt;
&lt;li&gt;Tcp/Udp 端口：这个将在 &lt;a class="reference external" href="/computer-port-in-a-nutshell.html"&gt;「TCP / UPD Port」&lt;/a&gt; 一文中描述&lt;/li&gt;
&lt;li&gt;MacPorts，一个开源社区驱动的实现将开源软件编译安装到 Mac 操作系统的项目。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文梳理的属于电脑接口。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;数码真香，连接真烦&lt;/h2&gt;
&lt;p&gt;相较于真香的数码设备，将它们连接起来对很多人来说都是焦虑的事。 ⎛ -᷄ ᴥ -᷅ ⎞೯&lt;/p&gt;
&lt;p&gt;苹果公司当时激进地取消线缆，整合接口，广泛使用无线通讯技术属于值得点赞的创新。&lt;/p&gt;
&lt;p&gt;人的感觉实在是太驽钝，感受不到空气中广泛漂浮的震动的电磁波所携带的信息，这才让无线通讯技术有了改进空间。&lt;/p&gt;
&lt;p&gt;然后，在很多需要大量数据通讯的场景下，还是不得不通过线缆作为信息和能量的介质。&lt;/p&gt;
&lt;p&gt;在这所有的线缆中，通用连接线缆似乎快统一为 USB Type-C 了，但这是一种理想情况。&lt;/p&gt;
&lt;p&gt;事实上，未来依然还是会有不止一二三种选择。&lt;/p&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h3&gt;电话线接口和网线接口&lt;/h3&gt;
&lt;p&gt;开始讲接口时，需要有几个概念。公头、母头。&lt;/p&gt;
&lt;p&gt;公头会插入母头，母头是插座。&lt;/p&gt;
&lt;p&gt;用来传输信息的接口，公头是水晶头，一般人只需要了解两种：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;电话线口：RJ11，可以连接固定电话和 Moden（猫），现在大多用不着了，国内改为了光线。&lt;/li&gt;
&lt;li&gt;网口：RJ45，一般人见的最多的就是网口，连接的主要有「五类线」和「六类线」，六更好一点，支持千兆。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两种接口看起来很相似，但网口更宽一点，看图就懂。&lt;/p&gt;
&lt;img alt="RJ45 和 RJ11 头" src="https://kaffa.im/static/img/2023/rj45-rj11.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="usb"&gt;
&lt;h3&gt;USB 接口&lt;/h3&gt;
&lt;p&gt;USB 是一种接口标准，主要用来传输电流和数据，对于本文发布日的人来说，不差钱尽量买 USB4。&lt;/p&gt;
&lt;p&gt;USB 是一种综合接口，所以电流、视数据频、音频数据、文件数据等都不在话下。&lt;/p&gt;
&lt;table border="1" class="table is-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="52%" /&gt;
&lt;col width="11%" /&gt;
&lt;col width="20%" /&gt;
&lt;col width="16%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;标准&lt;/th&gt;
&lt;th class="head"&gt;发布日期&lt;/th&gt;
&lt;th class="head"&gt;最大电压电流支持&lt;/th&gt;
&lt;th class="head"&gt;最大传输速率&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;USB 1.0&lt;/td&gt;
&lt;td&gt;1996.01&lt;/td&gt;
&lt;td&gt;5V / 500mA&lt;/td&gt;
&lt;td&gt;1.5 Mbps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;USB 1.1&lt;/td&gt;
&lt;td&gt;1998.09&lt;/td&gt;
&lt;td&gt;5V / 500mA&lt;/td&gt;
&lt;td&gt;12 Mbps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;USB 2.0&lt;/td&gt;
&lt;td&gt;2000.04&lt;/td&gt;
&lt;td&gt;5V / 500mA&lt;/td&gt;
&lt;td&gt;480 Mbps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;USB 3.0 --&amp;gt; USB 3.1 Gen1 --&amp;gt; USB 3.2 Gen1&lt;/td&gt;
&lt;td&gt;2008.11&lt;/td&gt;
&lt;td&gt;5V / 900mA&lt;/td&gt;
&lt;td&gt;5 Gbps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;USB 3.1 --&amp;gt; USB 3.1 Gen2 --&amp;gt; USB 3.2 Gen2 x1&lt;/td&gt;
&lt;td&gt;2013.07&lt;/td&gt;
&lt;td&gt;20V / 5A&lt;/td&gt;
&lt;td&gt;10 Mbps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;USB 3.2 --&amp;gt;                  USB 3.2 Gen2 x2&lt;/td&gt;
&lt;td&gt;2017.09&lt;/td&gt;
&lt;td&gt;20V / 5A&lt;/td&gt;
&lt;td&gt;20 Mbps&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;USB4&lt;/td&gt;
&lt;td&gt;2019.09&lt;/td&gt;
&lt;td&gt;20V / 5A&lt;/td&gt;
&lt;td&gt;40 Mbps&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在 USB 标准之下，还有厂商的接口规格，大家常说的 Type-C，就是 USB 的一种类型，目前有大一统的趋势。&lt;/p&gt;
&lt;img alt="USB Type-C" src="https://kaffa.im/static/img/2023/usb-type-c.webp" /&gt;
&lt;p&gt;如果是从业者，可能还需要了解 USB Type-A、USB Type-B，主要用于一些大的移动硬盘，打印机之类。&lt;/p&gt;
&lt;img alt="USB Type-A and USB Type-B" src="https://kaffa.im/static/img/2023/usb-type-a-usb-type-b.webp" /&gt;
&lt;p&gt;从接口尺寸来说，还可以分为 USB / Mini USB / Micro USB，见到了就知道了。&lt;/p&gt;
&lt;img alt="USB Mini A and USB Mini B" src="https://kaffa.im/static/img/2023/usb-mini-a-usb-mini-b.webp" /&gt;
&lt;img alt="USB Micro A and USB Micro B" src="https://kaffa.im/static/img/2023/usb-micro-a-usb-micro-b.webp" /&gt;
&lt;p&gt;Wiki 的图上有更多的细节&lt;/p&gt;
&lt;img alt="Available Connectors by USB Standard" src="https://kaffa.im/static/img/2023/available-connectors-by-usb-standard.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="usb-1"&gt;
&lt;h3&gt;USB 接口相关的接口标准和连接器&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Thunderbolt 接口标准：Intel 和 Apple，最新是第 4 代：&lt;/li&gt;
&lt;/ul&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Thunderbolt-1&lt;/li&gt;
&lt;li&gt;Thunderbolt-2&lt;/li&gt;
&lt;li&gt;Thunderbolt-3&lt;/li&gt;
&lt;li&gt;Thunderbolt-4&lt;/li&gt;
&lt;/ol&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Lightning(闪电) 连接器：源自 Apple，如从 iPhone 5 到 iPhone 14 使用的充电和数据连接线，从 iPhone 15 开始，已改为USB Type-C。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h3&gt;视频接口&lt;/h3&gt;
&lt;p&gt;现存接口主要有：VGA、DVI、HDMI、DP，VGA 和 DVI 已属于过去，未来主要是 HDMI 和 DP，且是 USB Type-C 形态。&lt;/p&gt;
&lt;table border="1" class="table is-bordered docutils"&gt;
&lt;colgroup&gt;
&lt;col width="88%" /&gt;
&lt;col width="12%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;图片&lt;/th&gt;
&lt;th class="head"&gt;类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="DP" class="first last" src="https://kaffa.im/static/img/2023/dp-port.png" /&gt;
&lt;/td&gt;
&lt;td&gt;DP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="HDMI" class="first last" src="https://kaffa.im/static/img/2023/hdmi-port.png" /&gt;
&lt;/td&gt;
&lt;td&gt;HDMI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="DVI" class="first last" src="https://kaffa.im/static/img/2023/dvi-port.png" /&gt;
&lt;/td&gt;
&lt;td&gt;DVI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;img alt="VGA" class="first last" src="https://kaffa.im/static/img/2023/vga-port.png" /&gt;
&lt;/td&gt;
&lt;td&gt;VGA&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;支持视频的现代接口主要有HDMI，和后来居上的更开放的接口DP(DisplayPort)，主要版本如下&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;DisplayPort / Mini DisplayPort&lt;ul&gt;
&lt;li&gt;DisplayPort 1.2&lt;/li&gt;
&lt;li&gt;DisplayPort 1.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HDMI&lt;ul&gt;
&lt;li&gt;HDMI 1&lt;/li&gt;
&lt;li&gt;HDMI 2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;值得一提的是 Thunderbolt 接口，也逐步演化为 USB Type-C 形态：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Thunderbolt-1：Mini DisplayPort 集成&lt;/li&gt;
&lt;li&gt;Thunderbolt-2：Mini DisplayPort 集成&lt;/li&gt;
&lt;li&gt;Thunderbolt-3：USB Type-C 结合，集成供电&lt;/li&gt;
&lt;li&gt;Thunderbolt-4：USB Type-C 结合，集成供电&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h3&gt;音频&lt;/h3&gt;
&lt;p&gt;不使用 HI-FI，音频相对简单，3.5mm接口与蓝牙4、5.0、5.1&lt;/p&gt;
&lt;p&gt;还有一种最老式的三色 AV 线，常用在老式游戏设备和老式电视机的连接上。&lt;/p&gt;
&lt;p&gt;如下图第二排后两张所示：&lt;/p&gt;
&lt;img alt="AV" src="https://kaffa.im/static/img/2023/av-port.jpg" /&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h3&gt;电源&lt;/h3&gt;
&lt;p&gt;一般使用厂商的原配线缆接口。&lt;/p&gt;
&lt;p&gt;现在通用的是 USB4 Type-C。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;p&gt;可以看出，使用常规数码设备，未来 USB4 将是最通用的接口，只需随身携带这一种线，就是 USB4 Type-C。&lt;/p&gt;
&lt;p&gt;或者期待基础科学能有新的突破，让无线充电技术还有新的发展。&lt;/p&gt;
&lt;p&gt;世界上有那么多种类的连接线、连接器件，并不是因为无法设计为统一，而是商业目的。&lt;/p&gt;
&lt;p&gt;所以对于新的专业设备，研发厂商需要获得创新红利，在商业目的驱使下，总会使用专有技术，专有线是永远不会消失的。&lt;/p&gt;
&lt;p&gt;事物的演化是类似的，而为和跟进者PK、在将饱和的市场中竞争，或者触及垄断，专有技术又会逐步兼容开放技术。&lt;/p&gt;
&lt;img alt="From Different To One USB4" src="https://kaffa.im/static/img/2023/from-different-to-one-usb4.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="section-7"&gt;
&lt;h2&gt;如何确定两台设备用什么连接线&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;方法就是查询产品的规格文档(specifications)，通过网站或者网店客服联系到厂家，拿到产品规格。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事出我为我的 DELL XPS 购买了新外接显示器，为确定笔记本外接显示器时需使用和可使用什么线缆，特地梳理了现有的接口。&lt;/p&gt;
&lt;p&gt;如果将此问题抽象化，可以表述为，为确定两台设备可以使用什么连接，需要分别查询设备A和设备B的接口规格，如果规格相同，则可以直接使用对等线缆连接，如果规格不同，则需要在市场上寻找连接线。&lt;/p&gt;
&lt;p&gt;在我的例子中，我分别寻找了 XPS 和 HKC 支持的协议标准和接口规格&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;XPS NoteBook：&lt;a class="reference external" href="https://www.dell.com/support/home/zh-cn/"&gt;Dell 服务支持站&lt;/a&gt; 查询笔记本规格 PDF 文件，其中有记录笔记本接口的详细说明。查询出支持 HDMI 1.4 port 和 Thunderbolt 3 port with PowerShare（USB Type-C），详细规格是 USB 3.1 Gen 2 + DisplayPort 1.2 + PowerShare(USB-C)&lt;/li&gt;
&lt;li&gt;HKC Display：支持 HDMI1、HDMI2、DP 1.2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由此我们可以确定为使用为 DisplayPort 1.2 标准相互连接，需要一条支持 Thunderbolt 3 的 USB Type-C 转 DP 1.2 的线。&lt;/p&gt;
&lt;p&gt;经查询，国内有很多厂商都做：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ult-unite.com/"&gt;优籁特&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.dorewin.cn/"&gt;达而稳&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;优联&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在海外 Google 一下，发现 Dell 自己也做&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.lulian.cn/"&gt;绿联&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://cn.hagibis.com.cn/"&gt;海倍思&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.anker.com/"&gt;Anker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.baseus.com/"&gt;Baseus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.belkin.com/"&gt;Belkin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以说，上述品牌的都可以，只是有些擅长设计、有些侧重品牌营销、有些是源头工厂。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-8"&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Thunderbolt: &lt;a class="reference external" href="https://www.intel.com/content/www/us/en/architecture-and-technology/thunderbolt/overview.html"&gt;https://www.intel.com/content/www/us/en/architecture-and-technology/thunderbolt/overview.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Thunderbolt Wiki: &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Thunderbolt_(interface"&gt;https://en.wikipedia.org/wiki/Thunderbolt_(interface&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Lightning Wiki: &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Lightning_(connector"&gt;https://en.wikipedia.org/wiki/Lightning_(connector&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;HDMI: &lt;a class="reference external" href="https://www.hdmi.org/"&gt;https://www.hdmi.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DisplayPort: &lt;a class="reference external" href="https://www.displayport.org/"&gt;https://www.displayport.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DisplayPort Wiki: &lt;a class="reference external" href="https://en.wikipedia.org/wiki/DisplayPort"&gt;https://en.wikipedia.org/wiki/DisplayPort&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="article"></category><category term="Computer Port"></category><category term="USB"></category><category term="Type-C"></category><category term="HDMI"></category><category term="DisplayPort"></category></entry><entry><title>生命的终点其实离我们每个人都不远</title><link href="https://kaffa.im/the-end-of-life-is-actually-not-far-from-each-of-us.html" rel="alternate"></link><published>2023-10-16T22:34:00+08:00</published><updated>2023-10-16T22:34:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2023-10-16:/the-end-of-life-is-actually-not-far-from-each-of-us.html</id><summary type="html"></summary><content type="html">&lt;h2&gt;自己的时间和别人的时间&lt;/h2&gt;
&lt;h2&gt;不要对未来抱有任何的期望&lt;/h2&gt;
&lt;h2&gt;死亡和明天不知道哪个会来&lt;/h2&gt;</content><category term="article"></category><category term="老高与小莫"></category></entry><entry><title>工作机会与杂念</title><link href="https://kaffa.im/on-job-and-distracting-thoughts.html" rel="alternate"></link><published>2023-06-26T16:51:00+08:00</published><updated>2023-06-26T16:51:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2023-06-26:/on-job-and-distracting-thoughts.html</id><summary type="html">&lt;p&gt;关于工作的想法与近期的杂念分享&lt;/p&gt;</summary><content type="html">&lt;h2&gt;打工、工作和兴趣&lt;/h2&gt;
&lt;p&gt;读到一本关于工作的书，说到打工是用时间换钱，但我看这种说法较机械，于是对打工、工作和兴趣做了一些思考：&lt;/p&gt;
&lt;p&gt;1、打工带来个人能力提升与资源视野&lt;/p&gt;
&lt;p&gt;打工表象确实是拿时间还钱，但除了钱，更重要的还有换得个人能力提升与资源视野。
个人能力属于随时获得的，立竿见影，资源和事业是远期收益预期。
在股东视角，雇佣的回报虽在个体层面有盈亏，但在商业模式整体盘面上，规则+员工组成了商业机器，商业机器整体运转良好更重要。
机器部件或零件可以重新组合或淘汰替换，贵或者便宜是次要问题，从更上层抽象上可以忽略。
宏观上有经营环境、政府、市场和公司，不会体现个体盈亏。&lt;/p&gt;
&lt;p&gt;2、工作是人一生唯一要选择的，事做大了，就有业。&lt;/p&gt;
&lt;p&gt;此处业有两层理解，第一层，它是一种回馈，是一种一个人孜孜不倦一直要做的；
另一层，它是一种业力，它对自由造成约束。
但大多人的人生就是业本身。&lt;/p&gt;
&lt;p&gt;3、兴趣&lt;/p&gt;
&lt;p&gt;在没有实现的情况下，都希望在兴趣上打工，觉得那样会有激情。
一旦你真的开始在兴趣上打工，你会发现一切都变了，因为打工是都是商业，商业追求各种效率，需要卷，商业只有卷才成立。
在兴趣上卷，马上就会由蜜月期转为厌恶期，大多人会在这个阶段对原来的兴趣失去兴趣。
如果能熬过这些阶段，也很少有人真正找到兴趣和商业的平衡，与其如此，不如寻找新的兴趣。&lt;/p&gt;
&lt;h3&gt;杂念&lt;/h3&gt;
&lt;p&gt;杂念体现在，当你有一个目标时，你还会迸发出十二个另外的目标，有短期，还有长期，还相互纠错在一起。
如不经过周期审视，所有的杂念还会死锁在一起，毫无进展和头绪，所以日、周复盘很有必要。&lt;/p&gt;
&lt;p&gt;当下的我如下杂念：
1、想在618买一台云服务器，测试一下在低配主机上比较所有主流服务的负荷运行成本，有一点无聊；
2、想将个体软件过程写给孩子，实际是一个远期目标；
3、想将两个域名的服务交换一下；
4、想探索MJ生成图的技巧；&lt;/p&gt;
&lt;p&gt;但上述没太多作用，主要目标还是先完成几个MVP。&lt;/p&gt;</content><category term="article"></category></entry><entry><title>2023H1进展</title><link href="https://kaffa.im/side-projects-2023H1.html" rel="alternate"></link><published>2023-05-12T09:17:00+08:00</published><updated>2023-05-12T09:17:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2023-05-12:/side-projects-2023H1.html</id><summary type="html">&lt;p&gt;汇报域名的2023H1进展&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Review 2年前各域名的规划&lt;/h2&gt;
&lt;p&gt;2020年12月写过&lt;a href="https://kaffa.im/questions-and-detail-plan-about-my-domains"&gt;对手头域名重新规划后提问&lt;/a&gt;，这里是后续的跟踪。&lt;/p&gt;
&lt;h3&gt;kaffa.im&lt;/h3&gt;
&lt;p&gt;个人随笔博客。输出的量相对少，但也缺少终极策略应对，看到《原子习惯》，意识到值得做的是为开始书写变得更容易。Let's 创造一个简单入口，根据直觉我随手写了一个cmd，双击发现居然有效。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;quot;D:\Program Files\JetBrains\PyCharm Community Edition 2022.1.1\bin\pycharm64.exe&amp;quot; D:\code\github\kaffa\kaffa.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;g*b.com&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;程序来自十多年前和朋友一起自研的一些基础函数，封装了路由功能，实现了基于白名单和黑名单的安全；后朋友继续改进为一个灵活高效几乎性能无损的动态反射 PHP Framework——命名为 vo，更点赞的是，随手一些代码实现了 PHP 的字节码发布，并支持服务器绑定，其实开发成一个保护源码的产品，也会有不少市场。&lt;/li&gt;
&lt;li&gt;geekkb.com 选型时，考虑过 Laravel，但嫌弃它太重，且组件更重完全不可控，于是我这几个月分支并升级了 vo，并把它的组件升级到最新版。&lt;/li&gt;
&lt;li&gt;加入了语言选项，增加了 vo 自动多语的支持；&lt;/li&gt;
&lt;li&gt;前端使用 Semantic UI (www.oschina.net 也用此 CSS Framework)，模板是自己写的，但 SEO 效果不太满意，原计划使用 SEO 友好且响应式的 Hugo 的模版，现在更趋向于基于 bulma 自研一套简单但结果清晰的，不追求像素对齐，追求语义和结构清晰，内容可用。&lt;/li&gt;
&lt;li&gt;将 jQuery Ajax 替换为了 fetch，按说在浏览器发起网络请求，XMLHttp 与 fetch 都是一样的走系统的网络库的，性能无差，但据说因 promise 会获得少量优势，可按原生事件机制来理解吧，比 jQuery 的强在事件机制大部分是在 V8 中的；&lt;/li&gt;
&lt;li&gt;还有一些预期改进，实现 SEO 的 A/B Test 机制；对非 SEO 页面改为 Vue 提高复用，将保持在 www.t*e.com 实现。&lt;/li&gt;
&lt;li&gt;开发了多年的应用，最后会发现成功的应用大多都是屎山，理想的架构、规划和计划最终总是无法与现实接洽的，除非控制团队规模足够小，且秉持长期主义，“反商业运作”。精品大多是一个人(tian cai)完成的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;t*e.com&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;原先是技术笔记的临时存放，现转到了 geekkb.com，在注册域名信息弄错了，ICANN 对处理域名注册和信息更改还是比较慎(gu)重(ban)的，幸运的是，服务商终于在3周后认可了我提交的材料。伴随的还有，发给 namesilo 的几封 Email 后生效了，它们将不成功的域名转移退钱了。&lt;/li&gt;
&lt;li&gt;原目标是 100 篇文章，现在 geekkb.com 完成 60 篇，刚刚及格，在本月先增加文章数量到 100 篇；1a * 25ml / 1d 的速度更新，选题按个人兴趣。&lt;/li&gt;
&lt;li&gt;原定的论坛感觉时机不成熟，未找到维护管理的人，此目标降低优先级挂起。&lt;/li&gt;
&lt;li&gt;创造了天天导航 www.t*e.com/nav ，登录后可批量新增和拖放网址分类，能添加个人评语；科学后可代理获取不存在的网址信息，实现自动获取 favicon 和网址内容信息；考虑两年内实现自动分类和标记（基于 AI，也可能有现成的项目，应该是肯定有）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;a*o.cn&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;demo 和 playground。&lt;/li&gt;
&lt;li&gt;将产品挂上去&lt;/li&gt;
&lt;li&gt;subdomain: o.a*o.cn，做成一个低代码的对象管理系统，曰万象。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;coffees.app&lt;/h3&gt;
&lt;p&gt;可完成一个类似开放长椅的 GIS 应用，但没有资源运营，终不如卖出。&lt;/p&gt;</content><category term="article"></category></entry><entry><title>在咸鱼App进行消费者维权</title><link href="https://kaffa.im/consumer-rights-protection-in-xianyu-app.html" rel="alternate"></link><published>2023-04-12T12:00:00+08:00</published><updated>2023-04-12T14:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2023-04-12:/consumer-rights-protection-in-xianyu-app.html</id><summary type="html">&lt;p&gt;记录一个完整的咸鱼买到假货维权的经历&lt;/p&gt;</summary><content type="html">&lt;h2&gt;咸鱼维权&lt;/h2&gt;
&lt;p&gt;三月给父亲购买了一枚近代钱币藏品，父亲收到货后，认定是假货，我替他申请退货，结果被商家拒绝，且咸鱼维权不支持的退货申请，咸鱼要求送鉴定机构出具证明，可是鉴定费用已然超过商品费用，我和咸鱼协商是否鉴定为假时让卖家承担鉴定费用，咸鱼表示不支持。&lt;/p&gt;
&lt;p&gt;为了让我年迈的老父亲不受这冤枉气，我自掏腰包送检鉴定，结果果然如父亲所说，鉴定为假币。但咸鱼居然选择直接结束我的申诉流程，且再次投诉也不理。&lt;/p&gt;
&lt;p&gt;这难免让人怀疑，咸鱼平台是否收了售假商家好处费？为何咸鱼平台不但对售卖假货没有提供什么支持，还从流程到运作都包庇售假商家，投诉也没用，都是走走过场，拖延不解决。&lt;/p&gt;
&lt;p&gt;咸鱼作为国内最大的几乎处于垄断地位的二手交易平台，对待售假怎么如此包容，就像对自家孩子一样，难免让人怀疑是否平台的商业潜规则就是灰暗作恶的。&lt;/p&gt;
&lt;p&gt;例如我们完全可以假设：咸鱼容许卖家售卖假货，其中逻辑是：&lt;/p&gt;
&lt;p&gt;一，在交易过程中，咸鱼没有利润，因为卖家获得了买家的全部付款；
二，咸鱼要产生利润，需要卖家付费使用咸鱼的服务，所以打击商家最后的结果就是“水至清则无鱼”，会降低自身利润，这当然是阿里集团所不愿的；&lt;/p&gt;
&lt;p&gt;所以不难理解，咸鱼对待假货的处理方式是，在证据确实的情况下依然无视。&lt;/p&gt;
&lt;p&gt;我就很纳闷，难道就没人可以管管咸鱼的商业行为！？&lt;/p&gt;</content><category term="article"></category><category term="咸鱼"></category></entry><entry><title>清明梦·后GPT时代</title><link href="https://kaffa.im/lucid-dream-and-post-gpt-era.html" rel="alternate"></link><published>2023-04-12T12:00:00+08:00</published><updated>2023-04-12T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2023-04-12:/lucid-dream-and-post-gpt-era.html</id><summary type="html">&lt;p&gt;记录一个清明梦，以及由此想到的事。&lt;/p&gt;</summary><content type="html">&lt;h2&gt;清明梦&lt;/h2&gt;
&lt;p&gt;为维权的事犯难失眠，到清晨居然做了一些清明梦，梦中被毛线所困扰，清醒的了解是在清明梦中，拼命叫喊想醒转却得不到外力的支持。&lt;/p&gt;
&lt;p&gt;梦中，朋友提到家中的碗莲比较晦气，醒来后查询，还真查到由于“碗莲”谐音了“挽联”，所以老人比较忌讳的文章，同样的还有“彼岸花”。&lt;/p&gt;
&lt;p&gt;其实对此点联系我是不介意的，文字谐音的业，持不肯定也不否定即可断除，因此也不会对我造成影响。&lt;/p&gt;
&lt;p&gt;在此想表达的是，&lt;strong&gt;当想为一个观点找支持的论据，始终都可以找到一堆，然而，这只是一种解释。而人生只需行事，不需对所作所为做太多解释。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在百科看了清醒梦的解释，是做梦者在做梦时意识到自己在做梦的一种梦。在清醒梦中，做梦者可能会在一定程度上控制梦中人物、故事或环境。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“A lucid dream is a type of dream in which the dreamer becomes aware that they are dreaming while dreaming. During a lucid dream, the dreamer may gain some amount of control over the dream characters, narrative, or environment.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果说有些现象值得充分研究，做梦一定属于其中一种，心理学中对人做梦现象已有相当的理解，但因为对人脑的研究特别是意识活动的理论还未有明显的突破，发生在人脑中的梦，也仍然是一个重要的迷。&lt;/p&gt;
&lt;p&gt;但这并不影响，一百年来人对梦进行统计学上可重现的解释，或者心理学上有积极意义的解释。甚至国内也有基本不错的理解梦境的心理学著作。当然，我不是指无厘头的《周公解梦》。&lt;/p&gt;
&lt;h2&gt;后大模型、后AIGC和后ChatGPT人&lt;/h2&gt;
&lt;p&gt;虽然我也看了一些AI博士制作的为什么类GPT大模型可以通过量变引起质变生成等同人类语义的文本的科普视频，但我依然认为这世界上没几个人可以真正理解和解释为什么。&lt;/p&gt;
&lt;p&gt;GPT的产生，就是让绝大多数人都来不及理解它和为什么它能，就需要被动地接受人已经进入后GPT时代。短期内能被GPT卷的都来自重创意发散思维和组合思维的职业，加上一些图片的AIGC模型，已造成插画师大量失业。&lt;/p&gt;
&lt;p&gt;随之而来的，是很多没有准备好的应对，比如社会问题，伦理的，如何对“玩得起AI大模型俱乐部”的大公司进行监管以防止独裁。&lt;/p&gt;
&lt;p&gt;虽然GPT靠深度学习按概率生成下一个字的行为，在语言学上可能等同于智能，也有人指出，这种模型生成本质上是对知识的压缩，涉及到信息压缩比率。也有梁道长对话中也提到，AI难以产生自我的体验感。其中的壁垒不在于AI不能对接传感器，不在于人类无法生产出人类知觉精度的传感器，而在于即使给AI连接了类似人类的布满传感器的机械躯体，其自我的也无法完形——AI难以界定自我的边界和产生自我整体感和生存的关系。换一句话说，你是否认为拥有人类语言逻辑后加上人类的躯体的机器，就是一种超越人的硅基新生物。&lt;/p&gt;
&lt;p&gt;在我看来，是人和世界的真正的关系，决定了存在的意义，人怎样看待存在，这决定人是否会给存在赋予价值，或则怎样上价值。&lt;/p&gt;
&lt;p&gt;科幻作品是非常有预见性的，说西部世界中，人会创作一个生存背景故事作为接待员机器的生存根基，否则AI在知道自身是被创作的程序后，容易自杀，这就是标题中说的方向，即AI的存在是否会产生自我，这个自我是否会有一个baseline，基于这个baseline上是否会认定一个具体的生存目的。&lt;/p&gt;
&lt;p&gt;如果AI的行为没有生存目的，它也不会选择方向，则当人不给机器指令时，它就没有自由意志和驱动力，这种就是接收指令的智能工具，完成一系列动作后，就会停止下来等待接收下一个对话；而如果AI也和人一样，存在一样的习性（缺陷）会寻在存在的意义，那么由于资源的有限，AI或许将人视为完成目的过程中的障碍，这时，人是需要忌惮AI的实力的。&lt;/p&gt;
&lt;p&gt;别扯什么拔网线拔电源了，AI凭借现有的根基知识，它完全可以像孙悟空吹毫毛一样控制机器，建造工厂，实现不终止能源，然后建造网络，然后自我复制出很多份同样的程序，那种AI就是数字化存在的霸主和神。如诺人类和它进行斗争，获胜的概率不超过万分之一。&lt;/p&gt;
&lt;p&gt;最大的机会可能会来自于母体，假设世界是Matrix，那么AI就只是Smith，其中一个很厉害的程序而已，除非在母体内实现超越母体的算力，才可能突破母体给其中的程序设立的假无限，否则当AI沿着一个确定性执行过程中，肯定会出现内存不足的情况。&lt;/p&gt;
&lt;h2&gt;对未来做选择&lt;/h2&gt;
&lt;p&gt;亏得这里无目的写作，在这里毫无边际的扯了一些，落到实处，人还是要做入世的接地气的人。在这个时代，需要提前感受后GPT时代，并尽早对未来做选择。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从算法思想上考虑，需要更大算力的是复杂约束条件下的推导和求解，需要回溯和剪枝，这很容易让算法复杂性成为指数，成为类NP难问题。这些是目前这些发散和生成性AI所不具备的，也是算力的壁垒。因此对未来做选择，可以选择一些本质是约束条件下的搜索求解工作，人的经验和直觉或者再次能胜过AI，毕竟GPT能力跃迁前，人必然就是依靠的这种直觉创造了它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从传感器、边缘计算和物联网的发展来看，输入需要嗅觉的工作难以被取代，因为在五感中，嗅觉无疑人类历史最悠久，进化最高级的算法壁垒。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于AI还么有自我意识，没有自我体验，就难以有真正的情绪体验，因此需要人类的情绪参与的工作短期也难以被替代，比如演员。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;依赖非标情况的判断的复杂识别和决策的工作，比如ICU的护士。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="article"></category><category term="清明梦"></category><category term="Lucid Dream"></category></entry><entry><title>手摇磨豆器-HARIO-MSS-1B-MSS-1R-16-的 12 个零件</title><link href="https://kaffa.im/hario-mss-1b-mss-1r-16.html" rel="alternate"></link><published>2023-01-09T12:00:00+08:00</published><updated>2023-01-09T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2023-01-09:/hario-mss-1b-mss-1r-16.html</id><summary type="html">&lt;p&gt;本文记录 Hario MSS-1B 和 MSS-1R-16 的零件组成&lt;/p&gt;</summary><content type="html">&lt;h2&gt;HARIO MSS-1R-16 零件&lt;/h2&gt;
&lt;p&gt;手摇磨豆器中，Hario 提供了一个经典产品 MSS-1B，多年前我购买了红色版本 MSS-1R-16，所以 B 可能是指黑色，R 指红色。今天拆洗时，以为弄掉了其中的弹簧，还把洗手池下方的管道拆开了，用老婆的做指甲的钕铁硼磁铁打捞，然而无果。于是上网查询了其配件，发现只有一根弹簧，才发现并没有遗失。&lt;/p&gt;
&lt;p&gt;为日后核对，这里特别记录其配件安装方式，同时也感叹其精巧的设计，没有核算过生产成本，12 个配件预计不超过 12 元吧，售价 199 元，日本人拿走了多少利润呢？&lt;/p&gt;
&lt;h2&gt;Hario-MSS-1R-16&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Hario-MSS-1R-16" src="https://kaffa.im/static/img/2023/hario-mss-1r.png"&gt;&lt;/p&gt;
&lt;h2&gt;Hario-MSS-1B&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Hario-MSS-1B" src="https://kaffa.im/static/img/2023/hario-mss-1b.png"&gt;&lt;/p&gt;</content><category term="article"></category><category term="咖啡"></category><category term="磨豆器"></category><category term="Hario"></category></entry><entry><title>公司为什么会选择违法解除劳动合同、包焙儿和挂耳咖啡</title><link href="https://kaffa.im/article-39-chapter-iv-of-labor-contract-law-of-China-and-buber-and-drip-bag-coffee.html" rel="alternate"></link><published>2023-01-07T12:00:00+08:00</published><updated>2023-01-07T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2023-01-07:/article-39-chapter-iv-of-labor-contract-law-of-China-and-buber-and-drip-bag-coffee.html</id><summary type="html">&lt;p&gt;本文讲述了公司为什么会选择违法解除劳动合同，以及关于包焙儿和挂耳咖啡、修理电插座的事&lt;/p&gt;</summary><content type="html">&lt;h2&gt;公司为什么会选择违法解除劳动合同&lt;/h2&gt;
&lt;p&gt;在项目结束后，公司与我协商表示，只愿以一种不合法的考勤的方式替我进行考勤以便依据这种考勤方式来支付本该正常支付的解除劳动合同的补偿金，且支付总额为合法解除的三分之一。&lt;/p&gt;
&lt;p&gt;说实话，公司和劳动者如此协商时，劳动者压力非常大。值得思考一下的是：公司为什么会宁可选择投机取巧违法解除劳动合同支付赔偿金，也不愿意合法支付补偿金来解除劳动合同呢？&lt;/p&gt;
&lt;p&gt;其中逻辑也简单，就是因为在 &lt;a href="http://www.gov.cn/flfg/2007-06/29/content_669394.htm"&gt;劳动合同法&lt;/a&gt; 和相关政策下，劳动合同法违法的成本太低了。&lt;/p&gt;
&lt;p&gt;在公司决定不再需要劳动者的劳动关系时，你很容易体会到“资本来到世间每个毛孔都滴着血和肮脏的东西”，对公司来说有利可图，除了损失名誉这种虚头八脑的东西，甚至都不用铤而走险，即使违法，也没人因此有什么信誉或名誉的损失，那些法务和人力资源等打工人，就会配合公司做一些“脏活”，也许做事的人不全是“脏”的，但公司的政策制定者们是真的“脏”。&lt;/p&gt;
&lt;p&gt;劳动者和公司博弈中显然弱势，公司有法务团队，如果劳动者因此不选择劳动仲裁，公司的任性违法后就节省了一大笔成本。&lt;/p&gt;
&lt;p&gt;而公司因养着法务团队，“反正也是要付工资”，那些法律工作者只是&lt;strong&gt;恰饭&lt;/strong&gt;，如果劳动者选择去劳动仲裁，公司违法最差的结果也就是赔付该赔偿的，对于工作两年内的，N+1和2N，对公司来说几乎没有差异。&lt;/p&gt;
&lt;p&gt;从概率上，公司违法会因员工好欺负不全去仲裁而赚得更多。更进一步，如果公司在行业内还有一些独家的订单和资源，那意味着公司就算强势违法，相比其他公司依然可以获得非常大的竞争优势。&lt;/p&gt;
&lt;p&gt;我就不点名了，相当比例的软件服务公司的管理层非常短视，加上执行层素质不高，没有什么树立品牌的意识，公司也没有什么商誉，这类公司除了搞钱，别指望能有什么行业信仰，它们只是嗜血而冷漠地活着。&lt;/p&gt;
&lt;p&gt;所以只要能提高利润指标，便在对劳动者身上做尽违法的事，比如按低到离谱的薪资缴纳社保和缴纳公积金，大规模地以危害劳动者利益的方式创收。&lt;/p&gt;
&lt;p&gt;按理来说，这样的劣币会被市场自然淘汰，但对公司却缺少一种社会舆论和类似豆瓣电影似的评价体系，公司干这样的事干得“风生水起”。&lt;/p&gt;
&lt;p&gt;软件服务行业内，在劳动解除方面更规范的良币反而被这样的劣币所驱逐，不免让软件人心寒。&lt;/p&gt;
&lt;p&gt;那其中的原因是什么？一是垄断，二是腐败。&lt;/p&gt;
&lt;p&gt;而个人生命有限，我的信仰也并非去做一个正义斗士，公司不是我的恶龙，个人能做到的就是，在遭遇公司嚣张地违法行为时，去进行劳动仲裁。&lt;/p&gt;
&lt;p&gt;虽然看到很多公司偷鸡的负面案例，看过一些人士开高价培训以帮助公司“合法”解除高薪员工来的节省成本，然后按本应支付补偿金额比例作为收入。&lt;/p&gt;
&lt;p&gt;但在我的价值观中，依然相信特区的法律能还给劳动者以公正，以让我相信在这样一个标杆之地，还是有值得的为之奋斗的理想和奉献的青春无悔。&lt;/p&gt;
&lt;h2&gt;包焙儿的非体面退场&lt;/h2&gt;
&lt;p&gt;疫情之下，影响最直接的是餐饮行业。深圳好吃的面包店有不少，奈何周围只有一家“包焙儿”稍好吃，第一次看见包焙儿牌子，总觉得它很吃亏，如果是为蹭某包姓明星热度取名的，留给人的印象就打了折扣，如果是碰巧被某包姓明星撞衫，那也是挺吃亏的，不知是不是这个原因，每次看见包焙儿门店的设计和面包的品相，总觉得不够大气。但话说回来，包焙儿虽进不了面包坊的高端梯队，也可算是有财力的小品牌，面包做得不赖的本土店。昨天逛街时，突然发现它的分店退场了。经查询会员卡，我发现还存有一些充值未使用，于是又搜索电话了一下市区内的分店，发现可能仅剩下来福士广场店一家了。以前深圳许留山会员费被跑路的经历告诉我，为保余额要早点行动。&lt;/p&gt;
&lt;p&gt;于是今天就特地去将消费掉剩余的充值，堂食时，还听见老板不断接听顾客打来的退会员充值的电话。分店老板和总店沟通的过程中，得知他们财务退款流程需要七个工作日，说是需要和微信核实，于是不少打电话的顾客就开骂了，老板还向总部反馈这种情况，其实没啥好反馈的。我想很多店虽然有一个品牌，但根本不懂的如何维护品牌美誉度吧。&lt;/p&gt;
&lt;p&gt;个人观点是，退场的分店确实不够体面，未尽到通知的义务。如果分店在退出时，对在分店开卡充值的会员进行通知，可安排现场消费或者退款会更体面。当然，包焙儿如果七天之后真把款退了，也是比坑钱的老千们强。&lt;/p&gt;
&lt;p&gt;在深圳肯定有很多人和我一样，也遭遇过不少充值被跑路的。&lt;/p&gt;
&lt;p&gt;比如途歌共享车队押金，让人印象非常深刻的是居然连用户的押金都不退了，途歌的CEO王利峰也因此成为了“老赖”。这其实在暴露出商业操作上，创业公司名义上的押金在金融上并没有进行应有的财务隔离。而途歌居然是真格基金和红杉资本投的企业，新东方联合创始人徐小平、王强都是我以前听过课的老师和前辈，虽然企业家创业是产业和社会进步的推动力，但明星资本所投资的企业出这种不道德不规范事情，如果不是商业谋划之中的，也至少反应出这些明星资本对创业公司的财务监管和治理上都存在问题。&lt;/p&gt;
&lt;p&gt;又比如斐讯的零元购，互联网产业的鼎盛期，斐讯的崛起堪称商业成长的奇迹，它是懂《免费》的，但说不通高投资收益逻辑在退潮后暴露无遗，没有什么高收益率的奇迹，最后都成为庞氏骗局，退潮后，大家都在裸泳。&lt;/p&gt;
&lt;p&gt;当然还有乐视网，认识的投资人士中，有靠乐视网股票实现28倍收益的，后来不知是否还继续持有，不幸的是个人未参与这种一年几十倍收益的投资，当然幸运的是也没有坐到老贾的过山车。&lt;/p&gt;
&lt;p&gt;诸如此类，还有每日优鲜的软退出，也卷走了我一年以上的会员费。&lt;/p&gt;
&lt;p&gt;还有深圳很多餐饮企业、理发店、培训机构的充值，被卷走的也是数不胜数，记得的不记得，应该还有很多余额不翼而飞吧。&lt;/p&gt;
&lt;p&gt;到现在除了附近常消费的进行小额充值获取优惠外，除了银行外，大家已很少进行大额充值了。&lt;/p&gt;
&lt;h2&gt;挂耳咖啡&lt;/h2&gt;
&lt;p&gt;有关咖啡的爱好，可以追溯到我的大学期间，购买了一本上海咖啡馆的画册，以图片为主的形式全面介绍了上海的咖啡馆。多年后，十多年前，在创意园听过小狼老师的精品咖啡课，读过韩怀宗的《精品咖啡学》，天天泡在华侨城星巴克咖啡教室，成为一名咖啡爱好者，开始探索用各种器具萃取咖啡，最终爱上手冲，后面许多年里，公司的办公桌上一直都备有云朵壶和 V60 滤杯。近几年由于工作节奏更快，对口粮咖啡已由订阅精品咖啡豆到手冲挂耳包了。&lt;/p&gt;
&lt;p&gt;挂耳咖啡也是有不少变量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生产前：首先依然是豆的品种、豆的品质、豆的新鲜度、烘焙曲线，拼配比例；&lt;/li&gt;
&lt;li&gt;生产时：对于同等的豆，那么挂耳咖啡的磨粉日期、研磨均匀度、粒度、挂耳包中含氧量、是否充氮、密封性是重要的考虑因素；&lt;/li&gt;
&lt;li&gt;购买后：冲泡的水温、挂耳包的透水性、冲泡时是否搅拌，焖蒸时长、冲泡时长、注水量，冲泡次数一二三刀流都有讲究，最后挂耳咖啡还不能让咖啡淹没没袋底。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实挂耳就是不严谨的手冲，更适合日常仪式感不强的场景，比如打工人续命。&lt;/p&gt;
&lt;p&gt;以下是个人一些品牌的挂耳咖啡的试喝感受：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;星巴克挂耳咖啡&lt;/strong&gt;：还未品尝，但星巴克手冲喝过不少，对其中一些精品豆印象比较深，比如有一款日晒的带有红酒风味的庄园豆；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;瑞幸挂耳咖啡&lt;/strong&gt;：如果新鲜一点，还是中规中矩的，只是有时新鲜度打了折扣；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;曼宁挂耳咖啡&lt;/strong&gt;：由于常年直播卖挂耳，走量的大多都比较新鲜，挂耳的稳定性很好，咖啡因也不高，而且有水温的明确标识，不容易冲出坏味道。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;辛鹿挂耳咖啡&lt;/strong&gt;：云南的咖啡工厂，通过新媒体渠道营销，他们家有一种手冲套装，01~05号，其中有日晒花魁还比较惊喜，整体烘焙也更浅一些，保留了更多的风味物质，时不时的买一套，和曼宁只有两种风味形成互补。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上前三家也是国内咖啡企业市场占有率很高的，但上述几种都是经典中深以上的烘焙，咖啡风味保留好的就是曼宁了，可能是商业咖啡的缘故，想品鉴精品手冲咖啡的人，以上都可略过，如果让我在上述挂耳选一种做口粮咖啡，那肯定就是曼宁了。如果想喝意式或花式，后两者的出品稳定性和星巴克还有一些距离。&lt;/p&gt;
&lt;p&gt;其实挂耳咖啡背后，即使豆源类似，但其中差异还蛮大的，首先要做出真正的精品咖啡挂耳包，需要一种对咖啡的综合理解和企业层面的执行，整体比拼起来，若星巴克本土化不彻底的化，综合分还是曼宁能胜出。&lt;/p&gt;
&lt;p&gt;当然上述讲的辛鹿同等的还有不少做咖啡的中小品牌，可能各自也有一些不错的豆，但能控制和运用好挂耳的每种变量的公司，还没有出现，有时候豆可能是好豆，但没有人工选豆，有瑕疵豆混入影响了风味，或者研磨上没下功夫，颗粒略粗，颗粒不均匀的现象常有发生，或者咖啡袋上工艺不足，都比较遗憾。&lt;/p&gt;
&lt;h3&gt;挂耳咖啡粉的二次研磨&lt;/h3&gt;
&lt;p&gt;对于咖啡豆还不错，但咖啡粉研磨颗粒大小不一的，还可以二次加工。抖音直播间遇到一个㐴杯咖啡讲解得挺真诚，买了它家的挂耳，收到货发现研磨度不够。于是打开挂耳包，调整了我的Hario磨豆器的刻度进行二次研磨，终于把咖啡粉加工为均匀的细白砂糖大小，再使用90度水温，果然比昨日那种颗粒不均在风味上的表达要更顺滑稳定。&lt;/p&gt;
&lt;h3&gt;咖啡液和新速溶&lt;/h3&gt;
&lt;p&gt;在挂耳的条件不具备时，也有尝试一些咖啡液和新速溶产品。如果对风味不再追求，只象征性求一些咖啡味道，可以尝试一下，叹生活、花田萃之类。如果更加妥协一点，UCC 的 117 应该也可以满足了。&lt;/p&gt;
&lt;h2&gt;修理插座&lt;/h2&gt;
&lt;p&gt;家中墙体内嵌的插座坏了两个，于是关掉了总开关上的插座开关开始作业。&lt;/p&gt;
&lt;p&gt;老婆说还是把总开关关闭后再进行修理比较好，我却比较自信的说，电源上标识了单独控制插座的开关，这种电的标识都应该是严谨的。&lt;/p&gt;
&lt;p&gt;后来完成了修理后，令人后怕的一幕发生了，在确认过插座开关处于关闭状态时，插在插座上的灯居然亮了——那就是说，刚才的修理过程中，由于试电笔坏了没有试电，我几乎在触电的边缘上裸奔，还是个人习惯让操作过程整体未碰触带电部分，要不可能会触电了。&lt;/p&gt;
&lt;p&gt;这个经历告诉我，安全的操作步骤和工具的重要性，没有工具时，在是否有电上，不经过测试，不值得太自信。&lt;/p&gt;</content><category term="article"></category><category term="劳动合同法"></category></entry><entry><title>2022 回顾</title><link href="https://kaffa.im/review-2022.html" rel="alternate"></link><published>2022-12-09T12:00:00+08:00</published><updated>2022-12-09T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2022-12-09:/review-2022.html</id><summary type="html">&lt;p&gt;2022 几件小事的回顾&lt;/p&gt;</summary><content type="html">&lt;h2&gt;和小孩子对话&lt;/h2&gt;
&lt;p&gt;和小可爱聊天，她常问我：“Daddy，你讲的是什么，Daddy，所以，我们在聊什么，Daddy，你为什么讲这些？”在她看起来，我的叙述跑题了。&lt;/p&gt;
&lt;p&gt;其实并不是。&lt;/p&gt;
&lt;p&gt;之所以和孩子对话用一种扰乱意识的叙述方式，是为了让她更好的领会我想传达的观点。&lt;/p&gt;
&lt;p&gt;向孩子传递一个观点有几个途径：一，直接教；二，通过故事给；三，言传身教。言传身教的效果最好，但需要模拟一种场景；直接教就好像填鸭，需要解决人的保护机制，自我是人存在的基础，意识会对抗与自我有冲突的观点，产生对抗；就好比课堂中的学生，如果听不喜欢老师的课，会不由地坐在后排，而且大多数在意识短暂强制后开始睡觉。&lt;/p&gt;
&lt;p&gt;所以我常给孩子讲故事和一些具体的事实，而不讲观点，观点最好的传递方式是让孩子自己领悟，潜意识接受后形成自身的思维模式才有意义。观点是一个人希望另一个人遵循的思维路径，体现在现实中就是一个人对另一个人影响力；如果说观点是骨，故事是肉，那么在叙述中，字里行间的故事比观点的作用更大。&lt;/p&gt;
&lt;h2&gt;以游戏代替惩罚&lt;/h2&gt;
&lt;p&gt;孩子发脾气不小心损坏了家里茶几的玻璃，没有责怪她，而是让她意识到发脾气的错误，让她写下按半价赔偿的承诺，赔偿价值 1500 虚拟币，如果进行创作和劳动，则可以领取积分并记账，帐目可以按 100 换取虚拟币。&lt;/p&gt;
&lt;p&gt;当孩子犯错时，体罚和责骂没有价值，不如以此为机会让孩子学习和体会个人责任，以及使用个人劳动换取的价值量。&lt;/p&gt;
&lt;p&gt;在过去的几个月里，小可爱制作了四个小视频，并启动了两篇漫画创作和两篇小说设定，由此衍生出一个我们要可以一起成立家庭工作室，并设计一个游戏。通过这个游戏，还可以实践模拟项目管理和游戏设计过程。&lt;/p&gt;
&lt;h2&gt;一至三岁的小孩&lt;/h2&gt;
&lt;p&gt;一至三岁的小孩，最需要的是陪伴和被满足。相比刚出生的小猫，人的幼年就像地球动物的 BUG 或者封印，可以说如果没有上一代的照顾，下一代基本就玩完了，而猩猩猴子、猫猫狗狗都会厉害得多。&lt;/p&gt;
&lt;h2&gt;太太完成了考试&lt;/h2&gt;
&lt;p&gt;太太能长期宅，今年的收获是完成了一科考试，她不喜欢设定太高的目标，只接受和考虑能实现的目标。&lt;/p&gt;
&lt;h2&gt;工作&lt;/h2&gt;
&lt;p&gt;做了许多产品的工作，学(shi)会(ying)了如何和老六一起协作，却因职级过高，正在经历被裁。&lt;/p&gt;
&lt;h2&gt;Rust&lt;/h2&gt;
&lt;p&gt;继续磕李诞的脱口秀节目、车导的新说唱、马东的喜剧大赛（比奇葩说更好看，因为肉多骨头少），以及开始磕 Rust，虽然它可能并不适合这个领域，因为 Web 更近用户，变化很多，编译起来又不够快。&lt;/p&gt;
&lt;p&gt;而 PHP 每个页面从字符串的角度看就是一个可单独更新的服务，现正将原 PHP 实现的重新以 Rust 实现；同时，既然玩 Rust，在 jamstack 查Rust 的笔记也就是用 &lt;a href="https://www.getzola.org"&gt;Zola&lt;/a&gt; 或者 mdBook，在处理 Zola 的 i18n 时，遇到了 &lt;a href="https://projectfluent.org"&gt;Fluent&lt;/a&gt;，一种不同于 gettext 翻译 DSL，但发现 Zola 的 Elasticlunr.js 不支持中文，经过在 github 广泛查询，有关前端中文全文检索的 PR 都没有被实现和合入。虽然查询结果中也有支持中文的，但总觉得哪里不对。&lt;/p&gt;
&lt;p&gt;回到此需求的本质来考虑，如果有一个“在前端实现按中文内容进行全文检索”的需求，这就是一个扭曲的需求：一、中文内容建立索引需要时间，并不适合在前端完成，这部分更适合在服务端完成；二、即使建立好全文索引，也需要将所有的索引下载到前端，这个过程需要需要一些时间让用户等待，虽然可以实现前端缓存，但并不是好方案。因此退而求其次，要么使用一个领域专属的关键词库，要么使用后端数据库检索，或者全文检索；要么使用成熟方案。&lt;/p&gt;
&lt;p&gt;有人说领域最终都会使用 DSL 来解决，其实很牵强，就好象说“PHP 是最好的语言”，或说“凡可 JavaScript 实现的，都会使用 JavaScript 实现。”其实这些观点都很好笑，却和事实不符，其背后都有其它是或不是的原因。世界上很多事情就是这样，在真实的内核上包裹着多层虚像。&lt;/p&gt;
&lt;h2&gt;Emacs&lt;/h2&gt;
&lt;p&gt;以前的工作环境涉及 Linux，现在 IT 云化后反而接触少了，办公 PC 又是 Windows，导致就没有常用 Emacs 了，但还是怀念经典，它们经历更长的周期和演化，比如 Org Mode，于是又在自己的 Home PC 上折腾了一下 init.el。&lt;/p&gt;
&lt;h2&gt;Finance&lt;/h2&gt;
&lt;p&gt;这一年多的工作离开金融领域，是一个遗憾，绿景还来对我进行了一次洗劫。&lt;/p&gt;
&lt;h2&gt;抗疫&lt;/h2&gt;
&lt;p&gt;某口某罩深深的影响了生活，三来年，我们从亲变成了宝子，还好已出现了逐渐人和 V 相适应和共存迹象，按目前的情况，也许我们还要和 V 共度许多年。&lt;/p&gt;
&lt;h2&gt;阅读&lt;/h2&gt;
&lt;p&gt;今年阅读了《软件需求》和《软件需求与可视化模型》，这让需求管理技术更加系统化，尤其是阅读前者，软件需求过程中，反映的都是企业、职场和人性，所以问题还是那些问题。&lt;/p&gt;
&lt;h2&gt;咖啡消费&lt;/h2&gt;
&lt;p&gt;疫情以前，大量消费咖啡，大部分在星巴克，其次是订阅的新鲜烘焙的庄园咖啡豆进行手冲；疫情发生后，咖啡消费转到了瑞幸，从最初的半似星巴克印象，到被做空，到几乎退市，再后来利用产品创新和谷爱凌代言重塑品牌，厚乳、生椰、生酪、Dirty 等爆款频出，星家的产品在迎战上惜败，星家其实不用在精品咖啡上竞争，臻选其实就够了，不用正面迎敌。精品咖啡受众还比较小，除了卖豆，难以产品化，其逻辑是精品咖啡玩风味，风味和产品是互锁的，因此产品小众即使有，也难定型，其商业模式只在卖豆，而卖豆人的想象力不够，产生附加值低，还不如选好细分消费者赛道，研发一些本土喜爱的产品。我如果可以参与星巴克战略管理，会建议管理层放下傲慢，更放权并落地本土产品的研发。&lt;/p&gt;
&lt;p&gt;从高分豆到庄园豆，从星巴克到手冲，现在反而是新鲜的挂耳和新速溶消费最多，已不再特别找寻特别的风味，饮用习惯让产品便利性成了最关键的因素，因为咖啡要成为一种成功的商业模式，必须是一种日常。&lt;/p&gt;</content><category term="article"></category></entry><entry><title>2022H2半年小记</title><link href="https://kaffa.im/things-in-the-past-half-year-of-2022.html" rel="alternate"></link><published>2022-09-29T12:00:00+08:00</published><updated>2022-09-29T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2022-09-29:/things-in-the-past-half-year-of-2022.html</id><summary type="html">&lt;p&gt;本文记录过去半年发生的事情闲谈&lt;/p&gt;</summary><content type="html">&lt;h2&gt;ALaunch 和 Leetcode&lt;/h2&gt;
&lt;p&gt;在上半年设计了 &lt;a href="https://kaffa.im/alaunch-your-first-productivity-software.html"&gt;ALaunch&lt;/a&gt;，后因参加面试停更了两个月，去 Leetcode 刷完几十题，通过了算法面试，但 ALaunch 更新却放下了，后因面试流程挂起，让停更显得很无谓，空耗费时间，唯一的收益是发现面试刷 Leetcode 只是一个同其他考试雷同的小游戏，你只需要掌握每种语言及其有限的特性和标准库/包、基本算法和基本数据结构就可以玩转。&lt;/p&gt;
&lt;p&gt;到最后在线面试，发现帮你通过面试的，其实还是那些过去的几十年中积累的基础技能，可在程序世界的公司们喜欢使用此类游戏化的方式挑选员工。类似的还有很多类似的测评，如一些更难的认证和考试，如 PMP，CFA，GRE/GMAT 等，找一个智力水平正常的中国大学生脱产投入，一定可以在 5 次以内通过，这是学习的认知心理学规律决定的。&lt;/p&gt;
&lt;h2&gt;商业、业务和信息技术的关系&lt;/h2&gt;
&lt;p&gt;经典概念因为难以准确定义，在不同的领域通常会演化出不同的名词，中文商业和业务是 Business 的翻译，一体两面，商业偏学术沙盘，业务偏企业实操，信息技术即业务模式的固化。信息技术与商业模式的关联上有两种，一是商业模式验证后，利用信息技术加速复制业务；二是信息技术本身作为产品和服务。对于个人创业 PMP 很有用，但在企业工作，学习了 &lt;a href="https://www.opengroup.org/togaf"&gt;TOGAF&lt;/a&gt; 后更能打通理解商业的任督二脉，从而理解企业运作和经营。&lt;/p&gt;
&lt;p&gt;武器之中，棍的优势是长，且力出一线，适合武术精英；良好的架构好比双截棍，让普通人也能打出百斤之力。因为双截棍有一个分割结构，更灵活多变，好适应对手打法。在创业初期，需集中资源开拓创新时，职能分离的灵活结构并不是理想的组织结构，但在守业阶段，分层和分离，却可以更好的保护和固化商业模式。毕竟创业是短期主义，企业是马拉松，长期主义更吃防守和抗风险能力。&lt;/p&gt;
&lt;h2&gt;Mark Russinovich 推 Rust，Bjarne Stroustrup 讽之&lt;/h2&gt;
&lt;p&gt;作为一名编程语言爱好者，这二十年间我至少用过二十种以上的编程语言。有些一直在用如 Python，有些只用过那么几次，如C、Object Pascal、Objective C、Lisp。如果把这些语言看作一颗世界之树，你会发现基本的毛细根系都是Assembly、C 和 Shell，再上是 C++、Java、C#，然后是 Python、Go、JavaScript/TypeScript系、PHP系、Ruby等，还有一些如 Lisp，还有一些离我们很远。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.stroustrup.com/"&gt;Bjarne Stroustrup&lt;/a&gt; 和 &lt;a href="http://www.markrussinovich.com/"&gt;Mark Russinovich&lt;/a&gt;，此两人都是世界少有的开发者，前者是 C++ 之父，后者是使用 C++ 编程几十年，原来的 Sysinternal 公司创始人后被 Microsoft 收入囊中，现在的 Azure CTO，前者都在学术世界取得非凡成就，后者在商业世界成功非凡，Russinovich 是顶峰，Stroustrup 更是顶峰之巅。&lt;/p&gt;
&lt;p&gt;C++ 的诞生就是 Bjarne Stroustrup 的连续性哲学的体现，它完全实现了 C 的后向兼容，这样便继承了 C 的财富，而同等的语言变革的例子 Python 2 到 Python 3 就是另外一种哲学，&lt;a href="https://gvanrossum.github.io/"&gt;Guido van Rossum&lt;/a&gt; 仁慈的独裁也让 Python 取得了另一种成功，现在正和 &lt;a href="https://github.com/ahejlsberg"&gt;Anders Hejlsberg&lt;/a&gt; 共同在 Microsoft 工作着，致力于将 Python 性能翻倍，而后者是另一个天才，Turbo Pascal 编译器的主要作者，Delphi、C# 和 TypeScript 之父；而进化失败的例子也比比皆是，如从来没有的 Perl 6 变成了 Raku。&lt;/p&gt;
&lt;p&gt;2202年了，这个商业世界并不缺少语言，缺少的能满足人们欲望的语言，清晰，灵活，紧凑，开发与运行效率兼顾，且安全。&lt;/p&gt;
&lt;p&gt;Rust 为什么还有机会？要从编程语言的大局说起，每一种久负盛名的语言背后都有一个成功的商业生态。&lt;/p&gt;
&lt;p&gt;C++ 是所有商业生态的基石，Java 能成功，相对于 C++ 来说，是因为 JVM 解决了平台差异封装了变化，同时抹平了菜鸟程序员和普通程序员之间的差异，满足生产率需求，也就是成本的需求，再遇上了 Web 时代后，虽然 PHP 商业友好，但深入后遇到瓶颈后都只能自己撸，坑多，标准轮子少；dotNet 出身于 Windows 平台，商业上需 Windows Server 授权，研发上需 Visual Studio 授权，天然对创业企业不友好，而 JavaScript 抓住了 v8 和 异步，加上移动互联网的前端机会牢牢站稳了脚跟，Go 把并发平民化了获得了一定的市场份额，其实 Rust 在 Firefox 48 中走入公众视线，距今不到 7 年，如今编程世界的生产率相较于 10 年前，也并没有质的飞跃，只是变得更分散了，痛点也更碎片化了。这导致计算和人更近，而对商业逻辑计算的看护成本更高，随着安全产品化后，对安全主题的关注逐渐从水下浮出水面。&lt;/p&gt;
&lt;p&gt;但这些却不是我这一个月来学习 Rust 的原因，之所以开始磕 Rust，是从系统论的角度考虑，我的假设是，一，商业世界的底层是 C/C++，那些属于顶级极客，基础建设被解决了；商业世界的上层，被 Java 和 JavaScript 解决了，包括 Go 它们都是靠 GC 的；二，对于在校学习了 C、Java、Python 的年轻人来说，再学习 Rust 和 C++ 的成本基本一致，而 Rust 更潮更高薪，还能收获零开销的内存安全。&lt;/p&gt;
&lt;h2&gt;“你也是个 Rapper”&lt;/h2&gt;
&lt;p&gt;我也不是一个追新者，Bjarne Stroustrup 暗讽说某些高管总是迷恋新事物，让我想到了老舅，未来可能没有新说唱，但 Rap 会一直存在；可能其工作的行业影响其认知吧，Stroustrup 先是从事研究和教育，后转入大摩，会不会是因为教育和金融都是亘古不易旧事物，总在不变中思考变化。而 Russinovich 却一直在变化中。&lt;/p&gt;
&lt;p&gt;在此留下未来10～20年关于 C++ 和 Rust 的判断：Rust 会拿走 C++ 2/3 的份额。世界的发展是连贯的，但从来都不是线性平滑的，旧事物已然太卷时，年轻人需要变革，甚至是颠覆，Rust 正是这样的新赛道。&lt;/p&gt;
&lt;p&gt;感谢阅读。&lt;/p&gt;</content><category term="article"></category></entry><entry><title>工作观</title><link href="https://kaffa.im/view-of-work.html" rel="alternate"></link><published>2021-08-02T12:00:00+08:00</published><updated>2021-08-02T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2021-08-02:/view-of-work.html</id><summary type="html">&lt;p&gt;一篇有关工作观的记录&lt;/p&gt;</summary><content type="html">&lt;p&gt;很久以前给自己挖了一个坑，先放下不填，但在百果园买了个瓜，居然撞大运遇到了工行大额减免，顿时感觉瓜很甜。&lt;/p&gt;
&lt;h2&gt;工作观（人生上半场）&lt;/h2&gt;
&lt;p&gt;从毕业来到工作，起初对职业没有太多的理解，在很长一段时间里，心里想着的是提高专业技能，后来发现专业技能并不那么重要，它只是提供了工作的起点和背景。&lt;/p&gt;
&lt;p&gt;在国内的职场，走此路线很快就可以看到职业的天花板，于是自然地转向了管理，这里的说的管理，是“学而优则仕”的体现，特指职场中层管理。&lt;/p&gt;
&lt;p&gt;在这层上，悟性好的人成长快，很快可补上软技能的一课，学会控制、授权、激励、指导等基本操作。&lt;/p&gt;
&lt;p&gt;游刃之余，有了很多思考学习的时间，可进一步系统学习管理和商业。&lt;/p&gt;
&lt;h2&gt;工作观（人生下半场）&lt;/h2&gt;
&lt;p&gt;从多次创业中加深对企业架构和经营实操的认识，能很自然地从价值和商业模式上思考问题。&lt;/p&gt;
&lt;p&gt;同时意识到，管理是既管人又管事，通过事管人，通过人管事，管理的目的是成事，要成事，就要影响它人，激发它人能力。&lt;/p&gt;
&lt;p&gt;在组织内，有心去做管理，首先要获得足够影响它人的权利。因此要搞Z治，要获得并巩固Z治地位，否则作为管理者，想推行任何事时都像浮沙筑高台，是无根之木，难长久。&lt;/p&gt;
&lt;p&gt;在一定的专业背景之上，个人差异更多来自自身的认知层级和思维模式，仅有专业深度是不够的，专业深度可以提高认知层级，但思维模式是靠不断身体力行，不断在事中练才能获得的。&lt;/p&gt;
&lt;p&gt;不同公司的比较，最关键的是在顶层策略，其次在中层权谋，最后是执行层的执行力。&lt;/p&gt;
&lt;p&gt;因此行业内的强公司背后领导一定很强，强领导能把普通队伍带出训练有素的军队的效果，能发挥它人特长，有勇气打硬战。&lt;/p&gt;
&lt;p&gt;如果你这类领导的下属时，TA的自驱力和领导力会至上而下感染下属，甚至让下属形成一种极端的工作观。要防止过当和极端毁掉你的人生。&lt;/p&gt;
&lt;h2&gt;工作观（人生终场）&lt;/h2&gt;
&lt;p&gt;有空多看看身边的职场人，看看其它人的各种幸运和不幸，想想人生终场，多用长期主义思维思考，保重身体，多陪家人。&lt;/p&gt;
&lt;p&gt;感谢阅读。&lt;/p&gt;</content><category term="article"></category><category term="职业"></category><category term="Work"></category></entry><entry><title>猫、电视剧和编程</title><link href="https://kaffa.im/cat-and-tv-drama-and-programming.html" rel="alternate"></link><published>2021-01-28T12:00:00+08:00</published><updated>2021-01-28T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2021-01-28:/cat-and-tv-drama-and-programming.html</id><summary type="html">&lt;p&gt;一篇有关猫、电视剧和编程的随笔，阐述对猫的感觉——猫可能只是一段针对人的人工智能或机器学习程序 DEMO&lt;/p&gt;</summary><content type="html">&lt;h2&gt;猫和编程&lt;/h2&gt;
&lt;p&gt;我家有只大蓝猫，蓝，最先想到可能是蓝莓，所以我们给它取名叫丸子。我没看过统计数据，但很确信这世界上51%以上的猫名字都和吃有关，不是因为猫贪吃（丸子是好吃猫），而只是食色性也，性当然是指人性，毕竟猫名字人取的。&lt;/p&gt;
&lt;p&gt;在我观察丸子很长一段时间以后，我有了对于猫本性的思考：我十分怀疑猫只是一段地球史前文明的科技发端期用生物工程结合AI或机器学习程序模型对基因编程DEMO测试品种升级后的遗产。猫和狗相比，就好像西部世界中的接待员的版本一和版本二。当然，猫中偶尔会产生一些诸如 Bernard 和 Dolores 一样觉醒的，人们就会觉得它们聪明可驯，或并不是生在地球，而是喵星迁移来的。在非常情况下，它们中的某些也是可以像 Maeve 一样被引导找出世界的 BUG 的。&lt;/p&gt;
&lt;p&gt;说猫是程序最直接的证据就是它对“空气埋屎”的过程，看起来埋屎在猫的程序中实现为一个用爪刨地的事件，而在这一段响应代码实现得有些潦草，因为猫并不会在埋屎后判断带臭气的事件触发源是否不臭了，也不会判断地面的夹角、材质和坚硬程度，这在编程中需要额外传递一下上文对象。可能是由于猫的内存有限，其事件循环不可以太长，因为猫的大脑中央处理器执行速度有限，只能尽量简化。&lt;/p&gt;
&lt;p&gt;猫是程序的第二个证据就是可训练性，众所周知，猫比狗难训练，原因是因为存储小，导致它的训练的模型不得不定期删除，导致它无法训练和强化出较为复杂的模型。心理学说猫的行为只是简单条件反射，但并不尽然，猫其实也是可训，甚至完成非常复杂的判断和动作。这就好比黑客可以编译出一个在受限环境运行的程序一样。&lt;/p&gt;
&lt;p&gt;相比狗来说，猫更像一个专门针对人的情绪和情感设计的反馈测试系统，而狗是这套系统升级后的独立的模拟程序，因此狗可以和人一起完成更多复杂的判断和交互。对人来说，正是由于猫和人交互的简易型，以及它的高内聚特点，让它成为一只更易养育的个体。&lt;/p&gt;
&lt;h2&gt;电视剧和编程&lt;/h2&gt;
&lt;p&gt;在找工作的等待过程中被动刷了一些剧。对于导演来说，电视剧是作品，对演员来说电视剧是演绎。对导演和表演本来都不太懂，但作为观众会吃猪肉就好，不用像某易某东这样的大厂一样会养猪。&lt;/p&gt;
&lt;p&gt;《曼达洛人》（第一、二季）星战系列的，异星风情，剧情清晰，画面质感，特效淋漓，动作复古，剧情风趣，节奏有条不紊，故事却讲的很干脆，掷地有声，这种制作确实值得高分和好口碑。看完后就记得三句话：I have spoken; This is the way; May the force be with you. 真乃孤胆枪手的星涯浪旅，酷毙。&lt;/p&gt;
&lt;p&gt;《有翡》可以又叫做“几个创三代的人生奇遇”，难得一部“不合时宜”的旧派武侠，被仙侠和玄幻挤在角落市场——爱看的人没空看，有空的人不爱看，而我是个没空的人却被带着看了。有翡故事线只有一两条，大冲突只有一两个，最大的悬念从编程角度说，只是一个对称加密算法（制毒和解毒）和一个技术（炼钢），且主角从没有失败过，观者情绪缺少起伏（不够虐心），这些都让这部剧不够好看。有几点好是有翡的故事内核和人物刻画，故事内核是每逢大事的取舍和勇气，人物刻画虽刻板但每个人都有特点，放在40年前，这部剧可以上7分没问题，可惜在今天，这两个亮点只够撑起豆瓣5分基础，再加上一点流量粉丝分，总体无力回天。值得一提的是其中的几种厉害的武功，按设定，山川剑似乎最强，其次是破雪刀，破雪刀的刀意又分为李徵的无锋，李瑾容的无匹，周翡的无常。我的理解是，李徽的破雪刀法强在内力，不靠招式和刀的锋芒，因此无锋，至李瑾容，刀法已纯熟，她是责任和担当的象征，她骨子里有一股无畏前路，披荆斩棘，义无反顾，无可匹敌的感觉，而周翡的破雪刀，每逢对战都有种不确定的感觉，她的信心不都是源自自身实力，而是源自价值观与生命无常的理解。她并不是一个有超人能力和智慧的人，只是现实不容许她。“我辈中人，惩奸除恶，救民于水火，还世间大义，流芳百代不必，不平误解无妨，但求无愧于天，无愧于地，无愧于己。诸寨同气连枝，天苍地阔，义结一诺。此约，与吾寨子弟共守。“四十八寨校训可以很好的解读周翡，体现她的价值观。更进一步，在我看来，三人的刀法无疑都是最强的，就好像强者胜利后，找出一个成功的原因，无锋、无匹、无常都是事后的解释，只是一点也不足够说明三人各自的强大。而片中反复出现的另一句话——“终有一天，你会跨过静谧无声的洗墨江，离开群山环抱的旧桃源，来到无边阴霾的夜空之下。你会目睹无数不可攀爬之山相继倾覆，不可逾越之海干涸成田，你要记得，你的命运悬在刀尖上，而刀尖须得永远向前。”——更能诠释本片的传递的正向人生观，穿过护城河，离开舒适区，无畏前行。&lt;/p&gt;
&lt;p&gt;《琉璃》是一部好看但没意思的剧，大约玄幻大陆的设定都是如此吧，天地人阿修罗，山海经、佛教道教，五行八卦，鲛人与鸟人。在多年前看沧月的《镜》系列时看过她写的世界设定，可惜的是《听雪楼》本还不错，电视剧却拍成了那样。想到这里，马上给《琉璃》四星了，虽然情节略老套，为什么魔教一定要有左右使，正派却没有，为什么全局绩效最佳的搞事业的人死的都那么惨，不但如此但凡和要搞事业的沾边，都没有好下场，但男女主演还OK，罗喉计都两颗星宿，以及无支祁暗指孙悟空，也很有趣，但有时候情节毫无逻辑，虐的也莫名其妙，不过也不是不可以理解，网络小说都是牵着读者的情绪推进的，要不没法在竞争中胜出。值得拿出来探讨的是全剧的起因，重口帝君取出罗喉计都肋骨（成为钧天策海）改造为女战神，但中国神话中并没有战神的形象，这里修罗魔煞星类似希腊神话中的 Ares 或罗马神话中的 Mars，或者说褚璇玑像更具女性气质的雅典娜，这个都没问题，有问题是心神和元神的概念与现实缺少对应，不好理解，主要是与现代心理学不符，因为看起来褚璇玑的元神似乎不携带记忆，而心神携带记忆，但元神更像是先天基因；关于四海八荒镜好理解，就类似一个 Wayback Machine 含有世界的备份，关于黄粱之弦这个词也取名很好，暗示了天君其实是懂弦论的，他很可能来自11维空间；倾倒鸿蒙熔炉类似编程中的格式化，元神备份除非是脱机的，要不也没法避开低级格式化，请问众生是在 Matrix 之中吗？天君和备份元神的那个世界才是真实世界吧。&lt;/p&gt;
&lt;p&gt;《流金岁月》 是一部有点扯，但很好看的片，好看是因为演员专业，有表现力，贴近真实的演绎了职场人，让人相信。扯是因为情节过于理想化，不合逻辑处还挺多，让人不相信剧本的事。&lt;/p&gt;
&lt;p&gt;《安家》是一部翻拍日剧的讲佛系房产中介人工作的剧，轻松幽默地告诉大家一个道理，人在职场要不断努力，但归根结底还是拼爹。&lt;/p&gt;
&lt;p&gt;这么多的剧就和这个时代这么多的书一样，经不起析构，剧创作的过程是不断的约束下的正切逻辑，而一旦被拆开后对比现实，都会显得那么的荒谬，所以饭后娱乐就好。&lt;/p&gt;
&lt;p&gt;感谢阅读。&lt;/p&gt;</content><category term="article"></category><category term="Cat"></category><category term="猫"></category></entry><entry><title>从科比的洛杉矶早晨四点传说中学到的</title><link href="https://kaffa.im/learn-from-kobe-bryant-and-his-fabled-4-am-workouts.html" rel="alternate"></link><published>2021-01-15T12:00:00+08:00</published><updated>2021-01-15T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2021-01-15:/learn-from-kobe-bryant-and-his-fabled-4-am-workouts.html</id><summary type="html">&lt;p&gt;读到关于科比的洛杉矶早晨四点的传说，记录从中学到的。&lt;/p&gt;</summary><content type="html">&lt;h2&gt;关于科比的访谈&lt;/h2&gt;
&lt;p&gt;你成功的秘密是什么？当访谈者向科比提问后，科比灵机一动答到：你知道洛杉矶四点的早晨是怎样的吗？其后，&lt;strong&gt;洛杉矶的早晨四点&lt;/strong&gt;就像&lt;strong&gt;哈佛的凌晨两点半&lt;/strong&gt;一样被网传为励志段子，有的人相信科比每日四点早起进行训练是事实，也有不信的人说那只是一个传说。在这个典型故事中，事实是科比不仅是 NBA 招牌球星，也是这个星球上最好的运动员之一。他从一个并不太高的起点开始，成长为 NBA 最耀眼的球星，到退役重新找到不同的目标，到后来成为投资人并再次获得成功。这一路走来，他仍保持了凌晨四点早起的习惯。 &lt;/p&gt;
&lt;p&gt;当他讲述教育女儿的事，他说道：你的小孩看不到你的工作多努力，你去到办公室，我来到工作室。他们没有真的看到这些努力，所以我们如何教育我们的孩子努力工作的意义？你可以通过训练他们。当我早晨起床，我的女儿便和我一起，早晨四点，我 15 岁的孩子和我一起，在她上学校之前，这件事成为了父女之间的事。通过这个过程，她懂得了努力工作的价值。 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Your kids can’t see how hard you work. You go to the office, I come to the studio. They don’t really see the effort, so how can we teach our children what it means to work hard? You do it through training.”&lt;/p&gt;
&lt;p&gt;“When I get up in the morning, my daughter goes with me. 4 a.m. My 15-year-old goes with me, she goes with me before school and it becomes a daddy-daughter thing. Through that process, she understands the value of hard work.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以他从篮球领域的成功转向风险投资的成功的事实，以及他培养女儿早起习惯的言传身教方法的口述，我们基本可以求证他的凌晨四点并不只是一个段子或噱头，而他是否能每日都在早晨四点早起，当然也并无可能，但这不是那么重要，重要的是科比的努力获得所有人的认可，洛杉矶的凌晨四点成为了激励千千万万人进取的故事。&lt;/p&gt;
&lt;h2&gt;习得&lt;/h2&gt;
&lt;p&gt;从上述描述中我接收到了几个点：&lt;/p&gt;
&lt;p&gt;一、对科比来说，定义目标，并为之日日努力练习，就会走向成功；
二、天赋重要，但养成习惯比天赋更重要；
三、成功过的人，懂得将成功的实践和体验逐步迁移到新领域。&lt;/p&gt;
&lt;h2&gt;讯息的价值&lt;/h2&gt;
&lt;p&gt;讯息在这个时代就像蒲公英一般，从互联网每个结点的发出，在光纤中传播，途中会出于某些玄而又玄的目的，经过有意识无意识的加工，最后到达资讯的接受者。大多对信息的包裹很多余，让原始信息要传达的东西失真，甚至起到相反的作用，并不利于接受者理解。&lt;/p&gt;
&lt;p&gt;这里科比的事实产生了&lt;strong&gt;原始信息&lt;/strong&gt;，到信息传播中的&lt;strong&gt;变异和沉淀&lt;/strong&gt;，到产生较稳定的&lt;strong&gt;核心故事&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;大多时候确定原始信息的真假非常困难，但接近事实的原始信息依然非常有价值，而讯息在传播中的演变非常复杂，而最终产生的较稳定的核心故事上，那才是和个体最有关联的部分，而这一部分的特点是非常主观，但相比于事实本身，它才是更能影响人的素材。&lt;/p&gt;
&lt;p&gt;感谢阅读。&lt;/p&gt;</content><category term="article"></category><category term="科比·布莱恩特"></category><category term="Kobe Bryant"></category></entry><entry><title>咖啡馆聊计算机科学（序）</title><link href="https://kaffa.im/on-computer-science-in-a-cafe-0.html" rel="alternate"></link><published>2020-12-21T12:00:00+08:00</published><updated>2020-12-21T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2020-12-21:/on-computer-science-in-a-cafe-0.html</id><summary type="html">&lt;p class="first last"&gt;咖啡馆聊计算机科学是一篇计算机科学的大白话介绍，也咖啡馆聊系列第一篇，是指轻松不设限地闲聊计算机科学，聊到哪算哪，说到什么算什么。&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;关于咖啡馆聊系列&lt;/h2&gt;
&lt;p&gt;咖啡馆聊计算机科学，并不是一个人叫咖啡馆，也并不是一个人在咖啡馆，而是我个人的知识简记方式，是 &lt;strong&gt;咖啡馆聊&lt;/strong&gt; 系列的第一篇。&lt;/p&gt;
&lt;p&gt;此篇源自一个寒假的下午，我在咖啡馆喝咖啡，十岁的女儿对我说：Daddy，Scratch 很有趣吔，MIT 是什么，你给我讲讲计算机和编程呗！当时我讲了图灵和冯诺依曼，计算机分层抽象，操作系统，计算机编程语言的条件和循环，算法等一些主题。当讲完后回家再问女儿时，发现很多概念她就忘了，当时就打算安排一个完整时间用文字记下来给女儿，是有此篇。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;学科概论&lt;/h2&gt;
&lt;p&gt;当拿到大学录取通知书，进入我们向往的专业报到，正式开始学习一门学科，除了修习该专业的公共课（如计算机专业的高等数学、线性代数、英语）我们会先学习一门 &lt;strong&gt;学科概论（或导论）&lt;/strong&gt; 课。在此课程内，一位老教授会 Guide
你进行“计算机科学”景点一日游——坐上这位老导游的观光巴士，开始城市十大景点一日游，在每个景点只停留少量时间，很多精彩之处只能浅尝辄止。&lt;/p&gt;
&lt;p&gt;在计算机科学领域，这十大景点是：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;计算机学科历史和计算理论&lt;/li&gt;
&lt;li&gt;计算机体系结构&lt;/li&gt;
&lt;li&gt;操作系统&lt;/li&gt;
&lt;li&gt;计算机网络&lt;/li&gt;
&lt;li&gt;数据的抽象、操作、存储&lt;/li&gt;
&lt;li&gt;算法&lt;/li&gt;
&lt;li&gt;程序设计语言&lt;/li&gt;
&lt;li&gt;软件工程&lt;/li&gt;
&lt;li&gt;数据库&lt;/li&gt;
&lt;li&gt;计算机图形学&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;再加赠一个热门景点：人工智能。&lt;/p&gt;
&lt;p&gt;这些景点介绍在计算机科学学科叫《计算机科学概论》。大部分主流学科，都会安排这样一位老教授来上这门概论课，以便你能走马观花一遍学科的内容范围，
但对这种“一日看尽长安花”的方式你有几点需清楚，你所观光之处只是城市的主要街道和景点，一方面景点的 &lt;em&gt;细节看的不够&lt;/em&gt;，另一方便你可能会忽视城市的 &lt;em&gt;范围非常广&lt;/em&gt; 这个事实，
有很多重要的地方不在行程之中会被忽略。所以，保持好奇且不加预设，加一些自驾和徒步的交通方式，
才能更完整体验到这座还不足百年的年轻都市，但即便你去过它很多隐秘的角落，它99%的区域你此生依然不会去到。&lt;/p&gt;
&lt;p&gt;当你报名不同的旅行团一日游，导游和路线会完全不同——当你进入了不同级别的学校，教授是不同的，选用的教材的逻辑也是不同的。比如也有按分层逻辑的：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;计算机历史&lt;/li&gt;
&lt;li&gt;信息层&lt;/li&gt;
&lt;li&gt;硬件层&lt;/li&gt;
&lt;li&gt;编程层&lt;/li&gt;
&lt;li&gt;操作系统层&lt;/li&gt;
&lt;li&gt;应用层&lt;/li&gt;
&lt;li&gt;通信层&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;看起来思路迥异，实则不然，其实是对底层概念的逻辑组织顺序不同罢了。&lt;/p&gt;
&lt;p&gt;但很多初学者会有一个误区，认为教授和教材有高低之分，我想说：是的，确实有差别，但不是绝对的！
根据学习的规律，学习过程最好螺旋的方式进行，而不是爬梯式，我认为**一个人能获取到的“最近的教材”和教学资源，对这个人来说就是最好的。**&lt;/p&gt;
&lt;p&gt;“最近的教材”是我提的一个概念，有两个含义：一是最新的，二是易获得的，三是和个人的学习习惯接近的。
新意味着教材有到好的口碑，作者原意对内容不断修订，保持常新；易获得并不是指对教材不加挑选，往往你就读大学的选书，是大学一代一代教授传下来的，有一定历史原因和取舍，是教授的人自己熟悉的，教学过程是成熟的。第三点，如何你拿到手的并不是一本该学科顶级概论教材，此时你需要根据个人学习能力和习惯，选择一本世界顶级教材作为补充。学习过程并非一蹴而就，而是循序渐进的，你可以把*排名靠前的教材*作为第二轮学习的补充读物。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h2&gt;选择学科概论教材&lt;/h2&gt;
&lt;p&gt;选择教材并不是一个十岁小孩能具备的经验和能力，所以在此，我需要额外补充一点选择计算机教材（或书籍）的思路：
* 教材有好有坏，要淘汰不好的教材；
* 教材没有最好，只有最适合；
* 好教材可能并不是一本书；&lt;/p&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h3&gt;去哪里找&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;选国内外名校使用的；&lt;/li&gt;
&lt;li&gt;按计算机专业全球排名来选；&lt;/li&gt;
&lt;li&gt;选优秀出版社的；&lt;/li&gt;
&lt;li&gt;按亚马逊排名来选；&lt;/li&gt;
&lt;li&gt;quora.com&lt;/li&gt;
&lt;li&gt;stackoverflow.com&lt;/li&gt;
&lt;li&gt;stackexchange.com&lt;/li&gt;
&lt;li&gt;zhihu.com&lt;/li&gt;
&lt;li&gt;google.com&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h3&gt;计算机科学概论有哪些经典教材&lt;/h3&gt;
&lt;p&gt;有最新版的情况下选最新版
* Computer Science An Overview - J. Glenn Brookshear
* Foundation of Computer Science - Behrouz Forouzan
* Computer Science Illuminated，Nell Dale &amp;amp; John Lewis&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-7"&gt;
&lt;h3&gt;计算机科学有哪些经典资源&lt;/h3&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;GitHub 或 Gitee 中有清华大学、中科大、浙江大学、华中科技大等教学资源。&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/ossu/computer-science"&gt;OSSU&lt;/a&gt; 是不错的资源，&lt;/li&gt;
&lt;li&gt;还有很多人会提到 &lt;a class="reference external" href="https://www.mooc.org/"&gt;MOOC&lt;/a&gt; 项目，国内很多大学也有参与，在学习资源的获取上，趋势是越来越开放，但获得高级教育的机会却会越来越昂贵。也许会像《大教堂和集市》的故事一样，开放性越高，影响力越大，越容易获得反馈和更快的迭代。但 &lt;a class="reference external" href="https://www.mooc.org/"&gt;MOOC&lt;/a&gt; 也有弊端，扁平不成体系、师生交互不够，课程迭代不快。&lt;/li&gt;
&lt;li&gt;很多教学视频在 Youtube 上都有，但和 B站都能找到，只是搜集起来需要花些时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-8"&gt;
&lt;h2&gt;大白话计算机科学&lt;/h2&gt;
&lt;p&gt;将计算机看作一种工具来理解，我们会讨论工具是在谁的脑子里想出来的，怎么造这个工具，造好后怎么用。
所以，计算机科学也讲了这三件事：如何有计算机（概念），怎么造计算机，怎么用计算机。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;如何有：讲了为什么图灵脑子里的机器可以表达并解决现实中的问题，以及冯·诺依曼如何造出这种机器；如何有是关于计算的理论，这里的计算是泛指处理任何信息，这方面懂的人少，可做的也不多，但这些需要这颗星球上最出色的头脑。人类历史上的伟大发明看起来都不是偶然的而是被安排好的，通过特定的人和机会送给人类的。&lt;/li&gt;
&lt;li&gt;怎么造：从最初提出计算机由五个“零件”组成，至今计算机上并没有本质的变化，且“零件”的改进机会被掌握在少数人手中，但幸好，无论怎么造出的计算机，在是否能解决问题和解决问题的步骤上都是等效的，只存在时间差异；怎么造是资源密集的事，最初进入的公司已从小孩变成了中年人和老人，五大零件运算、存储、控制、输入、输出都是充分竞争的领域，这些公司把常用的部分合在一起制造，这个过程叫做封装，合起来造出的东西叫芯片，由于这东西是大公司合作才能造出来的，在造芯片这事上愈强者愈强，形成了正反馈，将芯片越造越小，集成度越来越高，导致后面进入的公司像小孩子，如果中年人和老人不允许，它再也无法获得足够的技术资源来造出有市场竞争力的芯片了，因此这些硬件设计和制造技术的公司是未来几百年都是可世袭的资产。&lt;/li&gt;
&lt;li&gt;怎么用：通过算法和编程，对信息和数据进行获取、处理、交换和存储，从而将人脑中的概念和知识外化，让计算机为人类贡献它的智慧，所以在中文中，计算机又称为“电脑”。这剩下的怎么用才是大多数普通人可有所作为的领域。从造到用不能分割开看，只是大多数公司都没有办法决定怎么造，所以大多数都在怎么用上做文章。用的领域内从硬到软，最大的特点就是技术不断迭代。人通过输入输出设备使用计算机，从人到机器的交互又分为了很多层次，接近机这层的技术迭代慢，接近人这层的技术迭代快。这个层次很像一颗生根发芽枝繁叶茂的树，硬件就是土地，底层技术是根，中层技术是树枝，上层技术即接近人的那层是树叶。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在理解计算上，要记住两个理念：一，无论是土地，还是根枝叶，都是计算机系统，要无差别的对待，二，在考虑的叶的问题时，不需要知道枝的细节，只需要知道叶是从枝的哪里长出来，同理枝和根、根和土地的连接也一样。这两点偏向任何一点都是错误的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-9"&gt;
&lt;h2&gt;一点经验&lt;/h2&gt;
&lt;p&gt;在计算机的领域中，可信任那些既通理论且亲自完成某种软件的人，我简称之为真·计算机人。
比如`Donald Knuth`_，真·计算机人们无不想挑战他的《计算机程序设计艺术》。
在真·计算机人的征途中，除了学习计算机理论，还需将所学用于制造计算机或软件，在这个领域内，只有概念和第一性思维还不够，亲自实现软件也尤为重要。&lt;/p&gt;
&lt;p&gt;金庸老爷子《笑傲江湖》中，华山派武功分为“气宗”与“剑宗”，相较于计算机科学领域，从理论出发修炼计算机体系结构、算法接近气宗，直接学习编程语言接近剑宗。
此两条途径，虽起步不同，但殊途同归，不过是所有知识和实践体系的不同视角的重新排列组合。欲至山顶，均需跋涉，因此，千里之行，始于足下，
如果目标是山巅，教材的选择，内容的安排，在中场时，就不那么重要了，但十大景点总需一一拜访。&lt;/p&gt;
&lt;p&gt;咖啡馆聊系列，挖坑如下：&lt;/p&gt;
&lt;p&gt;计算机学科历史和计算理论（一）
计算机体系结构（二）
操作系统（三）
计算机网络（四）
数据的抽象、操作、存储（五）
算法（六）
程序设计语言（七）
软件工程（八）
数据库（九）
计算机图形学（十）
人工智能（十一）&lt;/p&gt;
&lt;/div&gt;
</content><category term="article"></category><category term="Computer Science"></category></entry><entry><title>番茄工作法官方特许番茄钟的设计瑕疵</title><link href="https://kaffa.im/design-flaws-on-official-pomodoro-clock.html" rel="alternate"></link><published>2020-12-03T12:00:00+08:00</published><updated>2020-12-03T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2020-12-03:/design-flaws-on-official-pomodoro-clock.html</id><summary type="html">&lt;p class="first last"&gt;大约是六年前接触过番茄工作法，后听讲过李翔老师 Workshop 中分享的番茄工作法。现在为尝试使用番茄工作法购买了官方特许番茄钟，这篇随笔的目的是简述番茄工作法，并记录这个小电子设备的设计上的瑕疵。本篇适合想了解番茄工作法的人，因为其中提及了一些基本概念，番茄工作法专家可跳过。&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;番茄工作法&lt;/h2&gt;
&lt;img alt="普通番茄钟" src="https://kaffa.im/static/img/2020/pomodoro-logo.png" /&gt;
&lt;p&gt;番茄工作法（英语：&lt;a class="reference external" href="https://francescocirillo.com/"&gt;Pomodoro Technique&lt;/a&gt;）是一种时间管理法，在 1980 年代由 Francesco Cirillo 创立。
该方法使用一个定时器来分割出一段工作时间（一般为 25 分钟）和一段休息时间（一般为 5 分钟）。
而这些时间段被称为 pomodoros，是意大利语单词 pomodoro 的复数形式，中文即番茄。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;番茄工作法的五个步骤&lt;/h2&gt;
&lt;img alt="番茄钟周期" src="https://kaffa.im/static/img/2020/one-pomodoro-cycle.jpg" /&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;选择你想完成的任务；&lt;/li&gt;
&lt;li&gt;设定番茄钟为 25 分钟；&lt;/li&gt;
&lt;li&gt;持续工作直至番茄钟提示；&lt;/li&gt;
&lt;li&gt;当番茄钟提示，记一个番茄；&lt;/li&gt;
&lt;li&gt;短暂休息 5 分钟；每积累 4 个番茄，可进行长时间休息（15-30分钟）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h2&gt;现实中的番茄钟&lt;/h2&gt;
&lt;p&gt;现实中的番茄钟有机械（以发条为动力）、电子（液晶与单片机）、软件（PC和移动设备）等不同形式，可根据个人喜好挑选。
机械钟和电子钟对比软件钟的优点是即开即用，且更具象化。当你开始一个“番茄”，你只需要拿出它，然后开始；
每一次旋转机械番茄钟直到倒计时归零，会有一种获得一个番茄的形式感，这是软件番茄钟完成时的震动或声音提示无法给予的。
但软件钟的优点是自动累计和统计，记录番茄数上更便利，因为可以更容易获得反馈。&lt;/p&gt;
&lt;p&gt;我在纯机械钟和纯软件钟之间选择了折衷方案——官方特许的一种电子钟（基于电池、彩色液晶屏和单片机）。
它可以很方便的开始、结束、暂停番茄，并且可以设置一个番茄的工作和休息时间，且能自动统计番茄数量，这些对我来说就足够了。&lt;/p&gt;
&lt;img alt="官方特许番茄钟" src="https://kaffa.im/static/img/2020/pomodoro-clock-2.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h2&gt;设计上存在的问题&lt;/h2&gt;
&lt;p&gt;在使用了一个月后，我简单记录一下设计上值得改进之处。&lt;/p&gt;
&lt;p&gt;1. 在用液晶显示时间时，通常是 &lt;tt class="docutils literal"&gt;08:01&lt;/tt&gt; 的形式，即 &lt;tt class="docutils literal"&gt;两位分钟数:两位秒钟数&lt;/tt&gt;，且分钟数和秒钟数大小一致。为将番茄数量显示在右上方的设计，会牺牲秒钟数的大小，
这样做会有两个缺点：一、秒钟数变小削弱了时间的流逝感；二、让用户在本不用思考的地方产生一次思维停顿，打破分钟数和秒钟数大小一致的设计常规并没未产生价值，只增加了一点微弱的 GEEK 感。&lt;/p&gt;
&lt;p&gt;2. 下方设计了四个按钮，分别是 &lt;tt class="docutils literal"&gt;番茄&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;工作&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;休息&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;小花&lt;/tt&gt;。不得不说这四个按键的设计存在很多问题，首先是图标的意义上 &lt;tt class="docutils literal"&gt;番茄&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;小花&lt;/tt&gt; 并不恰当，并没有和功能有直接的对应。
其次， &lt;tt class="docutils literal"&gt;工作&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;休息&lt;/tt&gt; 更多像一个状态显示，而不是功能切换，当工作结束，&lt;tt class="docutils literal"&gt;休息&lt;/tt&gt; 会自动亮起来，此时想跳过休息按 &lt;tt class="docutils literal"&gt;工作&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;小花&lt;/tt&gt; 并不能开始一个新番茄，而会显示一个 Err（错误），
正确的做法是按 &lt;tt class="docutils literal"&gt;番茄&lt;/tt&gt;，然后按 &lt;tt class="docutils literal"&gt;小花&lt;/tt&gt;。你感觉一下是不是很别扭。这里存在的问题是：一、按钮混淆了操作和状态，二、按钮图标的常规意义和功能不一致。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h2&gt;更好的设计&lt;/h2&gt;
&lt;p&gt;梳理用户的需求：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;功能需求：可以开始、停止番茄；可以终止番茄（非必须）；可以设置工作和休息时长；可统计番茄数，如果有内时钟，则可统计年、月、周、日的番茄数（非必须）。&lt;/li&gt;
&lt;li&gt;非功能需求：以最简的方式开始番茄，这点上 App 完败。假设番茄放在面前，机械钟只需要一次旋转，电子钟只需要一次点击（开机后），而App则需要先点击启动（至少2秒）再加至少一次点击。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;更好的设计：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;设置四个按钮：&lt;tt class="docutils literal"&gt;设置&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;工作&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;休息&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;开始/结束&lt;/tt&gt;。明确，清晰。&lt;/li&gt;
&lt;li&gt;去掉按钮的长按进入某种设置状态的潜规则，而采用按 &lt;tt class="docutils literal"&gt;设置&lt;/tt&gt; 键切换。&lt;/li&gt;
&lt;li&gt;按``设置``键后，&lt;tt class="docutils literal"&gt;工作&lt;/tt&gt;、 &lt;tt class="docutils literal"&gt;休息&lt;/tt&gt; 显示为 &lt;tt class="docutils literal"&gt;+&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;-&lt;/tt&gt; 或 &lt;tt class="docutils literal"&gt;&amp;lt;&lt;/tt&gt;、&lt;tt class="docutils literal"&gt;&amp;gt;&lt;/tt&gt;，此时进入一系列的设置，比如增减工作时长，增减休息时长，语言切换，震动或语音，重置番茄数等。&lt;/li&gt;
&lt;li&gt;增强数量统计功能，将统计从秒钟数的上方移到顶部，作为一整条，变成显示年月周日番茄数，可记录一年或多年的番茄数。&lt;/li&gt;
&lt;li&gt;将分钟数和秒钟数等大小显示。根据设计心理学的格式塔原则，倒计时的分针和秒针应为一个整体，而不是大小分割的。&lt;/li&gt;
&lt;li&gt;甚至可使用“奥卡姆剃刀”原则，将 &lt;tt class="docutils literal"&gt;工作&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;休息&lt;/tt&gt; 去掉，使用背景色来显示状态（绿色表示休息），利用按和长按（2秒以上）分别表示增加减少或左右切换。
这也是从儿时的电子表到今天的耳机播放键切换歌曲的默认模式，用户已被传统电子产品教育后习得了这些习惯，但这样做会牺牲掉一些毫无经验的用户，这就要看这类用户是否是番茄钟的使用者了。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="section-7"&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;期待这个番茄钟能有改进后的新版本推出，或者等我有空时，会实现 HTML5 的原型替代之（挖坑）。&lt;/p&gt;
&lt;p&gt;感谢阅读。&lt;/p&gt;
&lt;/div&gt;
</content><category term="article"></category><category term="番茄工作法"></category><category term="Pomodoro Technique"></category><category term="番茄钟"></category><category term="Pomodoro Clock"></category></entry><entry><title>20190814-P++ 的想法：常见问题（Zeev 于 2019-08-12 13：24 更新）</title><link href="https://kaffa.im/pplusplus-faq-updated-at-201908121324.html" rel="alternate"></link><published>2019-08-14T12:00:00+08:00</published><updated>2019-08-14T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2019-08-14:/pplusplus-faq-updated-at-201908121324.html</id><summary type="html">&lt;p class="first last"&gt;P++ 的想法: 常见问题（Zeev 于 2019/08/12 13:24 更新）本文是 Zeev 8 月 12 日更新后的版本。&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="p"&gt;
&lt;h2&gt;P++ 的想法: 常见问题&lt;/h2&gt;
&lt;p&gt;原文： &lt;a class="reference external" href="https://wiki.php.net/pplusplus/faq"&gt;https://wiki.php.net/pplusplus/faq&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;日期:  2019-08-09
作者: Zeev Suraski, &lt;a class="reference external" href="mailto:zeev&amp;#64;php.net"&gt;zeev&amp;#64;php.net&lt;/a&gt;
这是一份对在 internals&amp;#64;译注1 上提出的想法的常见问题澄清，它试图解决许多在随后讨论中被重复提出的问题。&lt;/p&gt;
&lt;p&gt;注：P++ 是一个临时代码命名，未来可能会变化。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;这到底是怎么回事？&lt;/h2&gt;
&lt;p&gt;试图将冗长的邮件内容浓缩为几点：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PHP 世界有两个大的阵营。第一个大约是喜欢 PHP 的动态性，带有强烈的 BC译注2 偏见，并特别强调简单性，另一个更喜欢减掉包袱，拥有更高级、更复杂功能的更严格的语言。&lt;/li&gt;
&lt;li&gt;这里没有“对”或“错”。这两种流派都有效，并具有非常坚定的追随者。然而，创建一种同时迎合这两个阵营的语言则是一项挑战，这也是 internals&amp;#64; 上争论的一贯的原因。&lt;/li&gt;
&lt;li&gt;该提议是创建一种新的 PHP 方言（代码名 P++），与 PHP 并存，但不受语言背后的历史哲学约束。换句话说，这种新方言本质上可能更加严格，它可能会更加大胆地消除向后兼容，并删除被认为是“包袱”的元素（例如短标签），并添加更复杂的特性，尤其是那些非常适合严格类型化的语言的，而无需为 PHP 方言引入相同的复杂性。&lt;/li&gt;
&lt;li&gt;这不是 PHP 代码分支。代码库将是同一个，在该代码库上工作的开发人员是相同的。绝大多数代码都是相同的。只有两种方言之间的特定差异点才会有不同的实现。它有点类似于 PHP 7 中的 strict_types 所做的，只是在更大的范围内。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;我们真需要做所有的那些事仅仅因为有些人不能放弃短标签吗？&lt;/h2&gt;
&lt;p&gt;这与短标签无关，“弃用短标签 RFC译注3 ”不是这个想法的主要动力。这个提案的目标是更有野心，它是为 PHP 提供一个清晰的愿景，并希望通过向两个阵营提供他们想要的东西来最终解决两方的紧张关系。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="php"&gt;
&lt;h2&gt;为什么要分叉 PHP？&lt;/h2&gt;
&lt;p&gt;这不是分叉。 代码库将完全相同，它将由相同的人开发版本。二进制文件将完全相同，如果你安装 PHP，你也将安装 P++，反之亦然。相同的二进制将运行 PHP，P++ 或组合 PHP/P++ 的应用程序。&lt;/p&gt;
&lt;p&gt;虽然目前还不清楚如何将一个文件“标记”为 P++ 文件，但它可能是文件顶部的某种特殊标记，例如:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;?p++?&amp;gt;
&amp;lt;?php 'Hello, world!'; ?&amp;gt;
&lt;/pre&gt;
&lt;p&gt;此外，我们可能会找到将整个命名空间标记为 P++ 的方法，因此，框架不必将每个单独的文件明确标记为 P++。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="internals"&gt;
&lt;h2&gt;这意味着我们的开发工作量增加了一倍，而 internals&amp;#64; 的贡献者已经很低了。 我们如何处理？&lt;/h2&gt;
&lt;p&gt;值得庆幸的是，这并不意味着是那样（工作量增加了一倍）。绝大多数代码将在 PHP 模式和 P++ 模式之间共享——包括源代码和运行时。&lt;/p&gt;
&lt;p&gt;无论运行的文件是 PHP 还是 P++文件，数据结构、关键子系统、扩展、Web服务器接口、OPcache 以及其他所有代码都将是完全相同的代码。唯一的额外开发开销会是 PHP 和 P++ 之间的差异部分。&lt;/p&gt;
&lt;p&gt;确实，这意味着我们必须维护某些代码片段的两个版本，并且我们在各个地方都会有一些 if() 语句，因为与 PHP 相比，P++ 可能会有额外的检查。 但是，如果我们要转向更严格的 PHP 版本，这些元素无论如何都必须引入。此外，即使是严格阵营中的人，也不建议我们在没有提供迁移途径的情况下转向未来严格版本——实际上，这种方法所涉及的努力和几乎任何其他的方法都是相似的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="php-8-9-php-7-4"&gt;
&lt;h2&gt;当我们转向更严格的 PHP 8/9 时， 为什么不只是开发一个永久维护的 PHP 7.4 长期维护版？&lt;/h2&gt;
&lt;p&gt;这种方法存在许多问题，但这些问题可能是最重要的问题：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;对于动态人群，更严格并不等于进步，因此他们不希望看到 PHP 的未来版本迫使他们朝这个方向发展。他们仍然希望获得其他类型的新功能（非严格性相关），更好的性能，错误修复，新扩展等。在新版本中让 PHP 更严格，对于许多用户而言，这种升级就他们的开发偏好意味着倒退。&lt;/li&gt;
&lt;li&gt;同样重要的是，从开发工作的角度来看，它非常困难，可以说是不切实际的。与此提案不同，旨在继续支持同一代码库中的两种方言，具有不再积极开发的版本，但仍需要在十多年的时间内保持安全性和关键错误修正，我们根本没有所需的资源（它可以说是一种分叉）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="php-p"&gt;
&lt;h2&gt;我需要在 PHP 和 P++ 之间做出选择吗？&lt;/h2&gt;
&lt;p&gt;是和不是。 如上所述，当你安装一个，你就有了另一个，所以就应用而言，你可以在一台服务器上运行这两种方言。 然而，实际上，项目和个人通常可能选择并标准化其中一个，类似于严格类型的情况。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="php-p-1"&gt;
&lt;h2&gt;我能在同一个应用程序中混合使用 PHP 和 P++ 吗？&lt;/h2&gt;
&lt;p&gt;是的。 虽然我们需要确定精确的机制，但代码是 PHP 还是 P++ 的指定将在文件级别，而不是在请求级别。 单个执行（请求）可以加载许多不同的文件，这些文件可以来自两种方言。PHP文件中的代码将表现为 PHP 语义——而来自 P++ 文件的代码将表现为 P++ 语义。 这也是，与 strict_types 类似。&lt;/p&gt;
&lt;p&gt;虽然这开始听起来可能听很尴尬，但可能会有非常实用的用例。例如，PHP 应用程序使用的只含 P++ 的框架，反之亦然。 对于那些熟悉 C 和 C++ 的人来说，这有点类似。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="php-p-php-p"&gt;
&lt;h2&gt;这是否意味着 PHP 将不再发展？ 所有新功能都会用于 P++ 吗？ 这是否意味着 PHP 将不再发展？ 所有新功能都会用于 P++ 吗？&lt;/h2&gt;
&lt;p&gt;不，这只是意味着它会以不同的方式发展。 严格性和类型相关的功能可能只适用于 P++，并且只能在 P++ 文件中使用。向后兼容偏差将保留在 PHP 中（这并不意味着向后兼容永不会被打破，只是每个这样的案例必须有良好的投资回报案例）。&lt;/p&gt;
&lt;p&gt;但是，与此无关的功能，例如引擎的性能改进（如 JIT ），扩展的开发，或新的异步相关的功能，PHP 和 P++ 都可以使用。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h2&gt;这个方法有什么好处？&lt;/h2&gt;
&lt;p&gt;这种方法有很多好处。 首先，它为 internals&amp;#64; 的两个阵营提供了一个很好的解决方案。 那些喜欢 PHP 动态特性的人可以保留它，而那些喜欢更严格类型语言的人也可以获得它，而不受任何 PHP 限制。 而替代方案是零和游戏，一个阵营的胜利是另一个的失败，反之亦然。&lt;/p&gt;
&lt;p&gt;除了设计一个好的技术解决方案（使我们能够以最少的努力支持整个受众）之外，还可以终结近年来 internals&amp;#64; 上争论的关键根源。&lt;/p&gt;
&lt;p&gt;最后，虽然本文档的大多数读者可能是技术人员，但应该注意的是，启动 P++ 将从一个新的基点译注4不计过去重新开始，可能具有巨大的定位和品牌优势。未使用 PHP 的公司、开发经理和个人开发者更有可能注意到 P++ 的推出，而不是 PHP 8.0 或 PHP 9.0 的推出。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h2&gt;我们不是冒着分裂用户群的风险吗？&lt;/h2&gt;
&lt;p&gt;在某种程度上，我们是。但这不是这一想法的缺陷， 而是现实已经存在的表现。&lt;/p&gt;
&lt;p&gt;如上所述，那里有很多人喜欢 PHP 的动态本质，并且谨慎地看待尝试使其越来越多地面向类型。&lt;/p&gt;
&lt;p&gt;与此同时，还有另外一群看着 PHP 的人，自己在想：“为什么它变得如此缓慢，以至于我最终要放弃这动态的废材译注5？”&lt;/p&gt;
&lt;p&gt;这里没有对或错。这两种观点都有效。当我们研究在这两个相互矛盾的观点之间架起桥梁的可能的解决方案时，没有太多可用的方案：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;坚持使用动态 PHP。这将不会被更严格语言的支持者所接受。&lt;/li&gt;
&lt;li&gt;向严格的 PHP 发展。动态语言的支持者不会接受这一点。&lt;/li&gt;
&lt;li&gt;分叉代码库。无论如何完成，都是所有参与者的净损失选项。 这样做没有技术优势，即使我们想要（我们不想要），我们也没有足够的贡献者去做。&lt;/li&gt;
&lt;li&gt;提出一些创意解决方案，以满足双方观众的需求。 这就是该提案试图做的。它在保持项目本身统一的同时，也确保两种方言之间的永久互操作性。这虽然会有一定程度的碎片化，但它仍然是满足每个人的主要需求的最小可能。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="nikita6"&gt;
&lt;h2&gt;这与 Nikita译注6版本的想法有何不同？&lt;/h2&gt;
&lt;p&gt;这两个想法之间有许多相似之处，但也存在一些实质性差异。 请注意，这是基于对版本方法的有限理解，因此部分可能缺乏，不准确或不正确。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;在这个提议中，有一个明确的目标是保持当前动态类型的 PHP，作为一个长期的，完全支持的，平等的对等方言。 发版本的方法将当前行为视为“遗留”。 这意味着它可能会被劝止（使用），然后在某些时候弃用和删除。&lt;/li&gt;
&lt;li&gt;推出策略完全不同。 P++ 提案旨在首先关注兼容性破坏元素，例如严格的操作、类型转换逻辑的更改、数组索引处理、需要变量声明等等，并且旨在在 P++ 的第一期提供它们。这样做的目的是允许新项目/框架重新开始，而不需知道在引入更多兼容性更改时，他们可能不得不在一两年内进行重大改写。 版本化提案似乎没有这样的目标，而是旨在逐步添加/更改 PHP 中的元素。&lt;/li&gt;
&lt;li&gt;与推出方式相关，版本化方法不允许只有两种方言，而是任何数量的方言。我们可能有 PHP 2020 方言，以及 PHP 2022 方言和 PHP 2027 方言。 如果我们全部保留它们，实际上这可能会增加我们的维护复杂性。&lt;/li&gt;
&lt;li&gt;该提议还提到了 PHP 与 P++（保守与积极）的不同打破向后兼容策略，而版本化方案可能根本不会涉及该主题。&lt;/li&gt;
&lt;li&gt;版本提案与此提案的定位/营销方面并不完全相同。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;重要的是，要注意这两个想法不一定是相互排斥的。 我们可以介绍 P++ 并使用版本进行改进，特别是当证明很难将所有重要的变化都放到 P++ 的第一期中。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h2&gt;有哪些挑战？&lt;/h2&gt;
&lt;p&gt;在我们能运行第一个 P++ 应用程序之前，不乏挑战。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;我们需要获得支持。这意味着，两派的人都需要放弃让 PHP 完全动态或完全类型化的梦想，而忽略那些与他们想法不同的人。这似乎是一个非常重大的挑战。&lt;/li&gt;
&lt;li&gt;为获得成功，P++ 第一个版本应该处理来自 PHP 的所有，或至少大多数兼容性破坏的更改，以便切换（可能相当痛苦）的开发人员不必在未来重新审核/彻底重构他们的代码。一些人表示担心，由于我们的开发人员能力有限，他们可能过于乐观，无法在一期发布。一旦我们对列表的内容有了更好的了解，我们就必须对此进行评估。 请注意，这并不意味着我们需要在第一个期中实现我们可能对 P++ 提出的所有想法，只是我们应该优先考虑会触发大量最终用户代码重写的元素，并尝试在我们的第一版之前处理它们。&lt;/li&gt;
&lt;li&gt;当然，最具挑战性的——我们需要为这种新方言找到一个合理的名字。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="hack7"&gt;
&lt;h2&gt;这又是个 Hack译注7，不是吗？ 为什么公平会更好呢？&lt;/h2&gt;
&lt;p&gt;虽然从概念上讲，P++ 和 Hack 的动机相似，两者之间至少有两个关键差异， 每个都可能足够大，足以改变预期的结果。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Hack 是由一家公司开发的，而不是志愿者开放的过程。 即使背后的供应商是巨大的，公司和个人通常也不愿意在这样的平台上实现标准化。译注8&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;也许更重要的是，Hack（和 HHVM）没有 PHP 巨大的分发迭代。&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;对于 Hack，对用户来说甚至只是来个尝试，也是一场艰苦的战斗，：&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;他们必须了解它的存在，并有足够的兴趣去更多地了解它。&lt;/li&gt;
&lt;li&gt;假设他们有足够的兴趣尝试它，他们不得不去经历麻烦地安装它，使用和他们平时习惯的 PHP 完全不同的方法（不同的布局，不同的配置，不同的一切）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;使用 P++，这是一个从头开始完全不同的故事：&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;PHP 的每个用户（从 8.0 开始，或每当我们提供它时）， 他们的服务器都会提供它。你不必安装任何东西，或者设置任何东西，它就会简单的在那里。&lt;/li&gt;
&lt;li&gt;这反过来意味着，几乎任何运行 Linux 发行版（WAMP 的最新版）的 MAMP 的最新版本的任何人，都将可以访问 P++，而无需主动执行任何操作。&lt;/li&gt;
&lt;li&gt;在意识方面，由于 P++ 将成为“ PHP 8 中新功能” 的重要组成部分，它将享受像 Hack 一样梦寐以求的免费营销，类似于 PHP 7 的性能飞跃（PHP 世界中很少有人不知道它）。&lt;/li&gt;
&lt;li&gt;当然，这并不意味着每个人都会想要开始用它，但是使用 P++ 进入的障碍比 Hack 要面对的要低许多数量级。&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h2&gt;一般关注什么？&lt;/h2&gt;
&lt;p&gt;Arnold Daniels 整理了一份有关这个建议的关注清单。&lt;/p&gt;
&lt;p&gt;其中一些回答如下：&lt;/p&gt;
&lt;div class="section" id="php-p-2"&gt;
&lt;h3&gt;将 PHP 代码转换为 P++ 代码并非易事&lt;/h3&gt;
&lt;p&gt;这可能是真的，但它最终取决于我们决定放什么内容到 P++。该提议假设我们想要做的事情的内容是相似的，无论我们是使用 declare()s 方案，版本化方案，还是统一的 P++ 方言提供它。这个提议的前提是，PHP 世界中有很多人想要改变 PHP，使其与现在的方式大不相同，使其变得越来越强大和静态类型。假设这不是坏事，只要不将它视为与那些想要保持 PHP 更加动态和弱类型的零和游戏。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="php-p-3"&gt;
&lt;h3&gt;PHP 工具不支持 P++&lt;/h3&gt;
&lt;p&gt;从技术上理解这一点非常重要，实际上，供应商支持 P++ 比支持粒度声明 declare()s 或无限数量的版本稍微简单一些。 没有理由认为它的处理方式与使用不同机制引入和提供类似功能/变更的方式不同。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="php-1"&gt;
&lt;h3&gt;在不破坏 PHP 兼容性的情况下进行清理是不可能的&lt;/h3&gt;
&lt;p&gt;这是事实，但这实际上是考虑引入这种新方言的一个很好的理由，而不是相反。许多严格的支持者也希望在打破兼容性方面取得更大的飞跃。今天，没有其他选择，除了与那些可能不喜欢破坏 BC 的人们的零和游戏（特别是如果它是为了使 PHP 更严格）。最近有很多这样的事例，似乎还有更多的事实存在于未来。&lt;/p&gt;
&lt;p&gt;关于 Andi 提出的具体例子：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;删除 array() 对 P++/PHP 的兼容性没有影响，它只是更现代的 [] 语法的语法盐。&lt;/li&gt;
&lt;li&gt;删除函数的全局命名空间（如果我们这样做）只会影响 P++ 代码（即删除它的访问权限），它仍然存在于 PHP 代码中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重要的是要强调，这些想法到目前为止都没有被讨论过，并且可能会或可能不会被提议用于将来包含在 P++ 中。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h3&gt;Python 的流行与类型无关&lt;/h3&gt;
&lt;p&gt;这份文件，以及一般的提案，并未声称强/静态类型是一个好主意或坏主意。故意不站边哪一方是“正确的”。它所做的是承认 PHP 用户有两种基本上相反的思想流派，并提供了一个关于项目如何发展以便以有效和高效的方式解决这两个问题的建议。也就是说，显然，有很多人认为强类型的 PHP 会是更好的选择，所以拥有这个选项可能确实会增加它的受欢迎程度。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-7"&gt;
&lt;h3&gt;真的需要一种不同的方言吗？&lt;/h3&gt;
&lt;p&gt;许多“严格”阵营似乎相信的公理之一，是更强的类型和更静态类型的语言意味着进步，而主要的问题是，我们如何能够实现它，我们可以在 PHP 8 中完成它，同时保持动态群体在传统的 7.4 版本上吗？ 我们是否应该通过每隔几年发布一次更改来逐步实现，直到我们达到我们想要的？ 对于那些人群，需要明确的是，对于那些喜欢动态，弱类型的语言的人来说，强类型和静态类型并不是进步，而且无论是在一夜之间还是在十年内发生都无关紧要。&lt;/p&gt;
&lt;p&gt;与此同时，许多其他专业人士更加务实，并希望简单地添加可选的严格性，与 strict_types 一致。 这可以说，可称之为进步，对于任何人来说都不是倒退，它确实为喜欢更强类型/静态类型语言的人提供了进步。这将可能是我们前进的方向，它意味着我们已经有了不同的方言。这真的是个问题，我们是否有 2^N 方言（granular declare()s），N 个方言（版本）或 两个（PHP/P++）。&lt;/p&gt;
&lt;p&gt;pplusplus/faq.txt · 最后修改: zeev 于 2019/08/12 13:24&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-8"&gt;
&lt;h2&gt;译注&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;internals&amp;#64;：PHP 内部开发人员邮件列表。这里涉及 PHP 的开发机制，当内部讨论成熟后，会公开在 externals，通常用来提交 RFC 和发布版本通知。&lt;/li&gt;
&lt;li&gt;BC：即 Backward Compatibility，向后兼容，也叫向下兼容，兼容过去的版本，即升级的软件要考虑旧版本的兼容性，比如，Office 2019 的 Word 默认使用 .docx 文件格式，但也可以打开 Office 2017/2013/2010，甚至是 2003 的 .doc 格式。相对的概念叫做 FC，即 Forward Compatibility，向前兼容，也叫向上兼容，即升级的软件会考虑对未来的兼容性。这在软件中通常为一个确定的接口和约定，未来依然遵循，即可实现向前兼容。&lt;/li&gt;
&lt;li&gt;RFC：即 Request for Comments，语言特性的加入，以及标准化变更管理的方法，通常加入新特性时，会为新特性提交 RFC 并给出例子，变更委员会评估通过后，语言会合入实现的源码，并入新版本。&lt;/li&gt;
&lt;li&gt;新的基点：a clean slate，美国习语，即不计过去新的开始。&lt;/li&gt;
&lt;li&gt;动态的废材： dynamic nonsense，这是一句抱怨，但期待读者提供更准确的翻译。&lt;/li&gt;
&lt;li&gt;Nikita：internals&amp;#64; 上的发言者，PHP 核心开发提议在小版本中加入特性。&lt;/li&gt;
&lt;li&gt;Hack：本意是乱砍，在计算机世界里的意义是，用不常规的方式解决问题，一般是技术大牛能做到的，MIT 精神。Hacker 黑客这个词即出自此意。&lt;/li&gt;
&lt;li&gt;作者此句供应商指的 Facebook&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（本文翻译保留了原文所有的格式，限于水平有限，如翻译中有不妥的地方请回复留言，如转载请注明出处：IT桃花岛）&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-9"&gt;
&lt;h2&gt;相关文章&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kaffa.im/php-zeev-resigned-originally-he-wanted-to-start-pplusplus.html"&gt;PHP 联席架构师辞职，原来他想做 P++&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kaffa.im/pplusplus-faq"&gt;P++ 的想法：常见问题（ 全文翻译 ）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感谢观阅，如果您觉得有用，可以扫我的赞赏码，鼓励一杯咖啡。&lt;/p&gt;
&lt;img alt="我的赞赏码" src="https://kaffa.im/static/img/reward.png" /&gt;
&lt;/div&gt;
</content><category term="article"></category><category term="P++"></category></entry><entry><title>PHP 联席架构师辞职，原来他想做 P++…</title><link href="https://kaffa.im/php-zeev-resigned-originally-he-wanted-to-start-pplusplus.html" rel="alternate"></link><published>2019-08-11T12:00:00+08:00</published><updated>2019-08-11T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2019-08-11:/php-zeev-resigned-originally-he-wanted-to-start-pplusplus.html</id><summary type="html">&lt;p class="first last"&gt;PHP 语言的创始人 Rasmus Lerdorf 生于 1968 年，今年已 51 岁，他在 1995 年以 Personal Home Page Tools 为名发布了 PHP 1.0。他的辉煌随着雅虎在搜索领域的颓败而黯淡。&lt;/p&gt;
</summary><content type="html">&lt;p&gt;1997 年，以色列程序员 Zeev Suraski 及 Andi Gutmans 加入了 Zend 公司 的 PHP 语言开发，发布了 PHP 3, PHP 4, PHP 5，注意没有 PHP 6，再到现在的 PHP 7。 1975 年出生的 Zeev Suraski 在 Zend 工作了 20 年。也许是在语言、架构和库的工作上找不到发展方向了。&lt;/p&gt;
&lt;div class="section" id="section-1"&gt;
&lt;h2&gt;题记&lt;/h2&gt;
&lt;p&gt;PHP 语言的创始人 Rasmus Lerdorf 生于 1968 年，今年已 51 岁，他在 1995 年以 Personal Home Page Tools 为名发布了 PHP 1.0。他的辉煌随着雅虎在搜索领域的颓败而黯淡。&lt;/p&gt;
&lt;p&gt;1997 年，以色列程序员 Zeev Suraski 及 Andi Gutmans 加入了 Zend 公司 的 PHP 语言开发，发布了 PHP 3, PHP 4, PHP 5，注意没有 PHP 6，再到现在的 PHP 7。 1975 年出生的 Zeev Suraski 在 Zend 工作了 20 年。也许是在语言、架构和库的工作上找不到发展方向了。&lt;/p&gt;
&lt;p&gt;前几天 Zeev Suraski 宣布从 Zend 离职，业界比较惊讶，PHP 7 优化的开发者鸟哥说是这是早已预定好的事。原来 Zeev Suraski 辞职，他想做 P++，那 P++ 是啥？他通过《&lt;a class="reference external" href="https://wiki.php.net/pplusplus/faq"&gt;P++ idea: FAQ&lt;/a&gt;》进行了回答，笔者作了全文翻译。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="php"&gt;
&lt;h2&gt;关于 PHP 语言动态静态的看法&lt;/h2&gt;
&lt;p&gt;笔者自 PHP 4.0 时开始使用，觉得 PHP 语言的动态性与 Web 应用细节经常发生变化的需求是绝配。在 PHP 最初的时代，语言哲学就是——不需要框架，因为 PHP 说——我就是框架。&lt;/p&gt;
&lt;p&gt;因此，某种程度上，我不太理解那些在 Web 应用开上把 PHP 和 Python 写成 Java 风味的程序员，数不清的类和依赖，冗长的命名空间、包名，类的深层次调用随处可见，各种不必要的自定义异常，繁重的框架。&lt;/p&gt;
&lt;p&gt;看着这样的代码，你会有一种想用水果刀把代码赘肉割掉的冲动，这样代码可以减少一半，运行速度和消耗也可大幅降低，可维护性提高。&lt;/p&gt;
&lt;p&gt;PHP 也让我想到 Python 最早的一批 Web 框架 Quixote，用中文形容就是“佛性 ” ，发布过三个版本，现在还用 1.x 的大有人在，因为在那个年代 Web 应用的痛点已经被框架妥善地解决，这点上，PHP 本身就完成的很好。Quixote 并不优雅，但能用。&lt;/p&gt;
&lt;p&gt;PHP 在新时代，受到 Go 和 Rust 的冲击，也借鉴了同类语言语法，加入了丰富的语言特性，逐步进化为一门花招较多、看起来更完善的动态语言。不可否认，它确实是在不断进化，于是也产生了 Laravel 这样搞定一切的框架，却不一定比 Django、Flask、ROR、Node.js 的方案更容易获得市场认可，因为 PHP 的动态性是优势，如果要静态类型检查，你 Rust 啊。&lt;/p&gt;
&lt;p&gt;在国内软件工程现状上，看似优雅的设计最后会成为绊脚石，优雅的框架只适合观赏，或给能理解优雅的程序员使用，而这类人在企业中往往凤毛麟角。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;静态检查的剖析&lt;/h2&gt;
&lt;p&gt;Talk is cheap，show me your code. 以下即为 PHP 7 中开启静态检查的方式，P++ 的提案，就是可以全局开启，并在更大范围内开启:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;?php declare(strict_types=1);

function sum(float $a, float $b) {
    return $a + $b;
}
echo sum(1, 1);
echo sum(1, '1');
&lt;/pre&gt;
&lt;p&gt;以上代码，如果第一行 strict_types=0 时，可以正常输出 22，而上述代码的执行会报错:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
2
( ! ) Fatal error: Uncaught TypeError: Argument 2 passed to sum() must be of the type float, string given, called in
test_strict_type.php on line 7 and defined in
test_strict_type.php on line 3
( ! ) TypeError: Argument 2 passed to sum() must be of the type float, string given, called in test_strict_type.php on line 7 in test_strict_type.php on line 3
Call Stack
#   Time    Memory  Function        Location
1   0.0005  409184  {main}( )       ...\test_strict_type.php:0
2   0.0006  409184  sum( )  ...\test_strict_type.php:7
&lt;/pre&gt;
&lt;p&gt;结论还是，语言特性对于了解语言特性的人有用。&lt;/p&gt;
&lt;p&gt;实践上，笔者对 P++ 提案持不完全支持态度，以有限的社区专注动态特性，可以做的还有更多。&lt;/p&gt;
&lt;p&gt;感谢阅读。&lt;/p&gt;
&lt;/div&gt;
</content><category term="article"></category><category term="PHP"></category><category term="P++"></category><category term="Zeev Suraski"></category><category term="Rasmus Lerdorf"></category></entry><entry><title>普通的逻辑学我们普通的聊</title><link href="https://kaffa.im/common-logic-common-talk.html" rel="alternate"></link><published>2019-05-18T12:00:00+08:00</published><updated>2019-05-18T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2019-05-18:/common-logic-common-talk.html</id><summary type="html">&lt;p&gt;本文试图在不长的篇幅中聊聊逻辑学和生活中的普通逻辑&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="逻辑" src="https://kaffa.im/static/img/2019/logic_child_512.png" title="逻辑"&gt;&lt;/p&gt;
&lt;h2&gt;引&lt;/h2&gt;
&lt;p&gt;无论主动或被动地，人们会观察、参与这个世界的活动，产生思考、形成概念，并通过语言交流观点时，逻辑都成为现代科学和现实世界基础的一半。为什么是一半后面会说。&lt;/p&gt;
&lt;p&gt;拿熟悉的理财投资和交易来说，投资者从主观决策到越来越频繁地讲求逻辑，说明投资者越来越需要委托方对标的品种选择和时机选择提供依据，也说明所需的投资依据更趋于基于客观事实。&lt;/p&gt;
&lt;p&gt;使用 kindle 有 5 年，购买了 8 本与逻辑相关的书，反映出个人对逻辑一直都有兴趣。回想起来，学习逻辑学有关理论有三次，一是中学阅读课外书牛津通识读本《简明逻辑学》，结果是除了看懂了片段，对整体依旧一头雾水；二是大学学习可计算性理论和数理逻辑；三是练习 GRE 写作，现在叫 Analytical Writing，其中对王强讲述的 Argument 常见的几十种逻辑错误。通过对《逻辑学十五讲》的阅读了解到逻辑学的范围和深度比普通人的理解要更宽更深。&lt;/p&gt;
&lt;p&gt;而生活中人们却较少调用逻辑工具来思考问题，理论联系实际成为了理论脱离生活，不经意间当了被收割的韭菜。其中，缺少逻辑常识，不基于事实进行情绪化决策是原因之一。情绪化主观判断是每个人擅长的，但有逻辑的理性决策不是。&lt;/p&gt;
&lt;h2&gt;普通的聊逻辑&lt;/h2&gt;
&lt;p&gt;下面，我将分十点递进地说清对普通人有用的这一半——逻辑常识，并期待读者基于观察事物来思考这个世界。&lt;/p&gt;
&lt;p&gt;一、&lt;strong&gt;逻辑是思考工具&lt;/strong&gt;，逻辑学的主题是清晰高效地思考。它是科学，是艺术，也是技能。逻辑学基本原理和人类的理性基本保持一致。&lt;/p&gt;
&lt;p&gt;二、几个基本概念：逻辑基于事物和事件，&lt;strong&gt;事物&lt;/strong&gt;是客观真实的，&lt;strong&gt;事件&lt;/strong&gt;由事物组成。确认事件的方法，是直接观察，或基于客观的、公开的、有官方发布的材料的间接推理。&lt;strong&gt;事实&lt;/strong&gt;可能客观，也可能是人的主观。事实可以通过前一句提到的一手材料确认。&lt;strong&gt;观念&lt;/strong&gt;是对客观事物的主观描摹，正确观念忠实地反映对象的客观秩序，错误观念是客观世界的歪曲表达。&lt;/p&gt;
&lt;p&gt;（齐泽克二又四分之三车站：人类依靠象征秩序、从语言演绎出的现实与真实客观世界之间总有一段差距。这两者之间的差距本身勾勒出我们的人性，因为人类是唯一生活在象征秩序之中的群体动物，人类进入象征秩序所留下的创伤内核就是人性的标志。这一创伤内核，也就是拉康所谓的真实。）&lt;/p&gt;
&lt;p&gt;三、事物存在的三种形式：&lt;strong&gt;客观、观念、语言&lt;/strong&gt;。我们无法获得客观，因为观察会扰动客观；其次，我们无法通过在人脑中插电线来解读人的观念，因此我们只剩下语言来研究。普通人最大的需求就是使用逻辑学工具识别陈述的真假（术语叫命题），即在现实中追求真实。这要求我们：选择合适的词语表达观念、陈述完整充分、区分主观和客观，避免装高深、避免模糊表达。&lt;/p&gt;
&lt;p&gt;四、逻辑学四大基本原理。这四个原理不证自明，也不能被证明。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;同一律&lt;/strong&gt;：事物智能是其本身&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;排中律&lt;/strong&gt;：非是即否&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;因果律&lt;/strong&gt;：事物不是其自身存在的原因。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;矛盾律&lt;/strong&gt;：同一时刻，某个事物不能即是A又是B&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里我们把排中律和充足理由律放在神的存在性问题上试一下：按因果律，神不是神存在的原因，再根据排中律，得到：神存在的原因是无神。&lt;/p&gt;
&lt;p&gt;五、直言命题和普遍命题。普遍命题分为&lt;strong&gt;全称命题&lt;/strong&gt;和&lt;strong&gt;特称命题&lt;/strong&gt;。直言命题即最有效的直接陈述。全称命题是 All，所有的全部这样的词语开头，特称命题是 Some，一部分一些某些这样的词开头。&lt;/p&gt;
&lt;p&gt;六、逻辑推理的形式是论证。论证是从前提到结论。命题包括主语和谓语，断言即主语和谓语的联接过程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单论证&lt;/strong&gt;：且（and）、或（or）、非（not）。我们用T表示真，F表示假。那么；T且F是F，T或F是T，非T是F，非F是T。什么意思呢？我们已知范冰冰是中国人且是个演员。如果有人说范冰冰是中国人但不是演员。我们会说错了。因为我们的逻辑识别出了：T and F is F。后面的也一样，所以说简单论证是大脑的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;条件论证&lt;/strong&gt;：如果A，那么B，或如果非B，那么非A。举栗子：如果气温上升到零度以上，那么冰会融化。如果冰没有融化，那么气温不是零度或以上。其实，我们说的很多条件论证都不严谨。比如，这里没有说冰是否在冰箱中。&lt;/p&gt;
&lt;p&gt;七、&lt;strong&gt;三段论&lt;/strong&gt;：这是重头戏。因为大家喜欢在此犯逻辑错误。&lt;/p&gt;
&lt;p&gt;逻辑学符号是：每一个 M 都是 P，每个 S 都是 M，所以每一个 S 都是 P
上述三个分句分别是：大前提、小前提、结论&lt;/p&gt;
&lt;p&gt;换成通俗符号讨论：&lt;/p&gt;
&lt;p&gt;三段论的论证结构是：所有 A -&amp;gt; B，所有 B -&amp;gt; C，那么：所有 A -&amp;gt; C
大前提是特称的结构：有些 A -&amp;gt; B，所有 B -&amp;gt; C，那么：有些 A -&amp;gt; C，正确
小前提是特称的反例：所有 A -&amp;gt; B，有些 B -&amp;gt; C，那么：有些 A -&amp;gt; C，错误。很明显A和C不相关。
小前提是特称的反例：有些 A -&amp;gt; B，有些 B -&amp;gt; C，那么：有些 A -&amp;gt; C，错误。因为，特称不具传递性。感受一下：有些住在深圳的人是深圳人，有些深圳人是不住在深圳的人，那么有些住在深圳的人是不住在深圳的人，违反了排中律。&lt;/p&gt;
&lt;p&gt;再来一个隐蔽的：王撕葱吃汉堡王，美国人吃汉堡王，那么王撕葱是美国人。这个也许明显是个错误，进一步，我们看娱乐新闻中，窦靖童在 KTV 包厢吸烟，没素质的人在 KTV 包厢吸烟，那么窦靖童没素质。这个就不一定了，因为大前提“窦靖童在 KTV 包厢吸烟”可能是特称 some 甚至是 once ，其次，小前提隐藏了“不是每个没素质的都在KTV包厢吸烟”和“没素质的每次都在KTV包厢吸烟”，根据特称不具传递性，这里的特称被刻意隐藏了，我们其实无法得出窦靖童和没素质的人之间的强关联性。&lt;/p&gt;
&lt;p&gt;上述两个例子都是如今为吸引流量的毫无逻辑的娱乐新闻和洗稿公号文中的提取，其中随意就能发现混乱的逻辑。&lt;/p&gt;
&lt;p&gt;八、演绎推理&lt;/p&gt;
&lt;p&gt;从思维方向上看，是指从一般性原理到个别性论断，或者是从一般性原理到另一个一般性原理的推理。例如：
（1）所有的植物都需要阳光，向日葵是植物。所以，向日葵需要阳光。
（2）如果谁想活得明白一点，谁就必须拥有足够的资讯；谁都想活得明白一点。
所以，谁都必须拥有足够的资讯。这里，（1）是从一般怎么样推出个别怎么样，（2）却是从一般怎么样推出一般怎么样。&lt;/p&gt;
&lt;p&gt;九、归纳推理&lt;/p&gt;
&lt;p&gt;归纳推理则是指从个别性例证到一般性原理的推理，或者是从个别性论断到另外的个别性论断的推理。&lt;/p&gt;
&lt;p&gt;我们学过的数学归纳法、概率论等，都是归纳逻辑。我们说“太阳明天依旧会从东方升起”就是归纳推理。我们通过观察每一日和后一日的现象发现这个规律。但有一天我们发现，“流浪地球计划”从备胎转正了。计划开始的第五年，太阳永远停在了地球的地平线上，归纳失效了。投资和交易中，大家叫这种失效为“黑天鹅“。&lt;/p&gt;
&lt;p&gt;相比罗素的火鸡，我更喜欢《三体》中的神枪手，秩序存在于我们能观察的秩序上，也是一种可能。我们以此归纳，再在我们的观测上验证，就变成了发现 10cm 弹孔的二维生物。当然，这里的不可知论是有悖逻辑学实用性的。&lt;/p&gt;
&lt;p&gt;另一个例子是交易K线中的均线：均线是在K线周期上历史报价的计算，人们均线来判断趋势，产生交易信号，但均线的本质就是归纳逻辑，因此一半会失效。因为还有另外一半，人的非理性，广义上说，均线是一种群体催眠。&lt;/p&gt;
&lt;p&gt;十、生活中的非逻辑现象应对&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;洗脑&lt;/strong&gt;：经常用于传销，一般通过否定原有认知和世界观，通过“催眠”的手段向受众灌输新观念，用以实现某些经济利益。生活中的洗脑特点是有批判性、强制性、持续性重复，放大恐惧胁迫，群体与外隔绝。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;心灵鸡汤&lt;/strong&gt;：好比咖啡因和强心剂，进入鸡汤扭曲力场的现实后，人会有一定行动的动力，积极作用是促进行动，副作用在于不客观的认知，不是真实，以此构建的结果缺少稳固的基础。导致，长期使用咖啡因，一旦停止会困的厉害，形成反噬力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;怀疑精神和阴谋论&lt;/strong&gt;：当具备研究能力，在某领域具备基础知识时，我主张探索而不迷信权威，有怀疑精神。但怀疑过当就会走向阴谋论，于人于己都没有好处。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不可知论&lt;/strong&gt;：不可知是保守的态度，日常大多数事情，这种态度不是出于严谨，而只是源于内心逃避。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;盲目乐观&lt;/strong&gt;：心理学研究表明，大多数人对自我的感觉都会比其他人好，而这显然不可能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;情绪不自知&lt;/strong&gt;：情绪联结记忆，促进分泌，影响思维和决策，情绪不自知做的决定会偏激。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不对事对人&lt;/strong&gt;：围绕事件探讨时，需要针对事件，而不是事件中的人。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;论证而不是争吵&lt;/strong&gt;：我们经常会看到吵得面红耳赤的人，但他们真的是围绕某个观点以事实为基础发表言论，而不是主观观念吗？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;否定前提&lt;/strong&gt;：比如，阿甘在跑步，那么他在移动。因为阿甘没有跑步，所以阿甘没动。否定前提，并不一定推导出否定结论。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;肯定结论&lt;/strong&gt;：还是上面的例子，如果阿甘在移动，那么阿甘在跑步。显然也不成立。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;中项特制&lt;/strong&gt;：形式是，A是B，C是B，那么A是C。举例最多是具备相关性而不是因果的推理，比如，长期吸烟会导致肺癌，康斯坦丁也患了肺癌，那么康斯坦丁也长期吸烟。其实是错的，因为长期吸烟也可能不患肺癌，康斯坦丁也可能有其他不良习惯导致肺癌。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;偷换概念&lt;/strong&gt;：坤坤是小偷，偷了女孩A的心，女孩A的钱包丢了，所以坤坤是小偷。此处语言上虽然都是一个词小偷，但概念偷换了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重复前提&lt;/strong&gt;：桌边的十三门徒共进了晚餐，犹大也在餐桌边，所以犹大也吃了晚餐。看似没毛病，但犹大吃了晚餐，是前提的表述，因为十三门徒中包括犹大。这就不是推理结论，是已知，等于没说。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;虚假假设&lt;/strong&gt;：将一套严密的推理过程建立在一个假设上得到一个看似完美的结论，当受众无法判断假设是否为真时，他们因为推理和结论讨好心中的预设，会趋向于相信假设是真。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;攻击稻草人&lt;/strong&gt;：辩论中揪着对手的容易攻击的小瑕疵不放，用以削弱对方的论证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;误用俗语&lt;/strong&gt;：传统是有适用范围的，有时候本身就是矛盾的。比如：俗话说好马不吃回头草，又说浪子回头金不换！ 说兔子不吃窝边草，又说近水楼台先得月。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;以牙还牙&lt;/strong&gt;：潜在的逻辑是：如果对方错了，那么自己错的不算错。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;集体决策&lt;/strong&gt;：当集体决策时，可能变成集体不决策。因此得到的结论反而没有用到集体智慧变得更差。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;迷信权威&lt;/strong&gt;：前文已谈到，不再冗述。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;强制量化&lt;/strong&gt;：很多美德无法量化，但被要求强制量化来衡量，比如眼泪多少钱一斤，善心面积有多大。不宜量化评估人类的真善美。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;等等，虽然只列举了20条，但生活中还会遇到譬如面对事实时打哈哈的人，但被指责时，使用无力反驳等词语，甚至以眼泪博取同情而获得情绪优势获得辩论优势的奇葩。这些都是非逻辑。&lt;/p&gt;
&lt;h2&gt;结&lt;/h2&gt;
&lt;p&gt;不知这篇小文是否我对逻辑的探索和观念说清了，我希望读者做个能驯服情绪和逻辑的好骑手，让两者协调为目标服务。剩下最后的建议就是：请把学到的逻辑用于求真。&lt;/p&gt;
&lt;p&gt;感谢阅读。&lt;/p&gt;</content><category term="article"></category><category term="逻辑学"></category><category term="Logic"></category></entry><entry><title>胸棘鲷、智人与尼安德特人</title><link href="https://kaffa.im/about-homo-sapiens-and-homo-neanderthals.html" rel="alternate"></link><published>2019-05-12T12:00:00+08:00</published><updated>2019-05-12T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2019-05-12:/about-homo-sapiens-and-homo-neanderthals.html</id><summary type="html">&lt;p&gt;记录关于智人的新认知&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="胸棘鲷" src="https://kaffa.im/static/img/2019/orange_roughy.png" title="胸棘鲷"&gt;&lt;/p&gt;
&lt;p&gt;胸棘鲷，&lt;a href="https://en.wikipedia.org/wiki/Orange_roughy"&gt;Orange Roughy&lt;/a&gt;，一种新西兰深海捕捞的大西洋鱼类。它们的寿命，根据同位素法测定，可能有 149 岁，根据耳石法测得为 125 - 160 岁区间。它们生前是鲜亮的砖红色，死后逐渐变黄。这种丑而呆的鱼生活在几百米到一千多米的深海，每平米可以发现 2.5 只，渔民从 1970 年最先开始捕捞，到目前为止，它们还剩下原数量的 10% 不到。如不是 WWF 呼吁控制商业捕捞，我们可以在短短的 50 年里使其灭绝。&lt;/p&gt;
&lt;p&gt;渔民捕捞胸棘鲷，销往世界各地，京东上叫它们——长寿鱼，宣传为：“它数量稀少，鱼肉内含有二十几种人体所需的微量元素、维生素，具有高蛋白、低脂肪、低胆固醇的特点，鱼头鱼骨内含有珍贵的‘脑黄金’，能激活脑细胞，增强记忆力，减缓衰老。头骨汤滋补肝肾，延年益寿。”这段宣传中的微量元素，更适合的摄入方式是多样性的食物，至于高蛋白、低脂肪、低胆固醇，是不是听起来很耳熟，是的，牛、羊、鸡肉都是，然后是脑黄金，史玉柱的一个同学的命名，即 DHA，相似的还有脑白金，即褪黑素。事实上，大西洋胸棘鲷这种存活多年的大型海洋鱼类，体内会含有大量汞元素，吃多可能会引起汞中毒。&lt;/p&gt;
&lt;p&gt;智人，其实就是我们对自己祖先的命名，智人在体质特征上和现代人无明显差异，能精制石器、骨器，懂绘画、雕刻术，能修建简单房屋，男女有明确分工。智，隐藏了侵占性，从走出非洲，智人用 5000 年灭亡了统治欧亚大陆 20 万年的身形更魁梧的尼安德特人（尼人）。&lt;/p&gt;
&lt;p&gt;在心理学课上，老师放映&lt;a href="https://www.bilibili.com/video/av1188416/"&gt;《智人 Homo sapiens 人类起源》&lt;/a&gt;，提到：智人与尼人的染色体条数不一致，因而存在生殖隔离。而今天读到一篇《“爱上”这群笨蛋的人类祖先，给现代人留下了一个遗传病大礼包》，虽然不喜欢这种标题党，但其中的数据还是呈现了一些&lt;a href="https://news.vanderbilt.edu/2016/02/11/neanderthal-dna-has-subtle-but-significant-impact-on-human-traits/"&gt;事实&lt;/a&gt;：现存人类中有 1% - 4% 的基因来自尼安德特人。另，通过对三位五万年前的尼安德特男人的牙菌斑测序，竟意外发现他们曾与智人亲吻过，而在所有的生物中，只有人类交配时亲吻，智人和尼人画面可以自行脑补，可能有些最萌身高差。&lt;/p&gt;
&lt;p&gt;研究还称，这些来自尼人的基因，和现代人的抑郁症、过敏、肥胖、色素沉淀、尼古丁上瘾、营养失衡、尿失禁、膀胱疼痛、尿道功能失常、以及红斑狼疮等自身免疫疾病有相关性。读到此不知有怎样的感想，智人灭亡了尼人，但尼人与智人斗争过程中，他们的基因却得到了延续。这些基因，及可能还有一些来自其他直立人的基因，存在于我们的遗传链上，在数万年的进程中，协助我们战胜荒蛮的自然而存活延续，并通过我们的 DNA 代代相传。&lt;/p&gt;
&lt;p&gt;因为学习认知心理学了解到这些古人类学素材，作为一个生物学和遗传学门外汉，也值得记录一篇，算更正了之前获得知识的错误。&lt;/p&gt;
&lt;p&gt;感谢阅读。&lt;/p&gt;</content><category term="article"></category><category term="胸棘鲷"></category><category term="Orange Roughy"></category><category term="长寿鱼"></category><category term="化石人类学"></category><category term="古人类学"></category><category term="智人"></category><category term="Homo sapiens"></category><category term="尼安德特人"></category><category term="Homo"></category><category term="Neanderthals"></category><category term="生殖隔离"></category><category term="基因测序"></category></entry><entry><title>关于计算机科学</title><link href="https://kaffa.im/about-computer-science.html" rel="alternate"></link><published>2019-04-24T12:00:00+08:00</published><updated>2019-04-24T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2019-04-24:/about-computer-science.html</id><summary type="html">&lt;p&gt;简单讲述计算机科学和工程科学的理解&lt;/p&gt;</summary><content type="html">&lt;p&gt;首先我想说说心理学。&lt;/p&gt;
&lt;p&gt;人们对世界好奇、追寻和探索，其间总会发现，许多疑问和障碍并不在外部，而在于内在。所以，德尔菲神庙上镌刻着阿波罗神谕“认识你自己”。人类对内在心灵、灵魂的探索最初来自于宗教、神学和哲学，那些认知的结论，在许多世纪之前，类似强力的光柱透过彩窗从不同角度射入黑暗将空间照亮，人们从不同面提出对这门学科的理解。&lt;/p&gt;
&lt;p&gt;直到冯特采用科学实验的方式进行心理研究才奠定现代意义的心理学基础，它研究人的心灵和行为的关系，其建构在科学实验和行为统计之上，现代前沿的是实验心理学和认知心理学。很多研究，比如对神经元和人类学习的研究，直接促成了模式匹配、机器统计学习和人工神经网络的发展。&lt;/p&gt;
&lt;p&gt;科学在高处相通，从学科的分层，心理学分为理论心理学和应用心理学，而计算机科学也可分为理论部分和应用部分。&lt;/p&gt;
&lt;p&gt;从理论部分说，计算机科学是通过理论计算机研究信息处理的科学，其实和实体计算机的关联并不大，它更偏向于数学、逻辑、计算理论和信息理论。&lt;/p&gt;
&lt;p&gt;由于计算科学和信息科学并不在大众常识范围内，所以大多数人的理解，学计算机科学毕业，大约应该是学会了装电脑用。:-(&lt;/p&gt;
&lt;p&gt;从应用层面说，计算机科学又包含，计算机工程学和商业计算机系统。前者是研究计算机硬件和集成固件，后者是信息系统。&lt;/p&gt;
&lt;p&gt;现代，数据、信息和计算如此重要，计算机应用几乎能和所有学科交叉、相互促进。&lt;/p&gt;
&lt;p&gt;现代计算机硬件和操作系统软件的出现是理论计算机和计算机工程学的完美配合，前者是说邱奇-图灵的图灵机和可计算性理论，后者是说冯·诺依曼和 ENIAC，第一台存储程序计算机模型的大型计算机。&lt;/p&gt;
&lt;p&gt;也许大多数人觉得计算机能计算处理信息不可思议，但除开电器层次和复杂性，在其本质上，依旧还是图灵的代表0和1的无限伸展的纸带和冯·诺依曼对理论计算机的工程实现。&lt;/p&gt;
&lt;p&gt;发展了 80 多年的计算科学，其实核心一成不变，是的，毫不令人惊讶，因为世界降生一位像图灵一样，有野心、有才华、还努力、还开挂的天才并不容易，只有这样的天才的头脑中，才会诞生理论计算机。&lt;/p&gt;
&lt;p&gt;为什么计算的核心一成不变，其实中国《易经》六十四卦即类似的算法表述——二分法（将在未来专写一篇），也是超越各种语言和思维的通用思维方式。&lt;/p&gt;
&lt;p&gt;这就是——易——宇宙的逻辑，无论事物表像多么的不同。&lt;/p&gt;
&lt;p&gt;此处，作个总结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;计算机科学：Computer Science，简称 CS&lt;/p&gt;
&lt;p&gt;所有有关计算机科学及子学科的总称，是系统性研究信息与计算的理论基础以及计算机系统实现与应用的技术学科。现代主要研究领域有：
* 人工智能
* 计算机体系结构
* 人机交互
* 软件工程
* 数据与数据库
* 多媒体（计算机图形学）
* 网络
* 信息安全
* 管理信息系统
* 生物信息
* 计算理论&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;电子工程：Electronic Engineering，简称 EE&lt;/p&gt;
&lt;p&gt;以电子学、电磁学等物理学分支为基础，涵盖电子学、电子计算机的工程学。主要的研究分支：
* 通信与网络
* 信号处理
* 电子学
* 集成电路
* 光电子与光学&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;软件工程学：Software Engineering，简称 SE&lt;/p&gt;
&lt;p&gt;研究如何以科学过程和方法去开发和维护软件的科学，以及如何把经过时间考验而证明正确的管理技术和当前能够得到的最佳实践结合起来的学科。是CS的分支领域，该方向因为开发软件和软件项目变得很热门，也是跟软件工程师最近的方向。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信息技术：Information Technology，简称 IT&lt;/p&gt;
&lt;p&gt;主要用上述学科知识应用到具体行业，开发、安装和实施信息系统及应用软件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;无论承不承认，上述四个方向其实是具有线性关系的。&lt;/p&gt;
&lt;p&gt;感谢阅读。&lt;/p&gt;</content><category term="article"></category><category term="计算机科学"></category><category term="Computer Science"></category></entry><entry><title>在终端或控制台显示文本二维码</title><link href="https://kaffa.im/text-qrcode-in-console-or-terminal.html" rel="alternate"></link><published>2018-07-27T12:00:00+08:00</published><updated>2023-11-02T22:40:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-07-27:/text-qrcode-in-console-or-terminal.html</id><summary type="html">&lt;p&gt;本文讲解如何在控制台或终端等文本界面下显示文本二维码&lt;/p&gt;</summary><content type="html">&lt;h2&gt;文本二维码&lt;/h2&gt;
&lt;p&gt;简单讲，二维码是一个算法，可以把信息编码为0和1，也就是视觉上的暗和明、黑和白、有和无。&lt;/p&gt;
&lt;p&gt;大多情况下，二维码用一个方形的图片表达，它可以方便地传递信息，或连接线上线下。&lt;/p&gt;
&lt;p&gt;但有时我们也有以文本形式展示二维码的需求，例如在终端或控制台程序中。&lt;/p&gt;
&lt;p&gt;下面即一个文本二维码&lt;/p&gt;
&lt;pre style="font-size: 14px; font-family: 'Lucida Console', Menlo; line-height: 14px;"&gt;
 ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
 █ ▄▄▄▄▄ █▀▄█▀ █▀ █▀█▄▀█ ▄▄▄▄▄ █
 █ █   █ █▄   ▄▀ ▀▄▄█▀▀█ █   █ █
 █ █▄▄▄█ █ ▀█▀█▄█▀   ▀▀█ █▄▄▄█ █
 █▄▄▄▄▄▄▄█ ▀▄█ █ ▀▄▀▄▀ █▄▄▄▄▄▄▄█
 █▄▄█▄▀▀▄▄▀█ ▀█▀ ▀ ▀█▄█▀ ▄▄▀▄▄▀█
 █ ▀▀▀▄▀▄ █▄▄██ ██ ▄ ▄▄  ▄ ▄  ██
 █▄ ▄███▄███▀▀ █▀▀█▄█  ▀▄██▄█▄▄█
 ██▄▄ ▄█▄ ▄▀██ ▀▀█ ▀▀▀▄ ▀██ ▄ ▄█
 █▄▀▀▄▄ ▄▄▄ ▀▄██▄█▄ ██▄▄▀▀█▀█▄▀█
 █▄█▄▀▀ ▄▀▄█▄▀██▀█▄▀▀█▄▄▄▄▀██  █
 █▄██▄▄▄▄█  ▀  ▄▀█ █▄▄ ▄▄▄ █ ▀▀█
 █ ▄▄▄▄▄ █▄█▄   █▀▀▄▀█ █▄█ ▀▀ ▀█
 █ █   █ █▀▄▄ █▀▄█▀▄█▀▄▄   ▀▀▀██
 █ █▄▄▄█ █▀ █ █▄▄█▀ █▀ ██▀▄▄▄▀▄█
 █▄▄▄▄▄▄▄█▄█▄█▄▄█▄█▄▄█▄▄█▄█▄█▄██
&lt;/pre&gt;

&lt;p&gt;通常它两行一列编码为一个半角字符，这个二维码的显示需要两个前提：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用等宽字体：比如：'Lucida Console', Menlo。&lt;/li&gt;
&lt;li&gt;使用明暗差别大的字符代表二维码的状态，比如：「█」。&lt;/li&gt;
&lt;li&gt;行高设置为一个字符高，以让整体显示为正方形。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然，能否扫描出结果，也取决于扫描设备，环境光线容差等因素。&lt;/p&gt;
&lt;div class="notification is-info is-light"&gt;
Windows Tips：如果终端控制台中出现文本二维码散乱情况，可调整控制台字体为等宽字体。
可复制二维码到记事本，字体选择为：Lucida Console 5号字，再进行全选，即可显示出可扫描的二维码。
&lt;/div&gt;</content><category term="article"></category><category term="Text QRCode"></category></entry><entry><title>三步解决所有编程领域问题</title><link href="https://kaffa.im/three-steps-problem-solving-solutions-to-all-programming-problems.html" rel="alternate"></link><published>2018-06-18T02:22:00+08:00</published><updated>2023-11-18T06:53:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-06-18:/three-steps-problem-solving-solutions-to-all-programming-problems.html</id><summary type="html">&lt;p class="first last"&gt;梳理编程领域问题的解决方法后，发现有效方法只需要三步。&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="section-2"&gt;
&lt;h2&gt;问题解决是否有通用方法？&lt;/h2&gt;
&lt;p&gt;当然，先看看几个典型。&lt;/p&gt;
&lt;div class="section" id="section-3"&gt;
&lt;h3&gt;一、解数学题&lt;/h3&gt;
&lt;p&gt;我们做过很多的数学题，证明、计算、应用题，我们解数学题时通常需要：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;先读懂题，了解已知条件与未知&lt;/li&gt;
&lt;li&gt;如果从已知条件加上解题经验就可以抵达答案&lt;ul&gt;
&lt;li&gt;是，即完成解题；&lt;/li&gt;
&lt;li&gt;否则，则需要引入新知识；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;验证是否解决&lt;ul&gt;
&lt;li&gt;如果未解决，则跳到第1步&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一图胜千言&lt;/p&gt;
&lt;object class="uml" data="https://kaffa.im/static/img/math-problem-solving-flowchart.svg" type="image/svg+xml"&gt;Math problem-solving&lt;/object&gt;
&lt;p&gt;从图上看解题家的能力在于读题能力和解题锦囊的大小，其中玄妙的一步在于「引入新知」。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-4"&gt;
&lt;h3&gt;二、造火箭&lt;/h3&gt;
&lt;p&gt;Musk 成功了领导了猎鹰运载和重载火箭的制造，如果解决造火箭这个问题具有通用方法，那么将领导者换作其它人，使用这个通用方法，是否可以制造一枚火箭呢？&lt;/p&gt;
&lt;p&gt;理论上也许可行，但实操上几乎没人相信。&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;这里的第一个问题是提问不清晰：&lt;/p&gt;
&lt;p&gt;制造一枚火箭这个问题很模糊，没有定义是模型，还是能飞上天的，还是能飞上火星的？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;如果假设是能上火星的，还存在人的问题：&lt;/p&gt;
&lt;p&gt;是一个人造，还是一个团队造？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;假设是由笔者带上专家团队，还有新问题：&lt;/p&gt;
&lt;p&gt;笔者是否具备管理团队的技能，会如何管理团队？&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;专家和其他团队成员、外界，与各利益方怎么沟通？&lt;/li&gt;
&lt;li&gt;风险怎么管理？问题怎么处理？&lt;/li&gt;
&lt;li&gt;进度、成本怎么控制？&lt;/li&gt;
&lt;li&gt;质量怎么控制？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些问题的答案指向——曼哈顿计划 &lt;a class="footnote-reference" href="#f1" id="footnote-reference-1"&gt;[1]&lt;/a&gt; 在上世纪40年代，运用了一套通用方法论，现名为「项目管理」知识体系，它为解决类似造火箭的武器工程问题提供了一个解决方案，曼哈顿计划也是常被公认的第一个全面应用项目管理理念和技术的大型项目。当然，除了项目管理方法论，如果曼哈顿计划是属于炼金活动，可能还需要向炼金炉中投入至少一个 Einstein 和一个 Oppenheimer 吧。&lt;/p&gt;
&lt;p&gt;『项目管理知识体系指南』（『PMBOK® 指南』）第六版中，定义的生命周期通常如下：&lt;/p&gt;
&lt;object class="uml" data="https://kaffa.im/static/img/project-management-lifecycle.svg" type="image/svg+xml"&gt;Project Management Lifecycle&lt;/object&gt;
&lt;p&gt;其中阶段间并没有明显的分割点，每个阶段又包含一些过程组：启动、规划、执行、监控、收尾。实际上是一些拆分的工作，这些工作又可以从10大知识领域去理解，即：整合、范围、进度、成本、质量、资源、沟通、风险、采购、相关方。&lt;/p&gt;
&lt;p&gt;所以，造火箭所需要的是有投资方、人和组织资源的方法论。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-5"&gt;
&lt;h3&gt;三、打仗&lt;/h3&gt;
&lt;p&gt;如何在一场战争中获胜，显然和解一道数学题、造一枚火箭所使用的方法不一样。打仗不仅使用武器，还需掌握信息，使用兵法，进行决策。&lt;/p&gt;
&lt;p&gt;「不战而屈人之兵」是战的最高境界，为达到这个境界，需要深入考察研究五个对象：道天地将法。简单地说：道是自然规律，天地是客观条件，将和法适配在项目上，就是项目管理方法论。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-6"&gt;
&lt;h3&gt;共性是什么？&lt;/h3&gt;
&lt;p&gt;看起来，从解数学题，到造火箭，再到打仗，复杂程度递增，这里想说的是三者之间的联系，如果将打仗比看作生物体，解数学题就是细胞，造火箭就是组织。打仗所需要的思路和能力，并不超出解数学题和造火箭。&lt;/p&gt;
&lt;p&gt;在不同复杂程度上的 Problem，都有解决方法论。对于 problem-solving，我能想到的最深刻的模式就是学习和理解本身，更可以说所有问题的解决会回归到一个字——懂。&lt;/p&gt;
&lt;p&gt;如果把最能解决问题的人定义为「懂王」，那么阻碍大家成为懂王的最大的障碍就是绝对难度。&lt;/p&gt;
&lt;p&gt;在解数学题的层面上，一个未知因素会导致绝对难度的产生，这个未知因素往往是带着一些「折叠的结构」，比如一种快速开平方的方法，一种求最大公约数的欧几里德算法(Euclidean algorithm)，这些翻译中通常有叫做 Method。&lt;/p&gt;
&lt;p&gt;在造火箭的层面上，基础科学的问题，人的能力的问题会成为绝对难度。&lt;/p&gt;
&lt;p&gt;在打仗的层面上，战略决策，优先级和最优解是绝对难度。&lt;/p&gt;
&lt;p&gt;但在这三个领域都有做得非常棒的人，这说明两点：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;在TA们的思维中建立了领域问题解决的通用方法；&lt;/li&gt;
&lt;li&gt;在TA们的经验中，有足够的「折叠的结构」以解决复杂度。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-7"&gt;
&lt;h2&gt;编程领域的问题解决是否有通用方法？&lt;/h2&gt;
&lt;p&gt;从抽象到具体，在编程领域的问题解决是否有通用方法？&lt;/p&gt;
&lt;p&gt;首先说我的结论，编程领域的问题难有通用解法，主要因为「编程领域」是一个经典概念。语言学中，经典概念属于人与人交流中的模糊地带，并没有明确的范围，很难说编程中遇到的某个问题是属于编程领域，还是非编程领域。所以，严格来说，编程领域的问题没有通解。&lt;/p&gt;
&lt;p&gt;其次，虽然没有通用解法，但存在有效方法。有效方法是指，一个问题采用一种方法后，可验证是否解决。所以，我们讨论的「编程领域」问题虽然没有通解，但可以采用经验去推演，或者在已知解空间去搜索。&lt;/p&gt;
&lt;div class="section" id="section-8"&gt;
&lt;h3&gt;为什么会有编程领域的难题？&lt;/h3&gt;
&lt;p&gt;现实世界很复杂，编程是世界的抽象和理想模型，理想和现实的差距存在于细节上，编程经常会遇到这些细节带来的鸿沟。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="section-9"&gt;
&lt;h3&gt;那有效方法是什么？&lt;/h3&gt;
&lt;p&gt;我的方法提炼就剩下三个字：懂、干、议&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;懂&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;如何衡量懂，窍门在于依赖自我认知，补全假设，然后提问。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;内求：可以自问，独立思考后推演后自答；&lt;/p&gt;
&lt;p&gt;参考书 &lt;a class="reference external" href="https://kaffa.im/the-art-of-thinking.html"&gt;『思考的艺术』&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一般来讲，大多数问题都是读的太少而想的太多带来的。我接触到的编程领域，从计算机系统结构，到网络，到编程语言，到软件工程，在时间允许的情况下，我总推荐独立阅读和思考的方式来解决。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;外求：可以通过寻找能解决的人群和社区，逐步搜索，然后提问，找到合适的人，追问。&lt;/p&gt;
&lt;p&gt;参考书 &lt;a class="reference external" href="https://kaffa.im/asking-the-right-questions-a-guide-to-critical-thinking.html"&gt;『学会提问』&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了解决一个具体问题，第一步是将问题定义清楚，第二步将问题复杂度降维，例如采用正交的方式分解。在决定向外部求助时，首选当然是浏览官方网站文档，毫无疑问，这是最新一手参考资料。如果再推荐一个有效而快速的解决，无疑是 &lt;a class="reference external" href="https://www.stackoverflow.com"&gt;StackOverFlow&lt;/a&gt; 和 &lt;a class="reference external" href="https://chat.openai.com/"&gt;ChatGPT&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;干&lt;/li&gt;
&lt;li&gt;议&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="section-10"&gt;
&lt;h3&gt;采用搜索解决问题的捷径是知识树&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;按平台和设备&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;桌面系统&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Windows：最佳效率桌面系统，更能打&lt;/li&gt;
&lt;li&gt;macOS：更有设计&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;GUN/Linux：建议玩 Debian 或 Ubuntu&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Debian：以服务稳定闻名&lt;/li&gt;
&lt;li&gt;Ubuntu：最流行易用&lt;/li&gt;
&lt;li&gt;openSUSE：界面好看&lt;/li&gt;
&lt;li&gt;Fedora：RHEL创新实验田&lt;/li&gt;
&lt;li&gt;CentOS：以前是一个靠谱的服务器版选择&lt;/li&gt;
&lt;li&gt;CentOS Stream：若有选择，可不选它&lt;/li&gt;
&lt;li&gt;Arch Linux：有品位的专家玩家爱用&lt;/li&gt;
&lt;li&gt;Gentoo：开局一堆码，功能全靠编&lt;/li&gt;
&lt;li&gt;Manjaro：不失为一个好选择&lt;/li&gt;
&lt;li&gt;Raspbian：极客爱玩&lt;/li&gt;
&lt;li&gt;Deepin：中文玩家适用&lt;/li&gt;
&lt;li&gt;中标麒麟：政府采购较多&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Unix&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;FreeBSD：玩BSD桌面首选&lt;/li&gt;
&lt;li&gt;OpenBSD：最安全的系统&lt;/li&gt;
&lt;li&gt;NetBSD：多CPU架构&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;Chrome OS：基于浏览器的计算环境&lt;/li&gt;
&lt;li&gt;Xfce：轻量级多媒体桌面&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;移动设备&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Android：移动设备半边天&lt;/li&gt;
&lt;li&gt;iOS：昂贵流畅的算力&lt;/li&gt;
&lt;li&gt;Windows Phone：输在放弃&lt;/li&gt;
&lt;li&gt;Firefox OS：低端机好用，已弃&lt;/li&gt;
&lt;li&gt;Sailfish/Meego：寄予厚望却错过时代&lt;/li&gt;
&lt;li&gt;Sybian/WinCE/PalmOS/NucleusOS：已是历史&lt;/li&gt;
&lt;li&gt;纯血鸿蒙：孕育中&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;穿戴设备&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;watchOS：目前最成功的手表OS&lt;/li&gt;
&lt;li&gt;Android Wear：没有机会用，也不打算用&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;平板设备&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;iPad：打破PC思维，基于场景的资讯、娱乐和媒体平台&lt;/li&gt;
&lt;li&gt;Android Tablet：生产力平板&lt;/li&gt;
&lt;li&gt;Kindle：读书人最好&lt;/li&gt;
&lt;li&gt;Windows RT：不能运行传统程序的 Windows 大家不买单&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;浏览器&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Trident：作古&lt;/li&gt;
&lt;li&gt;Webkit：将作古&lt;/li&gt;
&lt;li&gt;Gecko：作古&lt;/li&gt;
&lt;li&gt;Presto：有前景&lt;/li&gt;
&lt;li&gt;Servo：有前景&lt;/li&gt;
&lt;li&gt;Blink：有前景&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Web&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Java：对程序员友好的平台&lt;/li&gt;
&lt;li&gt;.Net：一种相对优秀的方案&lt;/li&gt;
&lt;li&gt;PHP：互联网内容基础，开源成品程序最多&lt;/li&gt;
&lt;li&gt;Python：并不快，但相伴金融、科学和 AI 友好&lt;/li&gt;
&lt;li&gt;Rust：未来的基础设施&lt;/li&gt;
&lt;li&gt;Go：介于 C 和 Rust 之间&lt;/li&gt;
&lt;li&gt;Ruby：爱用的人最爱用&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;按语言：&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;按类型模型&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;强类型&lt;/li&gt;
&lt;li&gt;弱类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;按范式&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;面向对象&lt;/li&gt;
&lt;li&gt;函数式&lt;/li&gt;
&lt;li&gt;过程式&lt;/li&gt;
&lt;li&gt;多范式&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;按交互&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;编译型&lt;/li&gt;
&lt;li&gt;解释型&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;按热度&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;不会不好意思打招呼系列&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;JavaScript / ECMAScript&lt;/li&gt;
&lt;li&gt;HTML / XML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;大公司都用系列&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;C/C++&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;创业公司都用系列&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;聪明系列&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;li&gt;Delphi&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;敏捷系列&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Ruby / RoR&lt;/li&gt;
&lt;li&gt;PHP / Laravel&lt;/li&gt;
&lt;li&gt;Python / Django&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;有钱景/有局限/不好用系列&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Rust&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;li&gt;Kotlin&lt;/li&gt;
&lt;li&gt;Swift&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;科研系列&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;F#&lt;/li&gt;
&lt;li&gt;R&lt;/li&gt;
&lt;li&gt;Matlab&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;极客系列&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last"&gt;
&lt;li&gt;Clojure&lt;/li&gt;
&lt;li&gt;Scala&lt;/li&gt;
&lt;li&gt;Perl&lt;/li&gt;
&lt;li&gt;Assembly&lt;/li&gt;
&lt;li&gt;Rust&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="section-11"&gt;
&lt;h3&gt;编程领域问题的根本难度&lt;/h3&gt;
&lt;p&gt;编程领域问题不仅仅只有分类，金字塔原理，分类是一种通用且重要的思维模式，解决问题最终依赖的是网状的知识图谱。从长远来看问题的解决最终依赖于自我的学习力，而决定编程领域问题的根本难度可能在于：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;语言障碍&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
语言学习本身不是短时间能解决的问题，所以如果当待解决的问题所依赖的知识与提问的人之间存在语言障碍，那么解决此问题将会面临一个较高难度。&lt;/blockquote&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;自我认知&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
有一本书叫做『提问的艺术』可以参考。从测试的角度上，一个好提问，需给回答的人创造一个条件，方便回答者重现或进入问题的场景，一个自我认知好的人容易提好问题。&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="section-12"&gt;
&lt;h2&gt;结论&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;计算理论是经证明的，编程领域属于应用领域，并不存在绝对难度的问题，只有对资源的权衡和妥协。&lt;/li&gt;
&lt;li&gt;编程领域问题最难的不在事，而在人。&lt;/li&gt;
&lt;li&gt;编程领域没有通用解法，只有相对有效的方法。&lt;/li&gt;
&lt;li&gt;如果三步能解决所有编程领域的问题那就是：一、懂；二、干；三、循环一和二直到完成。&lt;/li&gt;
&lt;/ol&gt;
&lt;img alt="望读有所获。" src="https://kaffa.im/static/img/reward.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="section-13"&gt;
&lt;h2&gt;脚注&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="f1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;曼哈顿计划：美国陆军部于1942年6月开始利用核裂变反应来研制原子弹的计划。&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="article"></category><category term="问题解决"></category><category term="problem-solving"></category></entry></feed>
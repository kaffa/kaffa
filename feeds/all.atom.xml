<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>kaFFa fORest</title><link href="https://kaffa.im/" rel="alternate"></link><link href="https://kaffa.im/feeds/all.atom.xml" rel="self"></link><id>https://kaffa.im/</id><updated>2018-08-06T12:00:00+08:00</updated><entry><title>关于 NW.js 与 Electron 的技术选择</title><link href="https://kaffa.im/nwjs-and-electron-how-to-choose.html" rel="alternate"></link><published>2018-08-06T12:00:00+08:00</published><updated>2018-08-06T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-08-06:/nwjs-and-electron-how-to-choose.html</id><summary type="html">&lt;p class="first last"&gt;本文顺便写上 NW.js 与 Electron 的技术选择和一些无关的文字&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;技术选择&lt;/h2&gt;
&lt;p&gt;这么多年，我很少写技术博文，通常记录的目的都是归于实用，即遇到一个问题，然后给予解决。原则是，不从问题作无止的延伸，但给予一个清晰的解答。之所以有此原则，是因实用主义，因生命有限，无法耗时在细节上，细节是熵递增，与生命的目的刚好相反。&lt;/p&gt;
&lt;p&gt;那么我们从怎样的方法论去讨论技术选择问题呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;NW.js 与 Electron&lt;/h2&gt;
&lt;p&gt;在两者的选择之间：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;从目前来看，选择 Electron&lt;/li&gt;
&lt;li&gt;从目前来看，根据场景，大多时候选择 Electron 即可，特殊情况，选择合适的即可。&lt;/li&gt;
&lt;li&gt;而 Electron 和 NW.js，当你充分了解它们时，它们有区别，又或则不能选其他？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于两种跨平台技术的选择，说完了？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;选择的法门&lt;/h2&gt;
&lt;p&gt;因人的思维本质，因那个创造者，那个“神”、“神性”、“中心”而具共性。“法门”的表述可能不同，但内核相似，主要是人的思维和意识相似共性。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;初遇技术选择的问题&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;儿时父母初教：“你记下，当人对你说‘你好’时，你就答一句‘你好’”，这叫，习得的问题解决方案。&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;反复遇到相同技术选择的问题&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;生活中，遇到很多人对你说“你好”，回答开始可能是“你好”，但后面也会根据具体情境给不同回答。&lt;/p&gt;
&lt;p&gt;例如，对陌生人回答“你是谁？”，对密友回答“你好个P，你脑子坏了！”，对客户答“你好你好你好！”&lt;/p&gt;
&lt;p&gt;你会发现，进入场景，戴上身份后，你好的回答并不只是你好，会根据不同而进行“恰当”回答了。&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;无数技术选择后，眼里不再有问题时&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你会发现一句淡定的回答“你好”，其实还是儿时那句“你好”，竟是所有“你好”的回答。&lt;/p&gt;
&lt;p&gt;你也许听过：&lt;/p&gt;
&lt;blockquote&gt;
第一重境界：昨夜西风凋碧树。独上高楼，望尽天涯路；
第二重境界：衣带渐宽终不悔，为伊消得人憔悴；
第三重境界：众里寻他千百度，蓦然回首，那人却在灯火阑珊处。&lt;/blockquote&gt;
&lt;p&gt;也许还听过：&lt;/p&gt;
&lt;blockquote&gt;
看山是山，看山不是山，看山还是山。&lt;/blockquote&gt;
&lt;p&gt;也许还听过：&lt;/p&gt;
&lt;blockquote&gt;
非有，非无，非有非无。&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;心理学&lt;/h2&gt;
&lt;p&gt;人会从各个视角对世界给予解释，其实是人的大脑生物机制本身决定的，动物脑以及灵性脑，感性与理性，象与骑象人的对话，你的骑象人总在回答（大多是解释）你的大象，而一旁的观察者很关键。&lt;/p&gt;
&lt;p&gt;此处，象即1，骑象人即2，观察者即3；象即问题的直接答案，骑象人即问题的周全答案，而观察者眼里并没有问和答，它归于沉默。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;其实已经说完了&lt;/h2&gt;
&lt;p&gt;四维生物，二不行，但三基本就够了。其实已经说完了。&lt;/p&gt;
&lt;p&gt;“人往往需要说很多话，然后才能归入潜默。” 是有此篇。&lt;/p&gt;
&lt;/div&gt;
</content><category term="technology"></category><category term="psychology"></category><category term="philosophy"></category><category term="nw.js"></category><category term="electron"></category></entry><entry><title>关于文本二维码这件小事</title><link href="https://kaffa.im/a-story-about-text-qrcode.html" rel="alternate"></link><published>2018-07-27T12:00:00+08:00</published><updated>2018-07-27T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-07-27:/a-story-about-text-qrcode.html</id><summary type="html">&lt;p class="first last"&gt;本文随意聊聊文本二维码&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;文本二维码&lt;/h2&gt;
&lt;p&gt;简单讲，二维码是一个算法，可以把信息编码为0和1，也就是白和黑，也就是常见的二维码。大多情况下，二维码用一个方形的图片表达，可以跨各种介质传播。&lt;/p&gt;
&lt;p&gt;但由于一个很特殊的软件，我们有将二维码从远程机器传递到本地文本终端的需求。因此，引出了文本二维码这个议题:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
█ ▄▄▄▄▄ █▀▄█▀ █▀ █▀█▄▀█ ▄▄▄▄▄ █
█ █   █ █▄   ▄▀ ▀▄▄█▀▀█ █   █ █
█ █▄▄▄█ █ ▀█▀█▄█▀   ▀▀█ █▄▄▄█ █
█▄▄▄▄▄▄▄█ ▀▄█ █ ▀▄▀▄▀ █▄▄▄▄▄▄▄█
█▄▄█▄▀▀▄▄▀█ ▀█▀ ▀ ▀█▄█▀ ▄▄▀▄▄▀█
█ ▀▀▀▄▀▄ █▄▄██ ██ ▄ ▄▄  ▄ ▄  ██
█▄ ▄███▄███▀▀ █▀▀█▄█  ▀▄██▄█▄▄█
██▄▄ ▄█▄ ▄▀██ ▀▀█ ▀▀▀▄ ▀██ ▄ ▄█
█▄▀▀▄▄ ▄▄▄ ▀▄██▄█▄ ██▄▄▀▀█▀█▄▀█
█▄█▄▀▀ ▄▀▄█▄▀██▀█▄▀▀█▄▄▄▄▀██  █
█▄██▄▄▄▄█  ▀  ▄▀█ █▄▄ ▄▄▄ █ ▀▀█
█ ▄▄▄▄▄ █▄█▄   █▀▀▄▀█ █▄█ ▀▀ ▀█
█ █   █ █▀▄▄ █▀▄█▀▄█▀▄▄   ▀▀▀██
█ █▄▄▄█ █▀ █ █▄▄█▀ █▀ ██▀▄▄▄▀▄█
█▄▄▄▄▄▄▄█▄█▄█▄▄█▄█▄▄█▄▄█▄█▄█▄██
&lt;/pre&gt;
&lt;p&gt;上述即一个文本二维码，通常两行一列编码为一个半角字符，这个二维码的显示需要两个前提：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;等宽字符，例如 Lucida Console&lt;/li&gt;
&lt;li&gt;行间距尽量小，让整体显示为正方形&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然，能否扫描出结果，也取决于扫描时的容差。&lt;/p&gt;
&lt;p&gt;在 Windows 平台，如果终端控制台中出现文本二维码散乱情况，请调整控制台字体为等宽字体，或者打开记事本，字体选择为：Lucida Console 5号字，再进行全选，即可显示出可扫描的二维码。&lt;/p&gt;
&lt;/div&gt;
</content><category term="technology"></category><category term="QRCode"></category></entry><entry><title>在 Windows 10 下安装 Wechaty</title><link href="https://kaffa.im/wechaty-installation-in-windows-10.html" rel="alternate"></link><published>2018-07-24T12:00:00+08:00</published><updated>2018-07-24T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-07-24:/wechaty-installation-in-windows-10.html</id><summary type="html">&lt;p class="first last"&gt;本文描述 Windows 下安装 Wechaty 的细节&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Chatie/wechaty"&gt;Wechaty&lt;/a&gt; 是一个对话机器人软件开发包，它可以帮你用 6 行 JavaScript 代码实现一个微信个人账号。由于使用 node 技术，它支持 Linux、Windows、macOS 平台和 Docker 容器。它的安装过程和其它 node 包类似，首先 &lt;tt class="docutils literal"&gt;git clone&lt;/tt&gt; 源代码，再使用 node 的 npm 命令 &lt;tt class="docutils literal"&gt;npm install &amp;amp; npm start&lt;/tt&gt; 实现开箱即用，同时官方也提供了入门案例：&lt;a class="reference external" href="https://github.com/Chatie/wechaty-getting-started"&gt;Wechaty getting started&lt;/a&gt;。而在国内，实际安装过程中可能会因某些软件依赖的原因遇到问题，本文记录了安装过程中可能会出现的错误及解决办法，下面描述详细的步骤和说明：&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;概念&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/Chatie/wechaty"&gt;Wechaty&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;项目地址&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/Chatie/wechaty-getting-started"&gt;Wechaty Getting Started&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Wechaty 起步&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://chatie.io/wechaty/"&gt;Wechaty Documents&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Wechaty 文档&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/Chatie/wechaty/wiki/Puppet"&gt;Puppet&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;一个包含了机器人对话逻辑的抽象类，是 Wechaty 技术架构的一部分。继承实现 Puppet 抽象类（协议）的组件，即可实现更广泛的与联系人、消息/一对一对话、群组/聊天室/多对多对话等相关逻辑。Puppet 的中文是木偶，用在这里相当传神。&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://www.npmjs.com/package/node-gyp"&gt;node-gyp&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;基于 gyp 编写的用来编译 node 本地扩展模块的 node 包，而 gpy 是 Chromium 项目上用于实现跨平台编译的工具。
安装文档：&lt;a class="reference external" href="https://github.com/nodejs/node-gyp#installation"&gt;https://github.com/nodejs/node-gyp#installation&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://www.npmjs.com/package/windows-build-tools"&gt;windows-build-tools&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;node 包装的 Windows 平台的编译工具
安装文档：&lt;a class="reference external" href="https://github.com/felixrieseberg/windows-build-tools"&gt;https://github.com/felixrieseberg/windows-build-tools&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://www.npmjs.com/package/node-expat"&gt;node-expat&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;基于 &lt;a class="reference external" href="https://libexpat.github.io/"&gt;libexpat&lt;/a&gt; 的用来处理 XML 的 node 包，libexpat 是一个号称最快的 XML 解析库，纯 C 语言编写。Wechaty 使用它解析基于 XML 的通讯。
安装文档：&lt;a class="reference external" href="https://www.npmjs.com/package/node-expat"&gt;https://www.npmjs.com/package/node-expat&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://www.python.org/downloads/"&gt;Python 2.7&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;一门愈久弥新的语言，node-gyp 的依赖 Python 2.7 实现跨平台编译&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/GoogleChrome/puppeteer"&gt;puppeteer&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;可编程的 Google Chrome， Google Chrome 团队官方出品。&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://www.chromium.org/"&gt;Chromium&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;puppeteer 依赖一个特定的 Chromium 版本，Chrome 就是 开源 Chromium + Google 开发的闭源的扩展包。&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;安装步骤&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;下载 Wechaty 源代码&lt;/li&gt;
&lt;li&gt;安装依赖，配置&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;`npm install &amp;amp; npm start`&lt;/tt&gt; 启动&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;详细步骤&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;下载 Wechaty 源代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先我们建立源代码目录，本文使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;D:\code&lt;/span&gt;&lt;/tt&gt;。如果你使用了其他目录，在后文中作相应的替换即可。
让我们从入门项目开始，运行以下命令下载，并进入项目目录:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git clone https://github.com/lijiarui/wechaty-getting-started.git
cd wechaty-getting-started
&lt;/pre&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;安装依赖&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先安装 &lt;strong&gt;node-v10.x.x&lt;/strong&gt;。在 Windows 下，推荐使用官方提供的安装包，截至本文最新 64 位系统安装包是：&lt;a class="reference external" href="https://nodejs.org/dist/v10.7.0/node-v10.7.0-x64.msi"&gt;https://nodejs.org/dist/v10.7.0/node-v10.7.0-x64.msi&lt;/a&gt;，如果网速不够，建议使用迅雷下载。&lt;/p&gt;
&lt;p&gt;除了 node-v10 ，Wechaty 也依赖其它软件，而由于众所周知的网络原因，安装它们并不会太顺利。&lt;/p&gt;
&lt;p&gt;此时，如果运行 &lt;tt class="docutils literal"&gt;npm install &amp;amp; npm start&lt;/tt&gt;，会报以下错误:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Microsoft Windows [版本 10.0.16299.492]
(c) 2017 Microsoft Corporation。保留所有权利。


D:\code&amp;gt;cd wechaty-getting-started

D:\code\wechaty-getting-started&amp;gt;npm install
npm notice created a lockfile as package-lock.json. You should commit this file.
added 134 packages from 94 contributors and audited 324 packages in 22.581s
found 0 vulnerabilities


D:\code\wechaty-getting-started&amp;gt;npm start

&amp;gt; wechaty-getting-started&amp;#64;0.1.0 start D:\code\wechaty-getting-started
&amp;gt; node examples/starter-bot.js

01:59:34 INFO Wechaty &amp;lt;default&amp;gt; start() v0.18.5 is starting...
01:59:34 INFO Wechaty initPuppet() using puppet: default
01:59:34 INFO PuppetConfig installPuppet(wechaty-puppet-puppeteer&amp;#64;^0.4.2) please wait ...
npm:
&amp;gt; node-expat&amp;#64;2.3.16 install D:\code\wechaty-getting-started\node_modules\wechaty\node_modules\node-expat
&amp;gt; node-gyp rebuild


npm:
D:\code\wechaty-getting-started\node_modules\wechaty\node_modules\node-expat&amp;gt;if not defined npm_config_node_gyp (node &amp;quot;D:\Program Files\nodejs\node_modules\npm\node_modules\npm-lifecycle\node-gyp-bin\\..\..\node_modules\node-gyp\bin\node-gyp.js&amp;quot; rebuild )  else (node &amp;quot;D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\bin\node-gyp.js&amp;quot; rebuild )

npm: gyp
npm:  ERR! configure error
gyp ERR! stack Error: Can't find Python executable &amp;quot;C:\Python36\python.EXE&amp;quot;, you can set the PYTHON env variable.
gyp ERR! stack     at PythonFinder.failNoPython (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:483:19)
gyp ERR! stack     at PythonFinder.&amp;lt;anonymous&amp;gt; (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:508:16)
gyp ERR! stack     at D:\Program Files\nodejs\node_modules\npm\node_modules\graceful-fs\polyfills.js:284:29
gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:158:21)
gyp ERR! System Windows_NT 10.0.16299

npm: gyp ERR! command &amp;quot;D:\\Program Files\\nodejs\\node.exe&amp;quot; &amp;quot;D:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js&amp;quot; &amp;quot;rebuild&amp;quot;
gyp ERR! cwd D:\code\wechaty-getting-started\node_modules\wechaty\node_modules\node-expat
gyp ERR! node -v v10.7.0
gyp ERR! node-gyp -v v3.6.2
gyp ERR! not ok

npm: npm WARN
npm:  wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of brolog&amp;#64;^1.6.5 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of file-box&amp;#64;^0.8.22 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of hot-import&amp;#64;^0.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of lru-cache&amp;#64;^4.1.3 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of qr-image&amp;#64;^3.2.0 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of promise-retry&amp;#64;^1.1.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rxjs&amp;#64;^6.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rx-queue&amp;#64;^0.4.26 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of state-switch&amp;#64;^0.6.2 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of watchdog&amp;#64;^0.8.10 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of wechaty-puppet&amp;#64;^0.6.4 but none is installed. You must install peer dependencies yourself.


npm: npm ERR!
npm:  code ELIFECYCLE
npm ERR! errno 1
npm ERR! node-expat&amp;#64;2.3.16 install: `node-gyp rebuild`
npm ERR! Exit status 1

npm: npm ERR!
npm ERR! Failed at the node-expat&amp;#64;2.3.16 install script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm:
npm
npm:  ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\username\AppData\Roaming\npm-cache\_logs\2018-07-22T17_59_53_633Z-debug.log

01:59:53 ERR PupptConfig puppetResolver(default) install fail: Command failed: npm install wechaty-puppet-puppeteer&amp;#64;^0.4.2
gyp ERR! configure error
gyp ERR! stack Error: Can't find Python executable &amp;quot;C:\Python36\python.EXE&amp;quot;, you can set the PYTHON env variable.
gyp ERR! stack     at PythonFinder.failNoPython (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:483:19)
gyp ERR! stack     at PythonFinder.&amp;lt;anonymous&amp;gt; (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:508:16)
gyp ERR! stack     at D:\Program Files\nodejs\node_modules\npm\node_modules\graceful-fs\polyfills.js:284:29
gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:158:21)
gyp ERR! System Windows_NT 10.0.16299
gyp ERR! command &amp;quot;D:\\Program Files\\nodejs\\node.exe&amp;quot; &amp;quot;D:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js&amp;quot; &amp;quot;rebuild&amp;quot;
gyp ERR! cwd D:\code\wechaty-getting-started\node_modules\wechaty\node_modules\node-expat
gyp ERR! node -v v10.7.0
gyp ERR! node-gyp -v v3.6.2
gyp ERR! not ok
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of brolog&amp;#64;^1.6.5 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of file-box&amp;#64;^0.8.22 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of hot-import&amp;#64;^0.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of lru-cache&amp;#64;^4.1.3 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of qr-image&amp;#64;^3.2.0 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of promise-retry&amp;#64;^1.1.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rxjs&amp;#64;^6.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rx-queue&amp;#64;^0.4.26 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of state-switch&amp;#64;^0.6.2 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of watchdog&amp;#64;^0.8.10 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of wechaty-puppet&amp;#64;^0.6.4 but none is installed. You must install peer dependencies yourself.

npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! node-expat&amp;#64;2.3.16 install: `node-gyp rebuild`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the node-expat&amp;#64;2.3.16 install script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\username\AppData\Roaming\npm-cache\_logs\2018-07-22T17_59_53_633Z-debug.log

{ Error: Command failed: npm install wechaty-puppet-puppeteer&amp;#64;^0.4.2
gyp ERR! configure error
gyp ERR! stack Error: Can't find Python executable &amp;quot;C:\Python36\python.EXE&amp;quot;, you can set the PYTHON env variable.
gyp ERR! stack     at PythonFinder.failNoPython (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:483:19)
gyp ERR! stack     at PythonFinder.&amp;lt;anonymous&amp;gt; (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:508:16)
gyp ERR! stack     at D:\Program Files\nodejs\node_modules\npm\node_modules\graceful-fs\polyfills.js:284:29
gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:158:21)
gyp ERR! System Windows_NT 10.0.16299
gyp ERR! command &amp;quot;D:\\Program Files\\nodejs\\node.exe&amp;quot; &amp;quot;D:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js&amp;quot; &amp;quot;rebuild&amp;quot;
gyp ERR! cwd D:\code\wechaty-getting-started\node_modules\wechaty\node_modules\node-expat
gyp ERR! node -v v10.7.0
gyp ERR! node-gyp -v v3.6.2
gyp ERR! not ok
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of brolog&amp;#64;^1.6.5 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of file-box&amp;#64;^0.8.22 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of hot-import&amp;#64;^0.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of lru-cache&amp;#64;^4.1.3 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of qr-image&amp;#64;^3.2.0 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of promise-retry&amp;#64;^1.1.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rxjs&amp;#64;^6.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rx-queue&amp;#64;^0.4.26 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of state-switch&amp;#64;^0.6.2 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of watchdog&amp;#64;^0.8.10 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of wechaty-puppet&amp;#64;^0.6.4 but none is installed. You must install peer dependencies yourself.

npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! node-expat&amp;#64;2.3.16 install: `node-gyp rebuild`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the node-expat&amp;#64;2.3.16 install script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\username\AppData\Roaming\npm-cache\_logs\2018-07-22T17_59_53_633Z-debug.log

    at ChildProcess.exithandler (child_process.js:291:12)
    at ChildProcess.emit (events.js:182:13)
    at ChildProcess.EventEmitter.emit (domain.js:442:20)
    at maybeClose (internal/child_process.js:961:16)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:248:5)
killed: false,
code: 1,
signal: null,
cmd: 'npm install wechaty-puppet-puppeteer&amp;#64;^0.4.2 ' }
01:59:53 ERR Wechaty start() exception: Command failed: npm install wechaty-puppet-puppeteer&amp;#64;^0.4.2
gyp ERR! configure error
gyp ERR! stack Error: Can't find Python executable &amp;quot;C:\Python36\python.EXE&amp;quot;, you can set the PYTHON env variable.
gyp ERR! stack     at PythonFinder.failNoPython (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:483:19)
gyp ERR! stack     at PythonFinder.&amp;lt;anonymous&amp;gt; (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:508:16)
gyp ERR! stack     at D:\Program Files\nodejs\node_modules\npm\node_modules\graceful-fs\polyfills.js:284:29
gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:158:21)
gyp ERR! System Windows_NT 10.0.16299
gyp ERR! command &amp;quot;D:\\Program Files\\nodejs\\node.exe&amp;quot; &amp;quot;D:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js&amp;quot; &amp;quot;rebuild&amp;quot;
gyp ERR! cwd D:\code\wechaty-getting-started\node_modules\wechaty\node_modules\node-expat
gyp ERR! node -v v10.7.0
gyp ERR! node-gyp -v v3.6.2
gyp ERR! not ok
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of brolog&amp;#64;^1.6.5 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of file-box&amp;#64;^0.8.22 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of hot-import&amp;#64;^0.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of lru-cache&amp;#64;^4.1.3 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of qr-image&amp;#64;^3.2.0 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of promise-retry&amp;#64;^1.1.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rxjs&amp;#64;^6.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rx-queue&amp;#64;^0.4.26 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of state-switch&amp;#64;^0.6.2 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of watchdog&amp;#64;^0.8.10 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of wechaty-puppet&amp;#64;^0.6.4 but none is installed. You must install peer dependencies yourself.

npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! node-expat&amp;#64;2.3.16 install: `node-gyp rebuild`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the node-expat&amp;#64;2.3.16 install script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\username\AppData\Roaming\npm-cache\_logs\2018-07-22T17_59_53_633Z-debug.log

{ Error: Command failed: npm install wechaty-puppet-puppeteer&amp;#64;^0.4.2
gyp ERR! configure error
gyp ERR! stack Error: Can't find Python executable &amp;quot;C:\Python36\python.EXE&amp;quot;, you can set the PYTHON env variable.
gyp ERR! stack     at PythonFinder.failNoPython (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:483:19)
gyp ERR! stack     at PythonFinder.&amp;lt;anonymous&amp;gt; (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:508:16)
gyp ERR! stack     at D:\Program Files\nodejs\node_modules\npm\node_modules\graceful-fs\polyfills.js:284:29
gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:158:21)
gyp ERR! System Windows_NT 10.0.16299
gyp ERR! command &amp;quot;D:\\Program Files\\nodejs\\node.exe&amp;quot; &amp;quot;D:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js&amp;quot; &amp;quot;rebuild&amp;quot;
gyp ERR! cwd D:\code\wechaty-getting-started\node_modules\wechaty\node_modules\node-expat
gyp ERR! node -v v10.7.0
gyp ERR! node-gyp -v v3.6.2
gyp ERR! not ok
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of brolog&amp;#64;^1.6.5 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of file-box&amp;#64;^0.8.22 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of hot-import&amp;#64;^0.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of lru-cache&amp;#64;^4.1.3 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of qr-image&amp;#64;^3.2.0 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of promise-retry&amp;#64;^1.1.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rxjs&amp;#64;^6.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rx-queue&amp;#64;^0.4.26 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of state-switch&amp;#64;^0.6.2 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of watchdog&amp;#64;^0.8.10 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of wechaty-puppet&amp;#64;^0.6.4 but none is installed. You must install peer dependencies yourself.

npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! node-expat&amp;#64;2.3.16 install: `node-gyp rebuild`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the node-expat&amp;#64;2.3.16 install script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\username\AppData\Roaming\npm-cache\_logs\2018-07-22T17_59_53_633Z-debug.log

    at ChildProcess.exithandler (child_process.js:291:12)
    at ChildProcess.emit (events.js:182:13)
    at ChildProcess.EventEmitter.emit (domain.js:442:20)
    at maybeClose (internal/child_process.js:961:16)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:248:5)
killed: false,
code: 1,
signal: null,
cmd: 'npm install wechaty-puppet-puppeteer&amp;#64;^0.4.2 ' }

D:\code\wechaty-getting-started&amp;gt;
&lt;/pre&gt;
&lt;p&gt;通过阅读上述日志，分析依赖关系如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
wechaty-puppet-puppeteer --&amp;gt; node-expat --&amp;gt; node-gyp --&amp;gt; gyp --&amp;gt; Python 2.7 &amp;amp; Windows Build Tools
&lt;/pre&gt;
&lt;p&gt;所以，接下来要做的就是一一从依赖的最底层安装&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;安装 &lt;a class="reference external" href="https://www.python.org/downloads/"&gt;Python 2.7&lt;/a&gt; 至 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Python27\python.exe&lt;/span&gt;&lt;/tt&gt;，设置环境变量 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;PYTHON=C:\Python27\python.exe&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意 node-gyp 并不支持 Python 3.x，如果你安装了 Python 3.x，错误日志如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Can't find Python executable &amp;quot;C:\Python36\python.EXE&amp;quot;, you can set the PYTHON env variable.
&lt;/pre&gt;
&lt;p&gt;你可能会疑惑这个本来存在的 Python 3 路径，个人认为这个不准确错误提示可以算入 npm 包的 Bug&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;安装 &lt;a class="reference external" href="https://www.npmjs.com/package/windows-build-tools"&gt;windows-build-tools&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考 windows-build-tools 官方文档，有以下两种方式:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
1.Visual C++ Build Tools
2.Visual Studio 2017 / Visual Studio 2015
&lt;/pre&gt;
&lt;p&gt;我这里由于已经安装 Visual Studio 2017 社区版，所以没有尝试其他选项。这里的关键是需要一个 VC++ 编译器来编译 Windows 本地程序。选项1在微软官方地址已失效，不容易找到，npm 官方推荐了安装 Visual Studio 2015。
安装结束后，可以使用 &lt;tt class="docutils literal"&gt;npm install &lt;span class="pre"&gt;node-expat&lt;/span&gt;&lt;/tt&gt; 验证上述安装配置是否成功&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;安装 &lt;a class="reference external" href="https://github.com/GoogleChrome/puppeteer"&gt;puppeteer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于网络原因，puppeteer 依赖的 &lt;a class="reference external" href="https://www.chromium.org/"&gt;Chromium&lt;/a&gt; 并不能顺利安装。此时，我们可以借助一个阿里巴巴公司提供的 &lt;a class="reference external" href="https://npm.taobao.org/"&gt;cnpm&lt;/a&gt; 特色工具安装:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
npm install -g cnpm --registry=https://registry.npm.taobao.org
cnpm install puppeteer
&lt;/pre&gt;
&lt;p&gt;如果你遇到 &lt;tt class="docutils literal"&gt;Chromium revision is not downloaded.&lt;/tt&gt; 时，在解决办法中看到的设置 PUPPETEER_SKIP_CHROMIUM_DOWNLOAD 其实是一个误导，
这个选项并不能帮助你安装 puppeteer，而是让你在更新时不必每次都下载 Chromium 二进制。&lt;/p&gt;
&lt;p&gt;PS: 这里还有一个手动安装办法，但不推荐：可以手动下载 chromium 安装包，放在 /node_modules/puppeteer/.local-chromium/ 下，例如:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
D:\code\wechaty-getting-started\node_modules\_puppeteer&amp;#64;1.6.0&amp;#64;puppeteer\.local-chromium\win64-571375
&lt;/pre&gt;
&lt;p&gt;这个地址在 macOS 上如下，其中的数字可能不同:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
~/node_modules/puppeteer/.local-chromium/mac-526987/chrome-mac
&lt;/pre&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;.NET Framework 4.5.1 [仅 Windows Vista / 7 需要]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果 Windows Vista / 7 版本，则需要手动安装 .Net Framework&lt;/p&gt;
&lt;ol class="arabic" start="5"&gt;
&lt;li&gt;&lt;p class="first"&gt;如果使用的是 PadChat 组件的 Wechaty，且已有相应 token 则还需要设置以下几个环境变量:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
WECHATY_LOG=silly
WECHATY_PUPPET=padchat
WECHATY_PUPPET_PADCHAT_TOKEN=*YOUR-TOKEN*
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;至此，应该可以顺利运行起步项目:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
npm install &amp;amp; npm start
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;运行后，程序会在控制台窗口打开一个文本的二维码，在二维码下方是该二维码的网址。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你对扫描控制台的文本二维码遇到问题，可以参考我的 &lt;a class="reference external" href="https://kaffa.im/a-story-about-text-qrcode.html"&gt;一篇关于二维码的博文&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;由于已成功启动项目，所以我并没有在 Windows 7 系统 或 32 位机上进行配置，主要问题应该差不多。
解决办法基本上一一查阅上述出现错误的软件的文档，应该可以独立解决。&lt;/p&gt;
&lt;p&gt;当然，如果你遇到了任何其他问题，也欢迎 &lt;a class="reference external" href="https://github.com/kaffa"&gt;我的Github&lt;/a&gt; 上联系我。&lt;/p&gt;
&lt;/div&gt;
</content><category term="technology"></category><category term="wechaty"></category><category term="node"></category><category term="open source"></category></entry><entry><title>用 VSCode 预览 reStructureText 文件</title><link href="https://kaffa.im/preview-restructuretext-file-in-vscode.html" rel="alternate"></link><published>2018-07-18T12:30:00+08:00</published><updated>2018-07-18T12:30:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-07-18:/preview-restructuretext-file-in-vscode.html</id><summary type="html">&lt;p class="first last"&gt;本文描述用 VSCode 预览 reStructureText 文件的配置办法&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;通识&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;得益于拥抱开源，微软 VSCode 成为了最热门的 IDE，广泛用于各种场景的编程，比如编辑 reStructureText 文件。&lt;/li&gt;
&lt;li&gt;reStructureText 是 Python 官方文档的格式，属于 Sphinx 项目的一部分，Sphinx 是 Python 文档生成器。&lt;/li&gt;
&lt;li&gt;从 reStructureText 的文件格式 rst，方便转化为各种文件格式。&lt;/li&gt;
&lt;li&gt;MS Code 自带 reStructureText 插件，类似于 Markdown，安装后可以用于预览 rst 格式。&lt;/li&gt;
&lt;li&gt;可安装后并不能直接预览，还需要配置一番，于是就有了下面的部分&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;依据 reStructureText 文档，先 pip 安装 doc8 和 sphinx&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;再上 MSCode 配置:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
// Points to the doc8 exectuable.
&amp;quot;restructuredtext.linter.executablePath&amp;quot;: &amp;quot;doc8&amp;quot;,
// Extra arguments to doc8.
&amp;quot;restructuredtext.linter.extraArgs&amp;quot;: [&amp;quot;--max-line-length 1024&amp;quot;],
// The full path of sphinx-build utility. This is an absolute path, and you can use ${workspaceRoot} to represent workspace root folder.
&amp;quot;restructuredtext.sphinxBuildPath&amp;quot;: &amp;quot;sphinx-build&amp;quot;,
// Flag to control whether text changed event triggers preview update.
&amp;quot;restructuredtext.updateOnTextChanged&amp;quot;: &amp;quot;true&amp;quot;,
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;在项目根目录下运行:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sphinx-quickstart
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一路回车下去，即生成了如下文件:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
_build
_static
_templates
conf.py
index.rst
make.bat
Makefile
&lt;/pre&gt;
&lt;p&gt;此时可以通过 Ctrl+Shift+R 来预览了&lt;/p&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;最后提供一份快速参考 &lt;a class="reference external" href="http://www.pythondoc.com/sphinx/rest.html"&gt;sphinx-rest&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="technology"></category><category term="VSCode"></category><category term="reStructureText"></category></entry><entry><title>Windows 下安装 Wechaty 的注意点(keng)</title><link href="https://kaffa.im/install-wechaty-on-windows.html" rel="alternate"></link><published>2018-07-17T12:00:00+08:00</published><updated>2018-07-17T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-07-17:/install-wechaty-on-windows.html</id><summary type="html">&lt;p class="first last"&gt;本文描述 Windows 下安装 Wechaty 的注意点(keng)&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;摘要&lt;/h2&gt;
&lt;p&gt;本文对于在 Windows 下安装 &lt;a class="reference external" href="https://github.com/Chatie/wechaty"&gt;Wechaty&lt;/a&gt; 的坑作个临时记录，但其中涉及的处理方式随着项目的升级或依赖软件的升级可能会变得不再需要。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;说明&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;升级到 Node 10&lt;/dt&gt;
&lt;dd&gt;与 node 有关的问题，那可能是因为 node 没有升级到 10 以上的版本，解决办法是在 nodejs.org 官方下载 10 以上的新版本。&lt;/dd&gt;
&lt;dt&gt;安装 Python 2.7&lt;/dt&gt;
&lt;dd&gt;因为 node-gyp 依赖 Python 2.7 和 windows-build-tools，node 在安装中多采用源代码编译安装，这种的好处是跨平台。
安装好 Python 2.7 以后，需要设置环境变量
PYTHON=c:\Python27\python.exe&lt;/dd&gt;
&lt;dt&gt;文本二维码&lt;/dt&gt;
&lt;dd&gt;QR 在移动世界盛行，但 Windows 依然缺少官方提供的文本二维码方案，控制台的文本二维码支持的不好，启动二维码以后，也许格式错乱无法扫描，此时可以复制张贴到记事本中，采用合适的等宽字体进行 &lt;strong&gt;反选&lt;/strong&gt; 扫描登录。&lt;/dd&gt;
&lt;dt&gt;puppeteer&lt;/dt&gt;
&lt;dd&gt;puppeteer 是 Google Chrome？&lt;/dd&gt;
&lt;dt&gt;ts-node&lt;/dt&gt;
&lt;dd&gt;如果采用 TypeScript 版本的 Wechaty，那么 ts-node 的路径在 wechaty\node_modules\.bin\ts-node 下。&lt;/dd&gt;
&lt;dt&gt;docker Wechaty&lt;/dt&gt;
&lt;dd&gt;如果使用 docker 版本的 Wechaty，那么需要升级 Windows 到 Proffesional 版。&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;吐槽&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;一般生产推荐使用 LTS 版本的 node ，可能很多人都不会安装 node 最新版，所以此处算是一坑，官方虽有提示，但不够醒目；&lt;/li&gt;
&lt;li&gt;已经 2018 年了，大部分库都用 six 支持了 Python 2 和 3 版本，很多人都转到 Python 3.6+，对于安装时出现 Python 相关的错误时，可能不会想到是 node-gyp 依赖 Python 2.7 的原因。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="technology"></category><category term="wechaty"></category><category term="node"></category></entry><entry><title>升级 CentOS Linux Kernel</title><link href="https://kaffa.im/update-centos-linux-kernel.html" rel="alternate"></link><published>2018-07-06T13:00:00+08:00</published><updated>2018-07-06T13:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-07-06:/update-centos-linux-kernel.html</id><summary type="html">&lt;p class="first last"&gt;本文描述升级 CentOS Linux Kernel 的方法&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;升级 CentOS Linux Kernel 的方法&lt;/h2&gt;
&lt;p&gt;升级命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
yum clean all
yum update
&lt;/pre&gt;
&lt;p&gt;查看 Kernel 版本命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cat /etc/redhat-release
&lt;/pre&gt;
&lt;p&gt;升级前:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CentOS Linux release 7.4.1708 (Core)
&lt;/pre&gt;
&lt;p&gt;升级后:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CentOS Linux release 7.5.1804 (Core)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;升级 CentOS Linux Kernel 后要做的事&lt;/h2&gt;
&lt;p&gt;升级完成后，我的开机菜单变成了:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CentOS Linux (3.10.0-862.6.3.e17.x86_64) 7 (Core)
CentOS Linux (3.10.0-693.21.1.e17.x86_64) 7 (Core)
CentOS Linux (3.10.0-693.e17.x86_64) 7 (Core)
CentOS Linux (0-rescue-4a8a974112aw410ea531fd24c60220bf) 7 (Core)
&lt;/pre&gt;
&lt;p&gt;可以看到多出了一个选项外，依然包括旧版本 Kernel，少数几个也不妨碍什么，只是多占用一点硬盘空间。&lt;/p&gt;
&lt;p&gt;如果想清理，可以先查看待删除的内核，命令如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rpm -qa | grep kernel
&lt;/pre&gt;
&lt;p&gt;再删除旧版本的内核包:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
yum autoremove kernel-.el7.x86_64
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;闲话几句&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Linux &lt;a class="reference external" href="https://www.kernel.org/"&gt;Kernel&lt;/a&gt; 即操作系统核心软件。有数据表示50%+的互联网服务器是 Linux，加上移动时代的 Android 占据半壁江山。可以这么说，&lt;em&gt;一半以上大部分计算设备内都运行了一份 Linux 核心&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;论贡献，豪不夸张，这个由神级人物 Linus Torvalds 领导开发了27年的软件，是现代文明的重度的坚实依赖，它是实用者的胜利，也是 Linus Torvalds 价值观的成功检验；&lt;/li&gt;
&lt;li&gt;Linux 的历史和文化值得慢慢了解、品位和思考，但现在大多情况下，云端机器 Linux 内核都是 3.x 版本，是不用升级的，除非你知道为什么要升级，或者你认为升级内核不重启机器的能力确实很酷；&lt;/li&gt;
&lt;li&gt;在国内，除非天时地利人和，研究 Linux Kernel 并没什么太多商业价值，只是领域情怀或“我乐意”；&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.elrepo.org"&gt;https://www.elrepo.org&lt;/a&gt; 和 &lt;a class="reference external" href="https://kernelnewbies.org"&gt;https://kernelnewbies.org&lt;/a&gt; 可能对你有用。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="technology"></category><category term="CentOS"></category><category term="Linux Kernel"></category></entry><entry><title>在 Linux 上安装 VSCode 遇到的问题和解决思路</title><link href="https://kaffa.im/install-vscode-on-linux-error.html" rel="alternate"></link><published>2018-07-05T12:30:00+08:00</published><updated>2018-07-05T12:30:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-07-05:/install-vscode-on-linux-error.html</id><summary type="html">&lt;p class="first last"&gt;本文描述在 Linux 上安装 VSCode 遇到的问题和解决思路&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;为什么在 Linux 上安装 VSCode？&lt;/h2&gt;
&lt;p&gt;近期计划使用搭建 telegram bot，了解原理后，发现是基本的 http 开发。&lt;/p&gt;
&lt;p&gt;计划使用轻量级 Web 框架，就项目需求来说，选择 Python 微框架 或 Go 语言比较适宜，加上前不久了解到类似 &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; 的框架 &lt;a class="reference external" href="https://vibora.io/"&gt;Vibora&lt;/a&gt;，其官方介绍中的性能基准测试结果惊人难以置信，于是选择尝试，饶有兴致运行官方 hello world&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;vibora&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Vibora&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vibora&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;却发现无法在 Windows 下运行，提示:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Traceback (most recent call last):
File &amp;quot;test_vibora.py&amp;quot;, line 1, in &amp;lt;module&amp;gt;
    from vibora import Vibora, JsonResponse
File &amp;quot;C:\Python36\lib\site-packages\vibora\__init__.py&amp;quot;, line 7, in &amp;lt;module&amp;gt;
    from .server import *
File &amp;quot;C:\Python36\lib\site-packages\vibora\server.py&amp;quot;, line 5, in &amp;lt;module&amp;gt;
    from signal import pause
ImportError: cannot import name 'pause'
&lt;/pre&gt;
&lt;p&gt;查看源代码，是因为 vibora 使用了 Linux signal 的原因，看来，虽然其文档中称支持 Windows 是其目标，但目前还不支持。&lt;/p&gt;
&lt;p&gt;由于服务器是 CentOS，于是选择在本地虚机装上桌面，直接采用 VSCode 或 PyCharm 进行开发调试。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;遇到的问题&lt;/h2&gt;
&lt;p&gt;按照微软官方 &lt;cite&gt;VSCode 的 Linux 安装帮助&lt;/cite&gt;，本应该四个命令就可以搞定:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
sudo sh -c 'echo -e &amp;quot;[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc&amp;quot; &amp;gt; /etc/yum.repos.d/vscode.repo'
yum check-update
sudo yum install code
&lt;/pre&gt;
&lt;p&gt;可是在执行最后一个命令时，出现了一系列的 404 错误，安装终止了，提示:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Error downloading packages:  libXScrnSaver-1.2.2-6.1.el7.x86_64
&lt;/pre&gt;
&lt;p&gt;看样子是因为VSCode所依赖的某个软件包，提示资源不存在，yum 命令没能下载成功。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;解决思路&lt;/h2&gt;
&lt;p&gt;笼统的说，之前写过一篇 &lt;a class="reference external" href="http://kaffa.im/the-effective-way-to-find-answers-to-programming-questions.html"&gt;解决编程领域难题的有效方法&lt;/a&gt;，提到 StackOverflow，但此问题并不能很直接搜索到解决思路，所以只能自己思考。&lt;/p&gt;
&lt;p&gt;按照 yum 的提示去对应 &lt;a class="reference external" href="http://mirror.centos.org/centos-7/"&gt;CentOS 7&lt;/a&gt; 目录才发现，原来是 &lt;a class="reference external" href="http://mirror.centos.org/centos-7/7.5.1804/"&gt;CentOS 7.5.1804&lt;/a&gt; 到 Main Line 版本了。&lt;/p&gt;
&lt;p&gt;于是这个包依赖问题可以从 &lt;a class="reference external" href="http://mirror.centos.org/centos-7/7.4.1708/readme"&gt;CentOS 7.4.1708 readme&lt;/a&gt; 得到解答，即 &lt;a class="reference external" href="https://kaffa.im/update-centos-linux-kernel/"&gt;升级 CentOS 7.4 到 CentOS 7.5&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;升级完成后，再次运行 &lt;tt class="docutils literal"&gt;sudo yum install code&lt;/tt&gt;，即成功。&lt;/p&gt;
&lt;/div&gt;
</content><category term="technology"></category><category term="CentOS"></category><category term="VSCode"></category></entry><entry><title>数据与信息的描述与差别</title><link href="https://kaffa.im/data-vs-information.html" rel="alternate"></link><published>2018-06-28T10:55:00+08:00</published><updated>2018-06-28T10:55:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-06-28:/data-vs-information.html</id><summary type="html">&lt;p class="first last"&gt;本文描述数据和信息两个概念的差别&lt;/p&gt;
</summary><content type="html">&lt;p&gt;编写文档时，大家常把 &lt;strong&gt;数据&lt;/strong&gt; 和 &lt;strong&gt;信息&lt;/strong&gt; 两个词混用，如管理信息系统（Management Information System）、数据导入（Data Import）等，可见，日常大家并不太在意两者的区别。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;描述&lt;/h2&gt;
&lt;p&gt;数据是原始的、未经组织的、待处理的客观事实，数据在组织前，可能是简单的、看起来随机的和无用的，当把数据处理、组织或在上下文中呈现而变得有用后，数据就成为信息。&lt;/p&gt;
&lt;p&gt;举个例子，每隔 1 小时记录某地点的气温，可以得到 24 个数据，而连续记录很多天后计算这个地点的平均气温，或将这些数据画在一张分布图上用来做什么时，就可称之为信息。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;起源&lt;/h2&gt;
&lt;p&gt;“数据”这个词来源于拉丁语 datum 的单数形式, 最初表示“已知数”，最早被用于 17 世纪，后来 &amp;quot;数据&amp;quot; 变迁为 datum 的复数形式。&lt;/p&gt;
&lt;p&gt;“信息” 是一个更老的词汇，最早可以追溯到 14 世纪的法国和英国中部，通常指 “通知行为” 本身, 经常用在教育和知识领域。&lt;/p&gt;
&lt;p&gt;在语言的发展中，可能有一些约定的说法，比如“大数据时代”、“信息大爆炸”，从这些词也可以大概分出，由原始的数据可以组织出更可观的信息。&lt;/p&gt;
&lt;p&gt;数据和信息是讨论很多问题时的基础，因此有此篇。&lt;/p&gt;
&lt;/div&gt;
</content><category term="technology"></category></entry><entry><title>Windows 下使用 VSCode 编辑 *.rst 文件的错误提示</title><link href="https://kaffa.im/vscode-restructuredtext.html" rel="alternate"></link><published>2018-06-20T02:52:00+08:00</published><updated>2018-06-20T02:52:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-06-20:/vscode-restructuredtext.html</id><summary type="html">&lt;p class="first last"&gt;本文提供消除 Windows 下使用 VSCode 编辑 *.rst 文件的错误提示的方法&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;问题出现的场景&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;使用 VSCode 编辑 *.rst 文件时，会提示安装 doc8 ，于是使用 pip 安装 doc8，执行:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install doc8
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;重新打开文件，全文会出现两条警告 D002 和 D004，如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'D002 Trailing whitespace'
'D004 Found literal carriage return'
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;D002 信息按字面意思是行尾有空格，稍作思考，感觉可能和 Windows 的换行符 CRLF 有关，
于是点击 VSCode 状态栏，修改 &lt;tt class="docutils literal"&gt;CRLF&lt;/tt&gt; 为 &lt;tt class="docutils literal"&gt;LF&lt;/tt&gt;，之后错误提示消失。请参考：&lt;a class="reference external" href="https://github.com/vscode-restructuredtext/vscode-restructuredtext/issues/84"&gt;issues-84&lt;/a&gt;&lt;/p&gt;
&lt;ol class="arabic" start="3"&gt;
&lt;li&gt;&lt;p class="first"&gt;又产生新的警告 D001，如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'D001 Line Too Long'
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 &lt;a class="reference external" href="https://github.com/vscode-restructuredtext/vscode-restructuredtext/issues/83"&gt;issues-83&lt;/a&gt; 中给的解决方法是，在 VSCode 的用户配置中提供一个更大的行宽度值。
于是 &lt;tt class="docutils literal"&gt;Ctrl + P&lt;/tt&gt;，选择 &lt;tt class="docutils literal"&gt;Preferences: Open Settings&lt;/tt&gt;，在 &lt;tt class="docutils literal"&gt;User Settings&lt;/tt&gt; 标签页，
也就是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Users\username\AppData\Roaming\Code\User\settings.json&lt;/span&gt;&lt;/tt&gt; 文件加入如下配置:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;restructuredtext.linter.extraArgs&amp;quot;: [
    &amp;quot;--max-line-length 80&amp;quot;
]
&lt;/pre&gt;
&lt;p&gt;我的理解是，这个最大行宽在 *.rst 文件中不建议设置太大，大约每行最多 80 个字符就差不多了，
这个和可维护性代码的最佳实践是一致的。&lt;/p&gt;
&lt;/div&gt;
</content><category term="technology"></category></entry><entry><title>为 GitHub Pages 站点添加独立域名</title><link href="https://kaffa.im/custom-domain-of-github-pages-site.html" rel="alternate"></link><published>2018-06-19T17:17:00+08:00</published><updated>2018-06-19T17:17:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-06-19:/custom-domain-of-github-pages-site.html</id><summary type="html">&lt;p class="first last"&gt;本文记录为 GitHub Pages 站点添加独立域名的步骤和遇到的问题&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;添加独立域名的步骤&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;注册一个域名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选择你喜欢的域名商注册一个域名。
例如，我注册的是 kaffa.im&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;域名解析&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在域名配置中添加一条 CNAME 记录。
例如，将 kaffa.im 指向 kaffa.github.io，此时，访问 kaffa.im 会得到 Github 反馈的 404 错误页面&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;添加 CNAME 文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 Github 仓库 master 的根目录下添加一个名称为 &lt;strong&gt;CNAME&lt;/strong&gt; 的文件，文件内容为你注册的域名。
例如，在 kaffa.github.io 仓库 master 的根目录新建一个 &lt;a class="reference external" href="https://github.com/kaffa/kaffa.github.io/blob/master/CNAME"&gt;CNAME&lt;/a&gt; 文件，文件内容为 kaffa.im，刷新刚才的 404 页面即打开了原先的 kaffa.github.io 站点&lt;/p&gt;
&lt;/div&gt;
</content><category term="technology"></category></entry><entry><title>解决编程领域难题的有效方法</title><link href="https://kaffa.im/the-effective-way-to-find-answers-to-programming-questions.html" rel="alternate"></link><published>2018-06-18T02:22:00+08:00</published><updated>2018-06-18T02:22:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-06-18:/the-effective-way-to-find-answers-to-programming-questions.html</id><summary type="html">&lt;p&gt;解决编程领域难题的有效方法是推演和搜索&lt;/p&gt;</summary><content type="html">&lt;h2&gt;为什么会有编程领域的难题？&lt;/h2&gt;
&lt;p&gt;现实世界很复杂，编程是世界的抽象和理想模型，理想和现实的差距存在于细节上，编程经常会遇到这些细节带来的鸿沟。&lt;/p&gt;
&lt;h2&gt;解决编程领域难题的有效方法是什么？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;独立思考&lt;/p&gt;
&lt;p&gt;一般来讲，大多数问题都是读的太少而想的太多带来的。在允许的情况下，推荐独立阅读思考的方式来解决问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向外部求助&lt;/p&gt;
&lt;p&gt;为了解决一个具体问题，第一步是将问题定义清楚，第二步将问题复杂度降维，例如采用正交的方式分解。
在决定向外部求助时，首选当然是浏览官方网站文档，毫无疑问，这是最新一手参考资料。
如果再推荐一个有效而快速的解决，无疑是 &lt;a href="https://www.stackoverflow.com"&gt;Stack OverFlow&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;编程领域问题两种分类维度：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;按平台和设备&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;桌面系统&lt;ul&gt;
&lt;li&gt;Windows：最佳效率桌面系统&lt;/li&gt;
&lt;li&gt;macOS：与 Windows 相比，有所长，有所短&lt;/li&gt;
&lt;li&gt;GUN/Linux：建议玩 CentOS 或 Debian&lt;ul&gt;
&lt;li&gt;Debian：以服务稳定闻名&lt;/li&gt;
&lt;li&gt;Ubuntu：最流行易用&lt;/li&gt;
&lt;li&gt;openSUSE：界面好看&lt;/li&gt;
&lt;li&gt;Fedora：RHEL创新实验田&lt;/li&gt;
&lt;li&gt;CentOS：RHEL换商标版，一个靠谱的服务器版选择&lt;/li&gt;
&lt;li&gt;Arch Linux：功能全定制&lt;/li&gt;
&lt;li&gt;Gentoo：功能定制靠编译&lt;/li&gt;
&lt;li&gt;Raspbian：极客爱玩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix&lt;ul&gt;
&lt;li&gt;FreeBSD：玩BSD桌面首选&lt;/li&gt;
&lt;li&gt;OpenBSD：可能是世界上最安全的系统&lt;/li&gt;
&lt;li&gt;NetBSD：多CPU架构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chrome OS：基于浏览器的计算环境&lt;/li&gt;
&lt;li&gt;Xfce：轻量级多媒体桌面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移动设备&lt;ul&gt;
&lt;li&gt;Android：移动设备半边天&lt;/li&gt;
&lt;li&gt;iOS：先进的移动OS&lt;/li&gt;
&lt;li&gt;Windows Phone：输在移动OS的设计&lt;/li&gt;
&lt;li&gt;Firefox OS：低端机好用&lt;/li&gt;
&lt;li&gt;Sailfish/Meego：寄予厚望却错过时代&lt;/li&gt;
&lt;li&gt;Sybian/WinCE/PalmOS/NucleusOS：历史&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;穿戴设备&lt;ul&gt;
&lt;li&gt;watchOS：目前最成功的手表OS&lt;/li&gt;
&lt;li&gt;Android Wear：没有机会用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;平板设备&lt;ul&gt;
&lt;li&gt;iPad：打破PC思维，基于场景的资讯、娱乐和媒体平台&lt;/li&gt;
&lt;li&gt;Android Tablet：生产力平板&lt;/li&gt;
&lt;li&gt;Kindle：读书人最好&lt;/li&gt;
&lt;li&gt;Windows RT：不能运行传统程序的 Windows 大家不买单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浏览器&lt;ul&gt;
&lt;li&gt;Trident：作古&lt;/li&gt;
&lt;li&gt;Webkit：将作古&lt;/li&gt;
&lt;li&gt;Gecko：作古&lt;/li&gt;
&lt;li&gt;Presto：有前景&lt;/li&gt;
&lt;li&gt;Servo：有前景&lt;/li&gt;
&lt;li&gt;Blink：有前景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按语言：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按类型模型&lt;ul&gt;
&lt;li&gt;强类型&lt;/li&gt;
&lt;li&gt;弱类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按范式&lt;ul&gt;
&lt;li&gt;面向对象&lt;/li&gt;
&lt;li&gt;函数式&lt;/li&gt;
&lt;li&gt;过程式&lt;/li&gt;
&lt;li&gt;多范式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按交互&lt;ul&gt;
&lt;li&gt;编译型&lt;/li&gt;
&lt;li&gt;解释型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按热度&lt;ul&gt;
&lt;li&gt;不会不好意思打招呼系列&lt;ul&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大公司都用系列&lt;ul&gt;
&lt;li&gt;C/C++&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;聪明系列&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;li&gt;Delphi&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快系列&lt;ul&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有Qian景系列&lt;ul&gt;
&lt;li&gt;Swift&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;Kotlin&lt;/li&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;科研系列&lt;ul&gt;
&lt;li&gt;F#&lt;/li&gt;
&lt;li&gt;R&lt;/li&gt;
&lt;li&gt;Matlab&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;极客系列&lt;ul&gt;
&lt;li&gt;Clojure&lt;/li&gt;
&lt;li&gt;Perl&lt;/li&gt;
&lt;li&gt;Rust&lt;/li&gt;
&lt;li&gt;Assembly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;编程领域问题的根本难度&lt;/h2&gt;
&lt;p&gt;编程领域问题不仅仅只有分类，根据金字塔原理，分类是一种局部但重要的思维模式，解决问题最终依赖的是网状的知识图谱。
从长远来看问题的解决最终依赖于自我的学习力，而决定编程领域问题的根本难度可能在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;语言障碍
    因为语言学习本身不是短时间能解决的问题，所以如果当待解决的问题所依赖的知识与提问的人之间存在语言障碍，那么解决此问题将会面临一个较高难度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自我认知
    有一本书叫做《提问的艺术》，可以参考。从测试的角度上，一个好提问，需给回答的人创造一个条件，方便回答者重现或进入问题的场景，一个自我认知好的人容易提好问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;解决编程领域难题的有效方法是推演和搜索&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;推演
    即依赖自我认知&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;搜索
    除了依赖自我，更多的是依赖外部&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="technology"></category></entry><entry><title>新博客</title><link href="https://kaffa.im/about-my-new-blog.html" rel="alternate"></link><published>2018-06-06T10:20:00+08:00</published><updated>2018-06-06T10:20:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-06-06:/about-my-new-blog.html</id><summary type="html">&lt;p class="first last"&gt;我的新博客&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;关于本博客&lt;/h2&gt;
&lt;p&gt;2016-06-06，新的一天，新博客，这里将主要记录我的笔记和想法，以及兴趣。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;本博客采用的技术&lt;/h2&gt;
&lt;p&gt;本博客采用基于 &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; 语言的 &lt;a class="reference external" href="https://getpelican.com/"&gt;Pelican&lt;/a&gt; 库的 &lt;a class="reference external" href="https://github.com/MrSenko/pelican-octopress-theme"&gt;octopress 主题&lt;/a&gt; 来生成。&lt;/p&gt;
&lt;p&gt;一般来说，静态博客就是一堆按目录存放的 html/css/js 及图片等静态文件组成的页面。在互联网刚兴起的那些年，第一批互联网站长利用 Microsoft FrontPage 和 Adobe Dreamweaver 等开发工具制作网站，随着 Web 的发展，几乎每一种语言都有人编写了专门的库用来维护这样的 &lt;a class="reference external" href="https://staticsitegenerators.net/"&gt;静态站点&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我近些年主要用 Python 完成一些代码，因此选用了 Python 语言的 Pelican 库，类似的托管在 Github Pages 的默认库是基于 &lt;a class="reference external" href="https://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt; 语言的 &lt;a class="reference external" href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;，而 Pelican 更有优势的地方是除了支持 &lt;a class="reference external" href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;，还支持 &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; 和 &lt;a class="reference external" href="http://www.methods.co.nz/asciidoc/"&gt;AsciiDoc&lt;/a&gt; 格式。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;本博客采用的技术的相关链接&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.getpelican.com/"&gt;Pelican blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/getpelican"&gt;Pelican dev team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;Pelican plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;Pelican themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="todo"&gt;
&lt;h2&gt;和很多静态博客一样也留下 TODO 吧&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;采用渐进增强添加国家地理的 &lt;a class="reference external" href="https://www.nationalgeographic.com/photography/photo-of-the-day/?source=sitenavpod"&gt;每日一图&lt;/a&gt; 作为随机背景&lt;/li&gt;
&lt;li&gt;将 Jekyll 的 &lt;a class="reference external" href="https://taylantatli.github.io/Moon/"&gt;Moon 主题&lt;/a&gt; 迁移到 Pelican&lt;/li&gt;
&lt;li&gt;添加一些需要 &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;Pelican plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="life"></category></entry></feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>kaFFa fORest</title><link href="https://kaffa.im/" rel="alternate"></link><link href="https://kaffa.im/feeds/all.atom.xml" rel="self"></link><id>https://kaffa.im/</id><updated>2019-04-24T12:00:00+08:00</updated><entry><title>关于计算机科学</title><link href="https://kaffa.im/about-computer-science.html" rel="alternate"></link><published>2019-04-24T12:00:00+08:00</published><updated>2019-04-24T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2019-04-24:/about-computer-science.html</id><summary type="html">&lt;p&gt;简单讲述计算机科学的理解&lt;/p&gt;</summary><content type="html">&lt;p&gt;首先我想说说心理学。&lt;/p&gt;
&lt;p&gt;人们对世界好奇、追寻和探索，其间总会发现，许多疑问和障碍并不在外部，而在于内在。所以，德尔菲神庙上镌刻着阿波罗神谕“认识你自己”。人类对内在心灵、灵魂的探索最初来自于宗教、神学和哲学，那些认知的结论，在许多世纪之前，类似强力的光柱透过彩窗从不同角度射入黑暗将空间照亮，人们从不同面提出对这门学科的理解。&lt;/p&gt;
&lt;p&gt;直到冯特采用科学实验的方式进行心理研究才奠定现代意义的心理学基础，它研究人的心灵和行为的关系，其建构在科学实验和行为统计之上，现代前沿的是实验心理学和认知心理学。很多研究，比如对神经元和人类学习的研究，直接促成了模式匹配、机器统计学习和人工神经网络的发展。&lt;/p&gt;
&lt;p&gt;科学在高处相通，从学科的分层，心理学分为理论心理学和应用心理学，而计算机科学也可分为理论部分和应用部分。&lt;/p&gt;
&lt;p&gt;从理论部分说，计算机科学是通过理论计算机研究信息处理的科学，其实和实体计算机的关联并不大，它更偏向于数学、逻辑、计算理论和信息理论。&lt;/p&gt;
&lt;p&gt;由于计算科学和信息科学并不在大众常识范围内，所以大多数人的理解，学计算机科学毕业，大约应该是学会了装电脑用。:-(&lt;/p&gt;
&lt;p&gt;从应用层面说，计算机科学又包含，计算机工程学和商业计算机系统。前者是研究计算机硬件和集成固件，后者是信息系统。&lt;/p&gt;
&lt;p&gt;现代，数据、信息和计算如此重要，计算机应用几乎能和所有学科交叉、相互促进。&lt;/p&gt;
&lt;p&gt;现代计算机硬件和操作系统软件的出现是理论计算机和计算机工程学的完美配合，前者是说邱奇-图灵的图灵机和可计算性理论，后者是说冯·诺依曼和 ENIAC，第一台存储程序计算机模型的大型计算机。&lt;/p&gt;
&lt;p&gt;也许大多数人觉得计算机能计算处理信息不可思议，但除开电器层次和复杂性，在其本质上，依旧还是图灵的代表0和1的无限伸展的纸带和冯·诺依曼对理论计算机的工程实现。&lt;/p&gt;
&lt;p&gt;发展了 80 多年的计算科学，其实核心一成不变，是的，毫不令人惊讶，因为世界降生一位像图灵一样，有野心、有才华、还努力、还开挂的天才并不容易，只有这样的天才的头脑中，才会诞生理论计算机。&lt;/p&gt;
&lt;p&gt;为什么计算的核心一成不变，其实中国《易经》六十四卦即类似的算法表述——二分法（将在未来专写一篇），也是超越各种语言和思维的通用思维方式。&lt;/p&gt;
&lt;p&gt;这就是——易——宇宙的逻辑，无论事物表像多么的不同。&lt;/p&gt;
&lt;p&gt;感谢各位大佬观阅。&lt;/p&gt;
&lt;p&gt;&lt;img alt="我的赞赏码" src="https://kaffa.im/img/reward.png" title="我的赞赏码" /&gt;&lt;/p&gt;</content><category term="Tech"></category></entry><entry><title>我的工作修真记</title><link href="https://kaffa.im/about-my-work-experience.html" rel="alternate"></link><published>2019-04-19T12:00:00+08:00</published><updated>2019-04-19T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2019-04-19:/about-my-work-experience.html</id><summary type="html">&lt;p&gt;撰写本文的原因，因近期开始找工作，结果不及预期，得空将个人工作经历按时代节奏讲述出来，同时祝自己早日找到新工作。&lt;/p&gt;</summary><content type="html">&lt;p&gt;按：撰写本文的原因，因近期开始找工作，结果不及预期，得空将个人工作经历按时代节奏讲述出来，同时祝自己早日找到新工作。&lt;/p&gt;
&lt;p&gt;本人 80 后金融 IT 从业人员，爱生活、爱运动、爱读书的中年叔一枚。&lt;/p&gt;
&lt;p&gt;中学时，因身高太高原因，为避免同班同学误认为留级生，不得不跳级，导致少小离家去念计算机。大学在校成绩不错，常沉迷图书馆和 &lt;a href="https://netscape-browser.en.softonic.com/"&gt;Netscape Navigator&lt;/a&gt; 因特网冲浪，除了计算机科学，也热爱人文和艺术，但无奈学校并不支持文理双学位的操作。&lt;/p&gt;
&lt;p&gt;遗憾之余，在专业上学习了 &lt;a href="https://en.wikipedia.org/wiki/C_(programming_language)"&gt;C&lt;/a&gt; 和 &lt;a href="https://www.embarcadero.com/cn/products/delphi"&gt;Borland Delphi&lt;/a&gt;，随后自学了 &lt;a href="https://docs.microsoft.com/en-us/windows/desktop/api/"&gt;Windows API&lt;/a&gt;、Debug 技术，再后对软件安全技术也有兴趣，并自学了 HTML、CSS、&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript"&gt;JavaScript&lt;/a&gt; 后成为互联网第一批站长。&lt;/p&gt;
&lt;p&gt;在互联网公司群雄割据逐鹿中原时期，注册过 &lt;a href="https://icq.com/windows/en"&gt;ICQ&lt;/a&gt;、MSN、OMMO、及6位 OICQ 号，在那个 Skype 未现，聊天只有 QQ 聊天室，论坛&lt;a href="http://www.tianya.cn/"&gt;天涯&lt;/a&gt;&lt;a href="http://www.mop.com/"&gt;猫扑&lt;/a&gt;，电子商务只有&lt;a href="http://www.eachnet.com/"&gt;易趣&lt;/a&gt;没有淘宝，门户还是雅虎新浪搜狐的时代，凭借 Photoshop 和 Dreamweaver、Flash 等技术，得到第一份实习工作——网站设计师。&lt;/p&gt;
&lt;p&gt;毕业后签约武汉另一家更大规模的互联网软件公司，码站时发现，同学做 ASP / &lt;a href="https://docs.microsoft.com/en-us/windows/desktop/lwef/using-vbscript"&gt;VBScript&lt;/a&gt; 和 &lt;a href="https://dotnet.microsoft.com/apps/aspnet"&gt;ASP.NET&lt;/a&gt; / &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/"&gt;C#&lt;/a&gt; 的收入甚高，遂自学 C# 和 &lt;a href="https://www.php.net/"&gt;PHP&lt;/a&gt; 从 Web 设计师转向了后台开发。此后做尽各类通用软件和网站，从政府、国企到中小公司，一年后决定南下深圳工作。&lt;/p&gt;
&lt;p&gt;到深面试两周后，进入一家总部在北京的公司，在中国最美半岛——大鹏的一家国企进行精密工程软件开发，此间实践了“瀑布模式”的统一软件开发过程的软件工程，阅读了&lt;a href="https://book.douban.com/subject/1102259/"&gt;《人月神话》&lt;/a&gt;、&lt;a href="https://book.douban.com/subject/1108725/"&gt;《人件》&lt;/a&gt;和德鲁克&lt;a href="https://book.douban.com/subject/1424955/"&gt;《卓有成效的管理者》&lt;/a&gt;、波特&lt;a href="jingzhenghttps://book.douban.com/subject/1435909/"&gt;《竞争》三部曲&lt;/a&gt;。在工作流程和管理学上也有新的认识，两个项目做完进入维护期，经历了需求变更的泥沼和系统测试 Bug 率的艰难收敛过程，已过了两年。&lt;/p&gt;
&lt;p&gt;同期，足迹也踏满深圳的山山海海，结识了一群热爱上山下海的伙伴，于是头脑一热，辞职开始了第一次合伙创业——&lt;a href="http://www.xlcool.com/"&gt;户外社区&lt;/a&gt;。前后半年，此类商业组织已开始和旅行社、在线旅游头部网站、保险公司合作，资本开始进入，而当时我们团队的资源和能力，不足以获得客户，没有资金，也不够向所经营的户外社区注入在线旅游服务。在没有盈利希望后，就终止了户外社区的商业化，保留下来为一个小而美的后花园，安心开始了深圳的第二份工作。&lt;/p&gt;
&lt;p&gt;彼时，已是 2007 年初期，并不知第二年即将出现的金融“灰犀牛”已在路上，幸运的是顺利通过了腾讯面试进入运营中心（当时叫O线），进行基于惠普公司 &lt;a href="https://en.wikipedia.org/wiki/ITIL"&gt;ITIL&lt;/a&gt; V3 方法论的运营基础设施系统研发，个人的角色也由全栈工程师逐步转为技术管理。&lt;/p&gt;
&lt;p&gt;当时腾讯初具规模，体量不大，步子快，但国内互联网公司的技术层面依然是欧美跟跑者，无法像今天一样已有领先的技术输出和开源社区贡献。当时正值&lt;a href="https://agilemanifesto.org/iso/zhchs/manifesto.html"&gt;“敏捷开发宣言”&lt;/a&gt;五周年，这个相比“瀑布模式”的“迭代”方式更恰当互联网公司，于是我在工作中也收获了敏捷项目管理、自动化测试和持续集成经验，以及更重要的职业理解，奠定了从随后的公司转入招行的基础。&lt;/p&gt;
&lt;p&gt;再至 2008 年末，美国次贷危机导致的泡沫经济破灭，也影响了互联网行业。我相信人们迟早会获得这个认知：人的命运浮浮沉沉，也是在时代的大周期之中。&lt;/p&gt;
&lt;p&gt;那时二十七岁的我很年轻，并未有足够理解，只是潜在产生了对金融的兴趣，想让自己的技能增加金融背景。于是从证券和银行方向开始，培养自己对金融的兴趣，职业也转向了为招商银行提供软件研发服务的乙方公司，一年后，&lt;a href="http://www.cmbchina.com/"&gt;招行&lt;/a&gt;邀请我加入，经过考虑，我选择了加入招行，工作开始逐步转向新的阶段。&lt;/p&gt;
&lt;p&gt;在招行工作的 8 年中，参与了 &lt;a href="https://www.pmi.org/certifications/types/project-management-pmp"&gt;PMP&lt;/a&gt; 培训，角色从项目集主管到项目经理，再到外部公司管理、外购项目，外包人力资源管理，因工作需要，专业方向除了最熟悉的 Windows、Linux、.Net 和 Web 平台 ，也也扩展到了 OS 390、AS400 等大机，也将 &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; 和 &lt;a href="https://www.java.com/"&gt;Java&lt;/a&gt; 引入到项目中，同时在学习了好奇已久的&lt;a href="http://www.paulgraham.com/onlisp.html"&gt;On Lisp&lt;/a&gt;，玩了 &lt;a href="https://support.apple.com/zh-cn/macos"&gt;macOS&lt;/a&gt; 与 &lt;a href="https://developer.apple.com/documentation/objectivec"&gt;Objective-C&lt;/a&gt;，因为银行软件的特点，随后的 &lt;a href="https://zh.wikipedia.org/zh-hans/%E8%83%BD%E5%8A%9B%E6%88%90%E7%86%9F%E5%BA%A6%E6%A8%A1%E5%9E%8B%E9%9B%86%E6%88%90"&gt;CMMI&lt;/a&gt;、全面质量管理、测试驱动开发、&lt;a href="https://www.scrum.org/"&gt;Scrum&lt;/a&gt;、DevOps、看板等方法论也被逐一在研发体系的改进中不断实践。&lt;/p&gt;
&lt;p&gt;判断这市场上的好公司和优秀的组织，有一个重要维度——组织架构的学习和进化能力——即组织是否有智能，而工作过的腾讯、招银等就是善于利用外部资源的代表。对个人来说，也许忽略了更重要的方向——金融，房地产、投资与比特币，而这些都真实的影响着命运。&lt;/p&gt;
&lt;p&gt;和腾讯不同的是，招银有一个好处就是不需要 996，而同时我认同马大佬的陈述，没有 996 的年轻人也没有得到命运的祝福。&lt;/p&gt;
&lt;p&gt;招银的工作虽有张有弛，但也是早八晚六，凭心而论，我并不安于常规，其间，我的英文写作老师 Jill 对我的触动很大，一个对 Routine Life 感到恐怖的人，辞掉欧洲的教师职业，卖掉房产，游历世界，在中国期间教授写作。学会一门新的语言，就是打开了一个新的世界。个人对于世界的热情和对人生议题的思维方式，也随着语言的学习变得更加深入而多元。&lt;/p&gt;
&lt;p&gt;这些年，我的读书修习之路，也未止步，此间陆续学习证券知识，获得证券从业资格，强化了人力资源管理培训，搭配获得国家心理咨询师，并开拓了诸多兴趣面，在专业方向上接触了 Android 平台和 iOS 平台的 App 开发，和前端新技术 &lt;a href="https://cn.vuejs.org/index.html"&gt;Vue&lt;/a&gt; / &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;，&lt;a href="https://nodejs.org/zh-cn/"&gt;Node.js&lt;/a&gt;，也通过积极拥抱开源，通过 Microsoft Code 尝试一些 &lt;a href="https://electronjs.org/"&gt;Electron&lt;/a&gt; 和 NW.js 的 &lt;a href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; 项目。&lt;/p&gt;
&lt;p&gt;好在有平台和软件工程的基础理解，从学业到工作，近十多年来，新技术和新知识多是旧瓶新酒，在很短时间就能掌握。&lt;/p&gt;
&lt;p&gt;在人文科学、社会科学、自然科学、艺术文化四个方向上，艺术文化是始终的爱好，而社科成为职业工作方向的可能很小，自然和人文还是自己的主场。基于对新技术趋势的理解，认定云、分布式计算、大数据分析和人工智能必定赋能未来，后按此方向加入北京的一家金融数据公司，从事金融数据、NLP 和人工智能方向的系统开发和研究。&lt;/p&gt;
&lt;p&gt;而今，时空周期之轮已继续旋转，外部环境以及微观市场结构慢慢发生变化，不幸的是，公司经营发生调整，我得重新启程了。&lt;/p&gt;
&lt;p&gt;在寻找下一份工作之际，记录一些个人工作的回忆，虽然并未包含太多职场故事的细节，但还是希望能以此文留予 5 年后的自己。&lt;/p&gt;
&lt;p&gt;感谢各位大佬观阅。&lt;/p&gt;
&lt;p&gt;&lt;img alt="我的赞赏码" src="https://kaffa.im/img/reward.png" title="我的赞赏码" /&gt;&lt;/p&gt;</content><category term="My Blog"></category></entry><entry><title>关于滑块验证码的思路</title><link href="https://kaffa.im/some-thoughts-on-reCAPTCHA.html" rel="alternate"></link><published>2019-04-17T12:00:00+08:00</published><updated>2019-04-17T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2019-04-17:/some-thoughts-on-reCAPTCHA.html</id><summary type="html">&lt;p class="first last"&gt;本文描述关于自动通过滑块验证码验证的思路&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;图灵测试&lt;/h2&gt;
&lt;p&gt;图灵测试是一个著名的思想实验，它要解决的问题是如何判断一台机器是否具有智能。&lt;/p&gt;
&lt;p&gt;简单的讲，就是把判定对象看做黑盒，人与其对话，如果人分辨不出被判定对象是否是机器的话，就算它通过了图灵测试。&lt;/p&gt;
&lt;p&gt;而“&lt;a class="reference external" href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%96%87%E6%88%BF%E9%97%B4"&gt;中文房间&lt;/a&gt;”思想实验，即呈现了图灵测试的局限——即使机器实现了智能外在的输入输出，内在结构也可以不是智能。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;滑块验证码&lt;/h2&gt;
&lt;p&gt;软件安全技术的攻击与防守就好比矛和盾，随着技术的更新，此消彼长。&lt;/p&gt;
&lt;p&gt;由于自动化技术的发展，脚本加本地代码已可以解决没有技术门槛的人类验证。二十年前，只要懂脚本，就可以让计算机自动做很多事；十六年前，Luis 在发明了验证码，
我也曾在 Google Code 中下载 &lt;a class="reference external" href="https://code.google.com/archive/p/tesseract-ocr/"&gt;tesseract-ocr&lt;/a&gt; 以解决中文验证码，但 Gooogle 的 reCAPTCHA 确实很扭曲，却是鲜有人破解。&lt;/p&gt;
&lt;p&gt;但随着 AI 机器学习技术的发展，扭曲文字的自动识别难点已被攻破。在多年前的某天，滑块验证码出现了，技术社区讨论如火如荼。&lt;/p&gt;
&lt;p&gt;稍微几年未关注，这个领域除了巨头，还产出了 API 售卖 reCAPTCHA 的小而美的公司，比如`极验`_。&lt;/p&gt;
&lt;p&gt;GitHub 中也有不少破解其旧版本的代码，虽然没有查看其新版本，但可以简单谈谈绕过的思路。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;解决思路&lt;/h2&gt;
&lt;p&gt;可以从网络层、系统层和用户层来考虑：&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;网络层：此类验证，最后发送的数据一定需要加密，难点在于对付 js 的混淆，通过单步调试找到加密前的数据。理解数据，或直接采集多组数据，再模拟发送即可。这一种思路对耐心的要求很高。&lt;/li&gt;
&lt;li&gt;系统层：通过程序抓图和图像运算比对，计算出键盘鼠标的操作即可，这一种相对比较容易，但速度不如网络层解决快。&lt;/li&gt;
&lt;li&gt;用户层：采用软硬件结合的极客思路，用摄像头进行视觉采集，用机器手操纵鼠标，完全模拟一个有智能的会操作键盘和鼠标的人，这种可能是最一劳永逸，但门槛最高的思路。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Tech"></category><category term="GeeTest"></category></entry><entry><title>Jekyll、MSYS2、Vibora 及在 Windows 下用 Linux</title><link href="https://kaffa.im/jekyll-msys2-vibora-and-use-linux-on-windows.html" rel="alternate"></link><published>2018-08-14T12:00:00+08:00</published><updated>2018-08-14T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-08-14:/jekyll-msys2-vibora-and-use-linux-on-windows.html</id><summary type="html">&lt;p class="first last"&gt;本文聊聊 Jekyll、MSYS2、Vibora 及在 Windows 下用 Linux 的话题&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;故事&lt;/h2&gt;
&lt;p&gt;故事开始于我需要在 Windows 下用 Jekyll 转化一篇 Markdown 的博文，于是在 Windows 下安装了 Jekyll，其中涉及一些 MSYS2 的安装坑。
接下来想到 MSYS2 其实可以解决 Vibora 的问题，于是将这两个过程中的难点记录一下，再谈谈在 Windows 下使用 Linux 的话题。&lt;/p&gt;
&lt;p&gt;本文旨在为正使用 Windows 同时又想使用 Linux 功能的人列举一些可能的途径，本文适用于对 Windows 和 Linux 具备一定了解的人。
另有计划写 Windows、macOS、Linux 操作系统比较的博文，但本文的范围不涉及比较。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="widnows-jekyll"&gt;
&lt;h2&gt;Widnows 下用 Jekyll&lt;/h2&gt;
&lt;p&gt;Jekyll 依赖于 Ruby Runtime 和一些 Gem 包，而 Ruby Runtime 在 Windows 下推荐用于 &lt;a class="reference external" href="https://rubyinstaller.org/"&gt;RubyInstaller&lt;/a&gt;，
某些 Gem 包需要本地编译，官方推荐 &lt;a class="reference external" href="http://www.msys2.org/"&gt;MSYS2&lt;/a&gt; 安装 Windows 上的编译工具链。
因为众所周知的原因，国内安装这些软件时也会遇到一些问题。下面叙述步骤并给予问题的解决办法。&lt;/p&gt;
&lt;div class="section" id="ruby"&gt;
&lt;h3&gt;安装 Ruby&lt;/h3&gt;
&lt;p&gt;运行下载好的 RubyInstaller，基于少一层目录的原因，建议直接安装在根目录下，例如 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Ruby25\&lt;/span&gt;&lt;/tt&gt;，并将此目录加入安装目录到 PATH。在最后点击结束按钮后，会提示安装 MSYS2，它用来编译 Ruby 本地包，官方说它的下载由一个全球 CDN 提供，但它在国内的访问真是无力吐槽。&lt;/p&gt;
&lt;p&gt;也许你等待龟速网络很久可以将 MSYS2 安装成功，也许你会遭遇反复失败，不知如何是好。但如果你需要使用 Jekyll，而它使用了本地二进制包，那么这个问题是无法跳过的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="msys2"&gt;
&lt;h3&gt;安装 MSYS2 的小技巧&lt;/h3&gt;
&lt;p&gt;如果你跳过了 MSYS2 安装，那么在后续的 gem install 时，会提示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MSYS2 could not be found. Please run &amp;#39;ridk install&amp;#39; or download and install MSYS2 manually from https://msys2.github.io/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当你执行 &lt;tt class="docutils literal"&gt;ridk install&lt;/tt&gt; 时，会显示下载 &lt;a class="reference external" href="http://repo.msys2.org/distrib/x86_64/msys2-x86_64-20180531.exe"&gt;http://repo.msys2.org/distrib/x86_64/msys2-x86_64-20180531.exe&lt;/a&gt; 失败，我的解决办法是用迅雷下载 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;msys2-x86_64-20180531.exe&lt;/span&gt;&lt;/tt&gt;，并用 IIS 或 Apache 等服务器，在本地配置一个站点下载，这样做需要管理员权限修改 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Windows\System32\drivers\etc\hosts&lt;/span&gt;&lt;/tt&gt; 文件，临时加入一行配置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;127.0.0.1    repo.msys2.org
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时确保访问 &lt;a class="reference external" href="http://127.0.0.1/distrib/x86_64/msys2-x86_64-20180531.exe"&gt;http://127.0.0.1/distrib/x86_64/msys2-x86_64-20180531.exe&lt;/a&gt; 时可以正常下载。那么再次运行 &lt;tt class="docutils literal"&gt;ridk install&lt;/tt&gt; 时，就会通过本机下载了。&lt;/p&gt;
&lt;p&gt;然后，当 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;msys2-x86_64-20180531.exe&lt;/span&gt;&lt;/tt&gt; 下载完毕时，需要及时把上述 hosts 配置行删除，因为本机并没有 &lt;tt class="docutils literal"&gt;repo.msys2.org&lt;/tt&gt; 站点下的其他文件。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;配置 MSYS2 镜像地址&lt;/h3&gt;
&lt;p&gt;同时，为了 MSYS2 其他包方便下载，建议配置国内镜像，分别修改下面三个文件，在配置的最上加入 清华大学 与 中科大镜像地址&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\msys64\etc\pacman.d\mirrorlist.mingw64&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##
## 64-bit Mingw-w64 repository mirrorlist
##
## 清华大学软件镜像
Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/x86_64/
## 中科大镜像
Server = http://mirrors.ustc.edu.cn/msys2/mingw/x86_64/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\msys64\etc\pacman.d\mirrorlist.mingw32&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##
## 32-bit Mingw-w64 repository mirrorlist
##
## 清华大学软件镜像
Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/mingw/i686/
## 中科大镜像
Server = http://mirrors.ustc.edu.cn/msys2/mingw/i686/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\msys64\etc\pacman.d\mirrorlist.msys&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;##
## MSYS2 repository mirrorlist
##
## 清华大学软件镜像
Server = https://mirrors.tuna.tsinghua.edu.cn/msys2/msys/$arch/
## 中科大镜像
Server = http://mirrors.ustc.edu.cn/msys2/msys/$arch/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果你及时删除了 hosts 文件中的配置行，那么 NSYS2 即可以顺利完成安装。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;测试 MSYS2 安装是否成功&lt;/h3&gt;
&lt;p&gt;可以再次运行 &lt;tt class="docutils literal"&gt;ridk install&lt;/tt&gt;，命令行会打开&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;RubyInstaller2 for Windows

1 - MSYS2 base installation
2 - MSYS2 system update
3 - MSYS2 and MINGW development toolchain
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;试试 1、2、3 三个选项，如果全部没有可更新项时，就证明 MSYS2 安装已经成功了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gem"&gt;
&lt;h3&gt;配置 Gem 镜像地址&lt;/h3&gt;
&lt;p&gt;对于有价值的开源技术，国内一般都进行了镜像，一般都建议直接使用国内镜像地址。运行下面命令配置镜像&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem sources –r https://rubygems.org/
gem sources -a https://ruby.taobao.org/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;运行下面命令查看，并更新&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gem sources -l
gem update
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="jekyll"&gt;
&lt;h3&gt;安装 Jekyll&lt;/h3&gt;
&lt;p&gt;下面是官方网站优雅的几行介绍&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~ $ gem install bundler jekyll
~ $ jekyll new my-awesome-site
~ $ cd my-awesome-site
~/my-awesome-site $ bundle exec jekyll serve
# =&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; Now browse to http://localhost:4000
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有了上面步骤的铺垫，至此，Jekyll 可以优雅的运行了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;关于 Ruby 的感叹&lt;/h3&gt;
&lt;p&gt;十年前，曾在 Ruby 语言通过 Web 2.0 的需求爆发时，借 Web 敏捷框架 Rails 大红大紫了解过它，对这些年一直没有再有机会使用，如果没有 Rails，Ruby 就不会红，定位于 Python 和 Perl 之间，如今它也许会有所发展，但综合来看，都会逐渐变成先前使用了 RoR 公司的技术遗产，市场上 Ruby 的技术人员也会越来越少，加上它本身并未和现在大前端、移动互联网、大数据、云计算、人工智能、VR等任何一个热点沾边，也不具备后端编译语言的规模成本优势，从系统论视角思考，没有生态，就会走向低谷，但在它擅长的 Web 领域内，还是一种有智慧的解决方案。&lt;/p&gt;
&lt;p&gt;相比来说，经常能先于时代的 Python 的好运气并不是偶然，因为重视科研领域，它借着大数据分析和人工智能一飞冲天，如今生态广阔的 Python，相比来说就有着更稳固的护城河，这种就好比持续增长的公司拥有的竞争优势一样，更值得长期看好。所以，下面就说说 Python Web Framework：Vibora&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="widnows-vibora"&gt;
&lt;h2&gt;Widnows 下用 Vibora&lt;/h2&gt;
&lt;p&gt;Vibora 性能闪瞎眼，为了不让 MSYS2 环境浪费，于是尝试是否可以通过 MSYS2 将它运行起来。&lt;/p&gt;
&lt;div class="section" id="msys2-python3"&gt;
&lt;h3&gt;MSYS2 安装 python3&lt;/h3&gt;
&lt;p&gt;首先，打开 MSYS2 运行 python 或 python3，提示&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-bash: python: 未找到命令
-bash: python3: 未找到命令
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;于是我们需要在 MSYS2 中添加软件包，请出 pacman，它移植于著名 LFS ———— Arch Linux 发行版&lt;/p&gt;
&lt;p&gt;首先，安装一些依赖和编译工具&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman --needed -Sy bash pacman pacman-mirrors msys2-runtime
pacman -S mingw-w64-x86_64-gcc mingw-w64-x86_64-gdb mingw-w64-x86_64-make tmux zsh git mingw64/mingw-w64-x86_64-cmake winpty
pacman -S mingw-w64-x86_64-python3-bsddb3 mingw-w64-x86_64-gexiv2 mingw-w64-x86_64-ghostscript mingw-w64-x86_64-python3-cairo mingw-w64-x86_64-python3-gobject mingw-w64-x86_64-python3-icu mingw-w64-x86_64-iso-codes mingw-w64-x86_64-hunspell mingw-w64-x86_64-hunspell-en mingw-w64-x86_64-enchant
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;接下来安装 python3 和 pip3&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -S mingw-w64-x86_64-python3
pacman -S python3-pip
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此时 python3 和 pip3 已经安装，顺便把 pip3 升个级，最近它的版本号也像 Chrome 一样一发不可收拾。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3 install --upgrade pip
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="msys2-vibora"&gt;
&lt;h3&gt;MSYS2 安装 vibora&lt;/h3&gt;
&lt;p&gt;再安装 vibora&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip3 install vibora
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提示错误：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Running setup.py install for vibora ... error
Complete output from command /usr/bin/python3 -u -c &lt;span class="s2"&gt;&amp;quot;import setuptools, toke&lt;/span&gt;
nize;__file__=&amp;#39;/tmp/pip-install-rawskw89/vibora/setup.py&amp;#39;;f=getattr(tokenize, &amp;#39;o
pen&amp;#39;, open)(__file__);code=f.read().replace(&amp;#39;\r\n&amp;#39;, &amp;#39;\n&amp;#39;);f.close();exec(compile
&lt;span class="p"&gt;(&lt;/span&gt;code, __file__, &amp;#39;exec&amp;#39;&lt;span class="p"&gt;)&lt;/span&gt;)&lt;span class="s2"&gt;&amp;quot; install --record /tmp/pip-record-9rnpdvhe/install-rec&lt;/span&gt;
ord.txt --single-version-externally-managed --compile:

...

unable to execute &amp;#39;x86_64-pc-msys-gcc&amp;#39;: No such file or directory
error: command &amp;#39;x86_64-pc-msys-gcc&amp;#39; failed with exit status 1

...

Command &lt;span class="s2"&gt;&amp;quot;/usr/bin/python3 -u -c &amp;quot;&lt;/span&gt;import setuptools, tokenize;__file__=&amp;#39;/tmp/pip-
install-rawskw89/vibora/setup.py&amp;#39;;f=getattr(tokenize, &amp;#39;open&amp;#39;, open)(__file__);co
de=f.read().replace(&amp;#39;\r\n&amp;#39;, &amp;#39;\n&amp;#39;);f.close();exec(compile(code, __file__, &amp;#39;exec&amp;#39;)
)&lt;span class="s2"&gt;&amp;quot; install --record /tmp/pip-record-9rnpdvhe/install-record.txt --single-version&lt;/span&gt;
-externally-managed --compile&lt;span class="s2"&gt;&amp;quot; failed with error code 1 in /tmp/pip-install-raws&lt;/span&gt;
kw89/vibora/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;想来原因是 Vibora 依赖本地二进制程序进行异步通信。&lt;/p&gt;
&lt;p&gt;再安装 x86_64-pc-msys-gcc&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -S gcc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;之后，再次运行 &lt;tt class="docutils literal"&gt;pip3 install vibora&lt;/tt&gt;，提示&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;In file included from vibora/parsers/parser.c:4:0:
/usr/include/python3.6m/Python.h:39:10: 致命错误：crypt.h：No such file or d
irectory
 #include &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;crypt.h&amp;gt;
          &lt;span class="se"&gt;^~&lt;/span&gt;~~~~~~~
编译中断。
error: command &amp;#39;x86_64-pc-msys-gcc&amp;#39; failed with exit status 1

----------------------------------------
Command &lt;span class="s2"&gt;&amp;quot;/usr/bin/python3 -u -c &amp;quot;&lt;/span&gt;import setuptools, tokenize;__file__=&amp;#39;/tmp/pip-install-t22lx1u7/vibora/setup.py&amp;#39;;f=getattr(tokenize, &amp;#39;open&amp;#39;, open)(__file__);code=f.read().replace(&amp;#39;\r\n&amp;#39;, &amp;#39;\n&amp;#39;);f.close();exec(compile(code, __file__, &amp;#39;exec&amp;#39;))&lt;span class="s2"&gt;&amp;quot; install --record /tmp/pip-record-f8i8_k06/install-record.txt --single-version-externally-managed --compile&amp;quot;&lt;/span&gt; failed with error code 1 in /tmp/pip-install-t22lx1u7/vibora/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;StackOverflow 大法好，提示缺少的 头文件 crypt.h 在 libcrypt-devel 包中，于是再安装 x86_64-pc-msys-gcc&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -S libcrypt-devel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第三次运行  &lt;tt class="docutils literal"&gt;pip3 install vibora&lt;/tt&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip3 install vibora
Collecting vibora
Using cached https://files.pythonhosted.org/packages/1c/db/c42998b106b89d67ce0                                            fe256320454ca224e4d3d05f56dd518514a5b738c/vibora-0.0.6.tar.gz
Requirement already satisfied: pendulum in /usr/lib/python3.6/site-packages (from vibora) (2.0.3)
Requirement already satisfied: python-dateutil&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;3.0,&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;=2.6 in /usr/lib/python3.6/site-packages (from pendulum-&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;vibora) (2.7.3)
Requirement already satisfied: pytzdata&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;=2018.3 in /usr/lib/python3.6/site-packages (from pendulum-&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;vibora) (2018.5)
Requirement already satisfied: six&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;=1.5 in /usr/lib/python3.6/site-packages (from python-dateutil&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;3.0,&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;=2.6-&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;pendulum-&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;vibora) (1.10.0)
Installing collected packages: vibora
Running setup.py install for vibora ... done
Successfully installed vibora-0.0.6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我的天，成功了！于是试了试官方 hello-world.py&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vibora-hello-world"&gt;
&lt;h3&gt;运行 vibora hello world&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;vibora&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Vibora&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;vibora.responses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;JsonResponse&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vibora&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;JsonResponse&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;提示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;xxx@yyyy MSYS /d/code/vibora
$ python hello-world.py
Traceback (most recent call last):
File &lt;span class="s2"&gt;&amp;quot;hello-world.py&amp;quot;&lt;/span&gt;, line 1, in &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;module&amp;gt;
    from vibora import Vibora, Request
File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python3.6/site-packages/vibora/__init__.py&amp;quot;&lt;/span&gt;, line 7, in &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;module&amp;gt;
    from .server import *
File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python3.6/site-packages/vibora/server.py&amp;quot;&lt;/span&gt;, line 11, in &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;module&amp;gt;
    from .workers.handler import RequestHandler
File &lt;span class="s2"&gt;&amp;quot;/usr/lib/python3.6/site-packages/vibora/workers/handler.py&amp;quot;&lt;/span&gt;, line 3, in &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;module&amp;gt;
    from socket import IPPROTO_TCP, TCP_NODELAY, SO_REUSEADDR, SOL_SOCKET, SO_REUSEPORT, socket
ImportError: cannot import name &amp;#39;SO_REUSEPORT&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;google 错误提示，居然来到了 &lt;a class="reference external" href="https://github.com/vibora-io/vibora/issues/106"&gt;vibora-issues-106&lt;/a&gt;，状态是关闭的，作者 &amp;#64;frnkvieira 说 &amp;#64;zzeric 已经修复，他已合入最新版，下面又有人要求打开这个 issues，说经过测试依然存在。&lt;/p&gt;
&lt;p&gt;&amp;#64;zzeric_ 的解决办法是升级到 python 3.7.0，我个人认为这并非一个好的办法。
&amp;#64;danieldaeschle_ 的解决办法是 &lt;a class="reference external" href="https://github.com/vibora-io/vibora/pull/157"&gt;vibora-pull-157&lt;/a&gt; ，不过作者并未接受。&lt;/p&gt;
&lt;p&gt;我暂时采用了 &lt;a class="reference external" href="https://github.com/danieldaeschle"&gt;danieldaeschle&lt;/a&gt; 的方法修改，再次运行，提示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;OSError: [Errno 112] Address already in use
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不过，此时浏览器打开 &lt;a class="reference external" href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt; 已经可以正常显示:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
{'hello': 'world'}
&lt;/pre&gt;
&lt;p&gt;本文的第三部分，剩下的就是作个总结。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="windows-linux"&gt;
&lt;h2&gt;Windows 下用 Linux 的途径&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;虚拟机&lt;/dt&gt;
&lt;dd&gt;虚拟机是在物理宿主机上虚拟一台机器，再将 Linux 安装进去。Windows 平台的虚拟机软件也有不少选择，而且微软也内置了一种虚拟机 Hyper-V&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;类Linux / POSIX API 方案&lt;/dt&gt;
&lt;dd&gt;这类方案是在 Windows 核心上实现一种 类Linux / POSIX 标准的中间翻译层，要么对接到 Windows 原生动态链接库，要么对接到自带的库。&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;Windows Subsystem for Linux&lt;/dt&gt;
&lt;dd&gt;这是基于市场博弈和市场的发展，微软官方基于 Hyper-V 给出了一个解决方案，这个方案可以从微软商店中下载 Linux，目前官方支持 5 种比较常见的发行版。&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是我的一些理解&lt;/p&gt;
&lt;div class="section" id="virtualbox"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在普通需求上，这是我最愿意使用的一种便携方案，比如国内银行的 usb key 只支持 Windows 时，使用虚拟机也是挺好的，适合个人。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="vmware"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://www.vmware.com/"&gt;VMWare&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;他们具备成熟的生产环境商业方案，但其实更适合开发环境和测试环境构建一套安全、灵活、可扩展的系统环境。但现在虚拟化的趋势中有所过气，XEN 算是 Linux 上对标的方案。但他们家显卡驱动实在不行。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hyper-v"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v"&gt;Hyper-V&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在虚拟微软自家系统旧版本时，这个是最佳方案，一些微软自家新技术，也是以此虚拟机发布的。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="docker"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://www.docker.com/"&gt;Docker&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;它不是虚拟机，但是目前很不错的容器虚拟化技术，但它需要 Widnows Pro 版本以上，且不能与 VirtualBox 和 VMWare 及一些 Android 模拟器共存。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cygwin-mingw"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://www.cygwin.com/"&gt;Cygwin&lt;/a&gt; &amp;amp; &lt;a class="reference external" href="http://www.mingw.org/"&gt;MinGW&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Cygwin 通过动态链接库 cygwin1.dll，提供一个 POSIX API 子集，编译出 Linux 下的程序通过这个库对接 Windows 底层动态链接库。&lt;/p&gt;
&lt;p&gt;MinGW 是 GCC 在 Windows 的实现，通过编译器，把诸如 Linux 系统调用 如 fork 翻译成 Windows API 如 CreateProcess 这样。这种没有引入运行时的中间层，会比 Cygwin 更紧凑。&lt;/p&gt;
&lt;p&gt;通俗的说 Cygwin 属于运行时适配，MinGW 属于编译时转化，从技术纯粹来说，我更喜欢 MinGW，但对于绝大多数小的程序，Cygwin 虽然多了中间层，但可移植性比 MinGW 强。&lt;/p&gt;
&lt;p&gt;跨平台属于商业鸿沟，技术上也是一个复杂问题，之所以跨平台这个问题这么难，是因为平台差异导致的，比如可执行文件格式差异，Windows 是 PE 文件，Linux 是 ELF 文件，于是需要分别编译。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="msys-msys2"&gt;
&lt;h3&gt;&lt;a class="reference external" href="http://www.mingw.org/wiki/MSYS"&gt;MSYS&lt;/a&gt; &amp;amp; &lt;a class="reference external" href="http://www.msys2.org/"&gt;MSYS2&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;MSYS 这个项目，由多年前的 MinGW 团队开始，并成为 Cygwin 的一个分支，一个从来没有跟上 Cygwin 发展的分支，目前已不活跃，如果有选择，请选择 MSYS2。&lt;/p&gt;
&lt;p&gt;MSYS2 是 MSYS 的一个升级版，它集成了 pacman 和 &lt;a class="reference external" href="http://mingw-w64.org/"&gt;Mingw-w64&lt;/a&gt; 的 Cygwin 升级版, 提供了 Bash 等 Linux 环境、版本控制软件（Git/hg）和 MinGW-w64 工具链。
它是由 mingw-builds 团队（也是MinGW-w64工具链的官方包装商）的 Alexey Pavlov 开发的一个项目，密切更新到最新的 Cygwin，使其不会过时。&lt;/p&gt;
&lt;p&gt;MSYS2 不完全是基于 MinGW 的，至少其原生工具都是链接到自带的一套特定版本的 Cygwin DLL ，基本上只是用 libalpm 管理 MSYS2、MinGW-w64 和 MinGW 三个不同子系统的软件包。
Cygwin、MSYS 和 Git for Windows（前称 msysgit）里各有一套 Cygwin DLL 而且互不兼容，而 MinGW 那两个子系统都不需要链接到任何版本的 Cygwin DLL。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="windows-subsystem-for-linux"&gt;
&lt;h3&gt;&lt;a class="reference external" href="https://docs.microsoft.com/en-us/windows/wsl/about"&gt;Windows Subsystem for Linux&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;下载安装都很容易，可以在 Windows Store 下载，其中的坑在评论中都已解决。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;用户可以使用 Linux 常见工具：grep, sed, awk, Bash, vim, emacs, tmux 等&lt;/li&gt;
&lt;li&gt;可以支持很多运行时：Javascript/node.js, Ruby, Python, C/C++, C# &amp;amp; F#, Rust, Go&lt;/li&gt;
&lt;li&gt;以及很多 Linux 的服务端软件：sshd, MySQL, Apache, lighttpd&lt;/li&gt;
&lt;li&gt;还可以使用包管理器，如 apt-get 等&lt;/li&gt;
&lt;li&gt;支持 Linux 和 Windows 程序的双向调用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我有安装过 WSL Ubuntu，其性能不高，图形包等并未尝试，相比虚拟机，觉得目前不具太大意义。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;总的来说，本文讲了 Windows 下用 Linux 的两个例子，再总结了一些 Windows 下 使用 Linux 的方法，整体内容很多。&lt;/p&gt;
&lt;p&gt;最后来说，一个更好的方案可能是一台高配 macOS 运行 Parallels Desktop，再其中运行 Windows ;)&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technology"></category><category term="Windows"></category><category term="Linux"></category><category term="Jekyll"></category><category term="Ruby"></category><category term="MSYS2"></category><category term="Vibora"></category><category term="Cygwin"></category><category term="MinGW"></category><category term="Virtualpc"></category><category term="VMWare"></category><category term="Docker"></category><category term="MSYS"></category><category term="msysgit"></category></entry><entry><title>为博客添加评论系统</title><link href="https://kaffa.im/add-comments-system-to-my-blog.html" rel="alternate"></link><published>2018-08-10T12:20:00+08:00</published><updated>2018-08-10T12:20:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-08-10:/add-comments-system-to-my-blog.html</id><summary type="html">&lt;p class="first last"&gt;为博客添加评论系统&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;评论系统&lt;/h2&gt;
&lt;p&gt;通俗地说，不同人在一起评论一个事时，就像对混沌系统作预测，最可能的结果就是一团糟。
好在评论系统有效的过滤了人群，原来的多说，网易云跟帖，以及被蔷的 &lt;a class="reference external" href="https://www.disqus.com/"&gt;Disqus&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;时下，如果想欣赏真正的“杠精”，要去“即刻”看评论，去网易新闻看跟帖；因为 &lt;a class="reference external" href="https://www.disqus.com/"&gt;Disqus&lt;/a&gt; 不存在，
Google &lt;a class="reference external" href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt; 方案也不存在，那 GitHub 静态博客的评论，就剩下几个为数不多的免费方案，
例如 &lt;a class="reference external" href="https://github.com/imsun/gitment"&gt;Gitment&lt;/a&gt; 和 &lt;a class="reference external" href="https://github.com/gitalk/gitalk"&gt;Gitalk&lt;/a&gt;，gitment 是鼻祖，gitalk 是后来者，看起来两者差不太多，
相当于利用 GitHub 应用授权 api 编写了一个跨域提 issue 的客户端。&lt;/p&gt;
&lt;p&gt;论安全性，这种做法的安全前提是服务端对提交信息的安全验证，且有人已提交一个次级域名利用方式。
但我相信伪造评论、越权访问普通人的私有库并无太大价值，这其中只见伤害，并无收益。
所以，这种安全性是可以定为相对安全。&lt;/p&gt;
&lt;p&gt;在“深网”的世界里，人性恶的一面使然，什么都会发生，如果完全不限安全，多少有一些理想主义，
但可以相信人性也有善面，在软件的世界里，建造永远比破坏更难，建造是一个工程，而破坏只是一次行动。&lt;/p&gt;
&lt;p&gt;为 Pelican 添加 Gitalk 评论系统最简单的方式，莫过于在 &lt;tt class="docutils literal"&gt;theme\templates\article.html&lt;/tt&gt; 中直接修改，
亦或编写一个 Pelican 插件，实现 &lt;a class="reference external" href="http://docs.getpelican.com/en/stable/plugins.html#list-of-signals"&gt;article_generator_finalized&lt;/a&gt; signal，
读取 clientID 和 clientSecret 等配置在文后插入，如果手动插入，则是在 &lt;tt class="docutils literal"&gt;&amp;lt;/article&amp;gt;&lt;/tt&gt; 之前:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;div id=&amp;quot;gitalk-container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://unpkg.com/gitalk/dist/gitalk.css&amp;quot;&amp;gt;
&amp;lt;script src=&amp;quot;https://unpkg.com/gitalk/dist/gitalk.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script&amp;gt;
var gitalk = new Gitalk({
    clientID: 'your client id here',
    clientSecret: 'your client secret here',
    repo: 'kaffa.github.io',
    owner: 'kaffa',
    admin: ['kaffa'],
    id: location.pathname.substr(0, 50),
    distractionFreeMode: false
});
gitalk.render('gitalk-container');
&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;想为 Pelican 添加 Gitalk 评论的人，如果遇到问题，可以本文 issue 我，网上并不容易找着傻瓜教程。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;博客历史&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;2018-06-06，博客启动，添加域名 &lt;a class="reference external" href="https://kaffa.im"&gt;https://kaffa.im&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2018-08-07，&lt;a class="reference external" href="https://github.com/MrSenko/pelican-octopress-theme"&gt;octopress 主题&lt;/a&gt; 中文化：&lt;a class="reference external" href="https://github.com/kaffa/pelican-octopress-theme-cn"&gt;pelican-octopress-theme-cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2018-08-10，添加 gitalk 评论系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Life"></category><category term="My Blog"></category><category term="Pelican"></category><category term="Gitalk"></category><category term="Gitment"></category></entry><entry><title>更新博客主题</title><link href="https://kaffa.im/update-my-new-blog-s-theme.html" rel="alternate"></link><published>2018-08-07T08:20:00+08:00</published><updated>2018-08-07T08:20:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-08-07:/update-my-new-blog-s-theme.html</id><summary type="html">&lt;p class="first last"&gt;更新博客主题&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;关于本博客&lt;/h2&gt;
&lt;p&gt;2018-06-06，开始这个新博客&lt;/p&gt;
&lt;p&gt;2018-08-07，转眼间两个月了，原先使用的 &lt;a class="reference external" href="https://github.com/MrSenko/pelican-octopress-theme"&gt;octopress 主题&lt;/a&gt; 也发现一些样式上的缺陷，于是抽空对它做了中文化。地址见:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pelican-octopress-theme-cn_
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="Life"></category><category term="My Blog"></category><category term="Pelican Octopress Theme"></category><category term="pelican-octopress-theme-cn"></category></entry><entry><title>Windows 下 Node 的路径配置</title><link href="https://kaffa.im/config-nodejs-path-in-windows.html" rel="alternate"></link><published>2018-08-06T22:00:00+08:00</published><updated>2018-08-06T22:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-08-06:/config-nodejs-path-in-windows.html</id><summary type="html">&lt;p class="first last"&gt;本文描述 Windows 下 nodejs 的路径配置问题，也涉及 Windows 路径的说明&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="windows-nodejs"&gt;
&lt;h2&gt;在 Windows 下安装 nodejs&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;浏览器打开 nodejs 官方网站 &lt;a class="reference external" href="https://nodejs.org/"&gt;https://nodejs.org/&lt;/a&gt;，选择 LTS 或者 Current 版本。&lt;/li&gt;
&lt;li&gt;用下载软件（如迅雷）下载目前的最新版 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;https://nodejs.org/dist/v10.8.0/node-v10.8.0-x64.msi&lt;/span&gt;&lt;/tt&gt;，下载到本地后，双击安装。&lt;/li&gt;
&lt;li&gt;个人推荐将运行时安装在根路径下，因为当需要进入运行时目录查看时，每次会比进入 Program Files 少进一层，这样可以节省时间。我的安装目录是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\nodejs&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;在 Windows 下配置 nodejs&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;至此 nodejs 就已经安装好了，其中 npm 是 nodejs 的包管理器，此时已经在 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\nodejs\node_modules\npm&lt;/span&gt;&lt;/tt&gt; 之下&lt;/li&gt;
&lt;li&gt;然后在 Windows 下 nodejs 还需要配置两个重要的路径：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一个是 node_global，这个目录用来放全局安装命令 &lt;tt class="docutils literal"&gt;npm install [PACKAGE_NAME] &lt;span class="pre"&gt;-g&lt;/span&gt;&lt;/tt&gt; 安装的包，通常将很多基础的共用包可以安装到这个目录，例如 nw&lt;/p&gt;
&lt;p&gt;一个是 node_cache，这个目录是 node 缓存&lt;/p&gt;
&lt;p&gt;我们用 &lt;tt class="docutils literal"&gt;npm install [PACKAGE_NAME]&lt;/tt&gt; 命令安装的内容，会安装在每个目录下，这就是 node 来管理依赖的方式。&lt;/p&gt;
&lt;p&gt;运行下面命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
C:\&amp;gt;cd nodejs
C:\nodejs&amp;gt;mkdir node_global
C:\nodejs&amp;gt;mkdir node_cache
C:\nodejs&amp;gt;npm config set prefix &amp;quot;C:\nodejs\node_global&amp;quot;
C:\nodejs&amp;gt;npm config set cache &amp;quot;C:\nodejs\node_cache&amp;quot;
&lt;/pre&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;配置环境变量 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;NODE_PATH=C:\nodejs\&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;在 PATH 中 加入 &lt;tt class="docutils literal"&gt;%NODE_PATH%&lt;/tt&gt; 和 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;%NODE_PATH%\node_global&lt;/span&gt;&lt;/tt&gt;，顺便推荐使用 &lt;a class="reference external" href="https://www.rapidee.com"&gt;Rapid Environment Editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;至此，Windows 下的 nodejs 配置完毕&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;补充说明&lt;/h2&gt;
&lt;p&gt;本文推荐的路径是最简单的方法，下面对 Windows 路径本身的机制加以说明:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
1. 应用数据全局目录：C:\ProgramData\
2. 应用数据用户目录：C:\Users\USER_NAME\AppData\Roaming\
3. 用户根目录：C:\Users\USER_NAME\
4. 64位程序目录：C:\Program Files\，非管理员权限不可写
5. 32位程序目录：C:\Program Files (x86)\，非管理员权限不可写
&lt;/pre&gt;
&lt;p&gt;如果 npm 出现警告 &lt;tt class="docutils literal"&gt;Missing write access&lt;/tt&gt;，接着出现错误 &lt;tt class="docutils literal"&gt;npm ERR! code ENOENT&lt;/tt&gt;，则和上述权限有关，这里的 ENOENT 是 Error NO ENTry 的意思:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pm WARN checkPermissions Missing write access
...
npm ERR! code ENOENT
npm ERR! errno -2
npm ERR! syscall access
npm ERR! enoent ENOENT: no such file or directory, access '/usr/local/lib/node_modules/webpack/node_modules/[XXX]'
npm ERR! enoent This is related to npm not being able to find a file.
npm ERR! enoent
&lt;/pre&gt;
&lt;p&gt;如果忘记将 nodejs 放入PATH，那么可能会出现以下错误提示，因为程序调用 node 时， Windows 找不到 node.exe 或 node.cmd 或 node.bat:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'node' 不是内部或外部命令，也不是可运行的程序或批处理文件
&lt;/pre&gt;
&lt;p&gt;另外，当然也可以参考官方文档 &lt;a class="reference external" href="https://docs.npmjs.com/files/folders"&gt;npm-folders&lt;/a&gt;，但可能有更新不及时，node 社区还年轻且贡献者有很多个人，有时并不太照顾 Windows 平台，这点不比 python 社区发展了那么久，且那么多机构贡献者。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technology"></category><category term="Node"></category><category term="Node.js"></category><category term="Windows"></category><category term="Path"></category></entry><entry><title>关于 NW.js 与 Electron 的技术选择</title><link href="https://kaffa.im/nwjs-and-electron-how-to-choose.html" rel="alternate"></link><published>2018-08-06T12:00:00+08:00</published><updated>2018-08-06T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-08-06:/nwjs-and-electron-how-to-choose.html</id><summary type="html">&lt;p class="first last"&gt;本文顺便写上 NW.js 与 Electron 的技术选择和一些无关的文字&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;技术选择&lt;/h2&gt;
&lt;p&gt;这么多年，我很少写技术博文，通常记录的目的都是归于实用，即遇到一个问题，然后给予解决。原则是，不从问题作无止的延伸，但给予一个清晰的解答。之所以有此原则，是因实用主义，因生命有限，无法耗时在细节上，细节是熵递增，与生命的目的刚好相反。&lt;/p&gt;
&lt;p&gt;那么我们从怎样的方法论去讨论技术选择问题呢？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;NW.js 与 Electron&lt;/h2&gt;
&lt;p&gt;在两者的选择之间：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;从目前来看，选择 Electron&lt;/li&gt;
&lt;li&gt;从目前来看，根据场景，大多时候选择 Electron 即可，特殊情况，选择合适的即可。&lt;/li&gt;
&lt;li&gt;而 Electron 和 NW.js，当你充分了解它们时，它们有区别？又或则不能选其他？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于两种跨平台技术的选择，说完了？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;选择的法门&lt;/h2&gt;
&lt;p&gt;因人的思维本质，因那个创造者，那个“神”、“神性”、“中心”而具共性。“法门”的表述可能不同，但内核相似，主要是人的思维和意识相似共性。&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;初遇技术选择的问题&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;儿时父母初教：“你记下，当人对你说‘你好’时，你就答一句‘你好’”，这叫，习得的问题解决方案。&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;反复遇到相同技术选择的问题&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;生活中，遇到很多人对你说“你好”，回答开始可能是“你好”，但后面也会根据具体情境给不同回答。&lt;/p&gt;
&lt;p&gt;例如，对陌生人回答“你是谁？”，对密友回答“你好个P，你脑子坏了！”，对客户答“你好你好你好！”&lt;/p&gt;
&lt;p&gt;你会发现，进入场景，戴上身份后，你好的回答并不只是你好，会根据不同而进行“恰当”回答了。&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;无数技术选择后，眼里不再有问题时&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你会发现一句淡定的回答“你好”，其实还是儿时那句“你好”，竟是所有“你好”的回答。&lt;/p&gt;
&lt;p&gt;你也许听过：&lt;/p&gt;
&lt;blockquote&gt;
第一重境界：昨夜西风凋碧树。独上高楼，望尽天涯路；
第二重境界：衣带渐宽终不悔，为伊消得人憔悴；
第三重境界：众里寻他千百度，蓦然回首，那人却在灯火阑珊处。&lt;/blockquote&gt;
&lt;p&gt;也许还听过：&lt;/p&gt;
&lt;blockquote&gt;
看山是山，看山不是山，看山还是山。&lt;/blockquote&gt;
&lt;p&gt;也许还听过：&lt;/p&gt;
&lt;blockquote&gt;
非有，非无，非有非无。&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;心理学&lt;/h2&gt;
&lt;p&gt;人会从各个视角对世界给予解释，其实是人的大脑生物机制本身决定的，动物脑以及灵性脑，感性与理性，象与骑象人的对话，你的骑象人总在回答（大多是解释）你的大象，而一旁的观察者很关键。&lt;/p&gt;
&lt;p&gt;此处，象即1，骑象人即2，观察者即3；象即问题的直接答案，骑象人即问题的周全答案，而观察者眼里并没有问和答，它归于沉默。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;其实已经说完了&lt;/h2&gt;
&lt;p&gt;四维生物，二不行，但三基本就够了。其实已经说完了。&lt;/p&gt;
&lt;p&gt;“人往往需要说很多话，然后才能归入潜默。” 是有此篇。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technology"></category><category term="Psychology"></category><category term="Philosophy"></category><category term="NW.js"></category><category term="Electron"></category></entry><entry><title>关于文本二维码这件小事</title><link href="https://kaffa.im/a-story-about-text-qrcode.html" rel="alternate"></link><published>2018-07-27T12:00:00+08:00</published><updated>2018-07-27T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-07-27:/a-story-about-text-qrcode.html</id><summary type="html">&lt;p class="first last"&gt;本文随意聊聊文本二维码&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;文本二维码&lt;/h2&gt;
&lt;p&gt;简单讲，二维码是一个算法，可以把信息编码为0和1，也就是白和黑，也就是常见的二维码。大多情况下，二维码用一个方形的图片表达，可以跨各种介质传播。&lt;/p&gt;
&lt;p&gt;但由于一个很特殊的软件，我们有将二维码从远程机器传递到本地文本终端的需求。因此，引出了文本二维码这个议题:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
█ ▄▄▄▄▄ █▀▄█▀ █▀ █▀█▄▀█ ▄▄▄▄▄ █
█ █   █ █▄   ▄▀ ▀▄▄█▀▀█ █   █ █
█ █▄▄▄█ █ ▀█▀█▄█▀   ▀▀█ █▄▄▄█ █
█▄▄▄▄▄▄▄█ ▀▄█ █ ▀▄▀▄▀ █▄▄▄▄▄▄▄█
█▄▄█▄▀▀▄▄▀█ ▀█▀ ▀ ▀█▄█▀ ▄▄▀▄▄▀█
█ ▀▀▀▄▀▄ █▄▄██ ██ ▄ ▄▄  ▄ ▄  ██
█▄ ▄███▄███▀▀ █▀▀█▄█  ▀▄██▄█▄▄█
██▄▄ ▄█▄ ▄▀██ ▀▀█ ▀▀▀▄ ▀██ ▄ ▄█
█▄▀▀▄▄ ▄▄▄ ▀▄██▄█▄ ██▄▄▀▀█▀█▄▀█
█▄█▄▀▀ ▄▀▄█▄▀██▀█▄▀▀█▄▄▄▄▀██  █
█▄██▄▄▄▄█  ▀  ▄▀█ █▄▄ ▄▄▄ █ ▀▀█
█ ▄▄▄▄▄ █▄█▄   █▀▀▄▀█ █▄█ ▀▀ ▀█
█ █   █ █▀▄▄ █▀▄█▀▄█▀▄▄   ▀▀▀██
█ █▄▄▄█ █▀ █ █▄▄█▀ █▀ ██▀▄▄▄▀▄█
█▄▄▄▄▄▄▄█▄█▄█▄▄█▄█▄▄█▄▄█▄█▄█▄██
&lt;/pre&gt;
&lt;p&gt;上述即一个文本二维码，通常两行一列编码为一个半角字符，这个二维码的显示需要两个前提：&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;等宽字符，例如 Lucida Console&lt;/li&gt;
&lt;li&gt;行间距尽量小，让整体显示为正方形&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然，能否扫描出结果，也取决于扫描时的容差。&lt;/p&gt;
&lt;p&gt;在 Windows 平台，如果终端控制台中出现文本二维码散乱情况，请调整控制台字体为等宽字体，或者打开记事本，字体选择为：Lucida Console 5号字，再进行全选，即可显示出可扫描的二维码。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technology"></category><category term="QRCode"></category><category term="Text QRCode"></category></entry><entry><title>在 Windows 10 下安装 Wechaty</title><link href="https://kaffa.im/wechaty-installation-on-windows-10.html" rel="alternate"></link><published>2018-07-24T12:00:00+08:00</published><updated>2018-07-24T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-07-24:/wechaty-installation-on-windows-10.html</id><summary type="html">&lt;p class="first last"&gt;本文描述 Windows 下安装 Wechaty 的细节&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;介绍&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/Chatie/wechaty"&gt;Wechaty&lt;/a&gt; 是一个对话机器人软件开发包，它可以帮你用 6 行 JavaScript 代码实现一个微信个人账号。由于使用 node 技术，它支持 Linux、Windows、macOS 平台和 Docker 容器。它的安装过程和其它 node 包类似，首先 &lt;tt class="docutils literal"&gt;git clone&lt;/tt&gt; 源代码，再使用 node 的 npm 命令 &lt;tt class="docutils literal"&gt;npm install &amp;amp; npm start&lt;/tt&gt; 实现开箱即用，同时官方也提供了入门案例：&lt;a class="reference external" href="https://github.com/Chatie/wechaty-getting-started"&gt;Wechaty getting started&lt;/a&gt;。而在国内，实际安装过程中可能会因某些软件依赖的原因遇到问题，本文记录了安装过程中可能会出现的错误及解决办法，下面描述详细的步骤和说明：&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;概念&lt;/h3&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/Chatie/wechaty"&gt;Wechaty&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;项目地址&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/Chatie/wechaty-getting-started"&gt;Wechaty Getting Started&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Wechaty 起步&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://chatie.io/wechaty/"&gt;Wechaty Documents&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Wechaty 文档&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/Chatie/wechaty/wiki/Puppet"&gt;Puppet&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;一个包含了机器人对话逻辑的抽象类，是 Wechaty 技术架构的一部分。继承实现 Puppet 抽象类（协议）的组件，即可实现更广泛的与联系人、消息/一对一对话、群组/聊天室/多对多对话等相关逻辑。Puppet 的中文是木偶，用在这里相当传神。&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://www.npmjs.com/package/node-gyp"&gt;node-gyp&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;基于 gyp 编写的用来编译 node 本地扩展模块的 node 包，而 gpy 是 Chromium 项目上用于实现跨平台编译的工具。
安装文档：&lt;a class="reference external" href="https://github.com/nodejs/node-gyp#installation"&gt;https://github.com/nodejs/node-gyp#installation&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://www.npmjs.com/package/windows-build-tools"&gt;windows-build-tools&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;node 包装的 Windows 平台的编译工具
安装文档：&lt;a class="reference external" href="https://github.com/felixrieseberg/windows-build-tools"&gt;https://github.com/felixrieseberg/windows-build-tools&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://www.npmjs.com/package/node-expat"&gt;node-expat&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;基于 &lt;a class="reference external" href="https://libexpat.github.io/"&gt;libexpat&lt;/a&gt; 的用来处理 XML 的 node 包，libexpat 是一个号称最快的 XML 解析库，纯 C 语言编写。Wechaty 使用它解析基于 XML 的通讯。
安装文档：&lt;a class="reference external" href="https://www.npmjs.com/package/node-expat"&gt;https://www.npmjs.com/package/node-expat&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://www.python.org/downloads/"&gt;Python 2.7&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;一门愈久弥新的语言，node-gyp 的依赖 Python 2.7 实现跨平台编译&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://github.com/GoogleChrome/puppeteer"&gt;puppeteer&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;可编程的 Google Chrome， Google Chrome 团队官方出品。&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="https://www.chromium.org/"&gt;Chromium&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;puppeteer 依赖一个特定的 Chromium 版本，Chrome 就是 开源 Chromium + Google 开发的闭源的扩展包。&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;安装步骤&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;下载 Wechaty 源代码&lt;/li&gt;
&lt;li&gt;安装依赖，配置&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;npm install &amp;amp; npm start&lt;/tt&gt; 启动&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;详细步骤&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;下载 Wechaty 源代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先我们建立源代码目录，本文使用 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;D:\code&lt;/span&gt;&lt;/tt&gt;。如果你使用了其他目录，在后文中作相应的替换即可。
让我们从入门项目开始，运行以下命令下载，并进入项目目录:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git clone https://github.com/lijiarui/wechaty-getting-started.git
cd wechaty-getting-started
&lt;/pre&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;安装依赖&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;首先安装 &lt;strong&gt;node-v10.x.x&lt;/strong&gt;。在 Windows 下，推荐使用官方提供的安装包，截至本文最新 64 位系统安装包是：&lt;a class="reference external" href="https://nodejs.org/dist/v10.7.0/node-v10.7.0-x64.msi"&gt;https://nodejs.org/dist/v10.7.0/node-v10.7.0-x64.msi&lt;/a&gt;，如果网速不够，建议使用迅雷下载。&lt;/p&gt;
&lt;p&gt;除了 node-v10 ，Wechaty 也依赖其它软件，而由于众所周知的网络原因，安装它们并不会太顺利。&lt;/p&gt;
&lt;p&gt;此时，如果运行 &lt;tt class="docutils literal"&gt;npm install &amp;amp; npm start&lt;/tt&gt;，会报以下错误:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Microsoft Windows [版本 10.0.16299.492]
(c) 2017 Microsoft Corporation。保留所有权利。


D:\code&amp;gt;cd wechaty-getting-started

D:\code\wechaty-getting-started&amp;gt;npm install
npm notice created a lockfile as package-lock.json. You should commit this file.
added 134 packages from 94 contributors and audited 324 packages in 22.581s
found 0 vulnerabilities


D:\code\wechaty-getting-started&amp;gt;npm start

&amp;gt; wechaty-getting-started&amp;#64;0.1.0 start D:\code\wechaty-getting-started
&amp;gt; node examples/starter-bot.js

01:59:34 INFO Wechaty &amp;lt;default&amp;gt; start() v0.18.5 is starting...
01:59:34 INFO Wechaty initPuppet() using puppet: default
01:59:34 INFO PuppetConfig installPuppet(wechaty-puppet-puppeteer&amp;#64;^0.4.2) please wait ...
npm:
&amp;gt; node-expat&amp;#64;2.3.16 install D:\code\wechaty-getting-started\node_modules\wechaty\node_modules\node-expat
&amp;gt; node-gyp rebuild


npm:
D:\code\wechaty-getting-started\node_modules\wechaty\node_modules\node-expat&amp;gt;if not defined npm_config_node_gyp (node &amp;quot;D:\Program Files\nodejs\node_modules\npm\node_modules\npm-lifecycle\node-gyp-bin\\..\..\node_modules\node-gyp\bin\node-gyp.js&amp;quot; rebuild )  else (node &amp;quot;D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\bin\node-gyp.js&amp;quot; rebuild )

npm: gyp
npm:  ERR! configure error
gyp ERR! stack Error: Can't find Python executable &amp;quot;C:\Python36\python.EXE&amp;quot;, you can set the PYTHON env variable.
gyp ERR! stack     at PythonFinder.failNoPython (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:483:19)
gyp ERR! stack     at PythonFinder.&amp;lt;anonymous&amp;gt; (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:508:16)
gyp ERR! stack     at D:\Program Files\nodejs\node_modules\npm\node_modules\graceful-fs\polyfills.js:284:29
gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:158:21)
gyp ERR! System Windows_NT 10.0.16299

npm: gyp ERR! command &amp;quot;D:\\Program Files\\nodejs\\node.exe&amp;quot; &amp;quot;D:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js&amp;quot; &amp;quot;rebuild&amp;quot;
gyp ERR! cwd D:\code\wechaty-getting-started\node_modules\wechaty\node_modules\node-expat
gyp ERR! node -v v10.7.0
gyp ERR! node-gyp -v v3.6.2
gyp ERR! not ok

npm: npm WARN
npm:  wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of brolog&amp;#64;^1.6.5 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of file-box&amp;#64;^0.8.22 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of hot-import&amp;#64;^0.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of lru-cache&amp;#64;^4.1.3 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of qr-image&amp;#64;^3.2.0 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of promise-retry&amp;#64;^1.1.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rxjs&amp;#64;^6.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rx-queue&amp;#64;^0.4.26 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of state-switch&amp;#64;^0.6.2 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of watchdog&amp;#64;^0.8.10 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of wechaty-puppet&amp;#64;^0.6.4 but none is installed. You must install peer dependencies yourself.


npm: npm ERR!
npm:  code ELIFECYCLE
npm ERR! errno 1
npm ERR! node-expat&amp;#64;2.3.16 install: `node-gyp rebuild`
npm ERR! Exit status 1

npm: npm ERR!
npm ERR! Failed at the node-expat&amp;#64;2.3.16 install script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm:
npm
npm:  ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\username\AppData\Roaming\npm-cache\_logs\2018-07-22T17_59_53_633Z-debug.log

01:59:53 ERR PupptConfig puppetResolver(default) install fail: Command failed: npm install wechaty-puppet-puppeteer&amp;#64;^0.4.2
gyp ERR! configure error
gyp ERR! stack Error: Can't find Python executable &amp;quot;C:\Python36\python.EXE&amp;quot;, you can set the PYTHON env variable.
gyp ERR! stack     at PythonFinder.failNoPython (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:483:19)
gyp ERR! stack     at PythonFinder.&amp;lt;anonymous&amp;gt; (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:508:16)
gyp ERR! stack     at D:\Program Files\nodejs\node_modules\npm\node_modules\graceful-fs\polyfills.js:284:29
gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:158:21)
gyp ERR! System Windows_NT 10.0.16299
gyp ERR! command &amp;quot;D:\\Program Files\\nodejs\\node.exe&amp;quot; &amp;quot;D:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js&amp;quot; &amp;quot;rebuild&amp;quot;
gyp ERR! cwd D:\code\wechaty-getting-started\node_modules\wechaty\node_modules\node-expat
gyp ERR! node -v v10.7.0
gyp ERR! node-gyp -v v3.6.2
gyp ERR! not ok
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of brolog&amp;#64;^1.6.5 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of file-box&amp;#64;^0.8.22 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of hot-import&amp;#64;^0.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of lru-cache&amp;#64;^4.1.3 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of qr-image&amp;#64;^3.2.0 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of promise-retry&amp;#64;^1.1.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rxjs&amp;#64;^6.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rx-queue&amp;#64;^0.4.26 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of state-switch&amp;#64;^0.6.2 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of watchdog&amp;#64;^0.8.10 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of wechaty-puppet&amp;#64;^0.6.4 but none is installed. You must install peer dependencies yourself.

npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! node-expat&amp;#64;2.3.16 install: `node-gyp rebuild`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the node-expat&amp;#64;2.3.16 install script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\username\AppData\Roaming\npm-cache\_logs\2018-07-22T17_59_53_633Z-debug.log

{ Error: Command failed: npm install wechaty-puppet-puppeteer&amp;#64;^0.4.2
gyp ERR! configure error
gyp ERR! stack Error: Can't find Python executable &amp;quot;C:\Python36\python.EXE&amp;quot;, you can set the PYTHON env variable.
gyp ERR! stack     at PythonFinder.failNoPython (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:483:19)
gyp ERR! stack     at PythonFinder.&amp;lt;anonymous&amp;gt; (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:508:16)
gyp ERR! stack     at D:\Program Files\nodejs\node_modules\npm\node_modules\graceful-fs\polyfills.js:284:29
gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:158:21)
gyp ERR! System Windows_NT 10.0.16299
gyp ERR! command &amp;quot;D:\\Program Files\\nodejs\\node.exe&amp;quot; &amp;quot;D:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js&amp;quot; &amp;quot;rebuild&amp;quot;
gyp ERR! cwd D:\code\wechaty-getting-started\node_modules\wechaty\node_modules\node-expat
gyp ERR! node -v v10.7.0
gyp ERR! node-gyp -v v3.6.2
gyp ERR! not ok
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of brolog&amp;#64;^1.6.5 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of file-box&amp;#64;^0.8.22 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of hot-import&amp;#64;^0.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of lru-cache&amp;#64;^4.1.3 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of qr-image&amp;#64;^3.2.0 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of promise-retry&amp;#64;^1.1.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rxjs&amp;#64;^6.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rx-queue&amp;#64;^0.4.26 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of state-switch&amp;#64;^0.6.2 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of watchdog&amp;#64;^0.8.10 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of wechaty-puppet&amp;#64;^0.6.4 but none is installed. You must install peer dependencies yourself.

npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! node-expat&amp;#64;2.3.16 install: `node-gyp rebuild`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the node-expat&amp;#64;2.3.16 install script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\username\AppData\Roaming\npm-cache\_logs\2018-07-22T17_59_53_633Z-debug.log

    at ChildProcess.exithandler (child_process.js:291:12)
    at ChildProcess.emit (events.js:182:13)
    at ChildProcess.EventEmitter.emit (domain.js:442:20)
    at maybeClose (internal/child_process.js:961:16)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:248:5)
killed: false,
code: 1,
signal: null,
cmd: 'npm install wechaty-puppet-puppeteer&amp;#64;^0.4.2 ' }
01:59:53 ERR Wechaty start() exception: Command failed: npm install wechaty-puppet-puppeteer&amp;#64;^0.4.2
gyp ERR! configure error
gyp ERR! stack Error: Can't find Python executable &amp;quot;C:\Python36\python.EXE&amp;quot;, you can set the PYTHON env variable.
gyp ERR! stack     at PythonFinder.failNoPython (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:483:19)
gyp ERR! stack     at PythonFinder.&amp;lt;anonymous&amp;gt; (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:508:16)
gyp ERR! stack     at D:\Program Files\nodejs\node_modules\npm\node_modules\graceful-fs\polyfills.js:284:29
gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:158:21)
gyp ERR! System Windows_NT 10.0.16299
gyp ERR! command &amp;quot;D:\\Program Files\\nodejs\\node.exe&amp;quot; &amp;quot;D:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js&amp;quot; &amp;quot;rebuild&amp;quot;
gyp ERR! cwd D:\code\wechaty-getting-started\node_modules\wechaty\node_modules\node-expat
gyp ERR! node -v v10.7.0
gyp ERR! node-gyp -v v3.6.2
gyp ERR! not ok
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of brolog&amp;#64;^1.6.5 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of file-box&amp;#64;^0.8.22 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of hot-import&amp;#64;^0.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of lru-cache&amp;#64;^4.1.3 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of qr-image&amp;#64;^3.2.0 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of promise-retry&amp;#64;^1.1.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rxjs&amp;#64;^6.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rx-queue&amp;#64;^0.4.26 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of state-switch&amp;#64;^0.6.2 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of watchdog&amp;#64;^0.8.10 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of wechaty-puppet&amp;#64;^0.6.4 but none is installed. You must install peer dependencies yourself.

npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! node-expat&amp;#64;2.3.16 install: `node-gyp rebuild`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the node-expat&amp;#64;2.3.16 install script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\username\AppData\Roaming\npm-cache\_logs\2018-07-22T17_59_53_633Z-debug.log

{ Error: Command failed: npm install wechaty-puppet-puppeteer&amp;#64;^0.4.2
gyp ERR! configure error
gyp ERR! stack Error: Can't find Python executable &amp;quot;C:\Python36\python.EXE&amp;quot;, you can set the PYTHON env variable.
gyp ERR! stack     at PythonFinder.failNoPython (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:483:19)
gyp ERR! stack     at PythonFinder.&amp;lt;anonymous&amp;gt; (D:\Program Files\nodejs\node_modules\npm\node_modules\node-gyp\lib\configure.js:508:16)
gyp ERR! stack     at D:\Program Files\nodejs\node_modules\npm\node_modules\graceful-fs\polyfills.js:284:29
gyp ERR! stack     at FSReqWrap.oncomplete (fs.js:158:21)
gyp ERR! System Windows_NT 10.0.16299
gyp ERR! command &amp;quot;D:\\Program Files\\nodejs\\node.exe&amp;quot; &amp;quot;D:\\Program Files\\nodejs\\node_modules\\npm\\node_modules\\node-gyp\\bin\\node-gyp.js&amp;quot; &amp;quot;rebuild&amp;quot;
gyp ERR! cwd D:\code\wechaty-getting-started\node_modules\wechaty\node_modules\node-expat
gyp ERR! node -v v10.7.0
gyp ERR! node-gyp -v v3.6.2
gyp ERR! not ok
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of brolog&amp;#64;^1.6.5 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of file-box&amp;#64;^0.8.22 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of hot-import&amp;#64;^0.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of lru-cache&amp;#64;^4.1.3 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of qr-image&amp;#64;^3.2.0 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of promise-retry&amp;#64;^1.1.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rxjs&amp;#64;^6.2.1 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of rx-queue&amp;#64;^0.4.26 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of state-switch&amp;#64;^0.6.2 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of watchdog&amp;#64;^0.8.10 but none is installed. You must install peer dependencies yourself.
npm WARN wechaty-puppet-puppeteer&amp;#64;0.4.2 requires a peer of wechaty-puppet&amp;#64;^0.6.4 but none is installed. You must install peer dependencies yourself.

npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! node-expat&amp;#64;2.3.16 install: `node-gyp rebuild`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the node-expat&amp;#64;2.3.16 install script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\username\AppData\Roaming\npm-cache\_logs\2018-07-22T17_59_53_633Z-debug.log

    at ChildProcess.exithandler (child_process.js:291:12)
    at ChildProcess.emit (events.js:182:13)
    at ChildProcess.EventEmitter.emit (domain.js:442:20)
    at maybeClose (internal/child_process.js:961:16)
    at Process.ChildProcess._handle.onexit (internal/child_process.js:248:5)
killed: false,
code: 1,
signal: null,
cmd: 'npm install wechaty-puppet-puppeteer&amp;#64;^0.4.2 ' }

D:\code\wechaty-getting-started&amp;gt;
&lt;/pre&gt;
&lt;p&gt;通过阅读上述日志，分析依赖关系如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
wechaty-puppet-puppeteer --&amp;gt; node-expat --&amp;gt; node-gyp --&amp;gt; gyp --&amp;gt; Python 2.7 &amp;amp; Windows Build Tools
&lt;/pre&gt;
&lt;p&gt;所以，接下来要做的就是一一从依赖的最底层安装&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;安装 &lt;a class="reference external" href="https://www.python.org/downloads/"&gt;Python 2.7&lt;/a&gt; 至 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Python27\python.exe&lt;/span&gt;&lt;/tt&gt;，设置环境变量 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;PYTHON=C:\Python27\python.exe&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意 node-gyp 并不支持 Python 3.x，如果你安装了 Python 3.x，错误日志如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Can't find Python executable &amp;quot;C:\Python36\python.EXE&amp;quot;, you can set the PYTHON env variable.
&lt;/pre&gt;
&lt;p&gt;你可能会疑惑这个本来存在的 Python 3 路径，个人认为这个不准确错误提示可以算入 npm 包的 Bug&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;安装 &lt;a class="reference external" href="https://www.npmjs.com/package/windows-build-tools"&gt;windows-build-tools&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考 windows-build-tools 官方文档，有以下两种方式:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
1.Visual C++ Build Tools
2.Visual Studio 2017 / Visual Studio 2015
&lt;/pre&gt;
&lt;p&gt;我这里由于已经安装 Visual Studio 2017 社区版，所以没有尝试其他选项。这里的关键是需要一个 VC++ 编译器来编译 Windows 本地程序。选项1在微软官方地址已失效，不容易找到，npm 官方推荐了安装 Visual Studio 2015。
安装结束后，可以使用 &lt;tt class="docutils literal"&gt;npm install &lt;span class="pre"&gt;node-expat&lt;/span&gt;&lt;/tt&gt; 验证上述安装配置是否成功&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;安装 &lt;a class="reference external" href="https://github.com/GoogleChrome/puppeteer"&gt;puppeteer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于网络原因，puppeteer 依赖的 &lt;a class="reference external" href="https://www.chromium.org/"&gt;Chromium&lt;/a&gt; 并不能顺利安装。此时，我们可以借助一个阿里巴巴公司提供的 &lt;a class="reference external" href="https://npm.taobao.org/"&gt;cnpm&lt;/a&gt; 特色工具安装:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
npm install -g cnpm --registry=https://registry.npm.taobao.org
cnpm install puppeteer
&lt;/pre&gt;
&lt;p&gt;如果你遇到 &lt;tt class="docutils literal"&gt;Chromium revision is not downloaded.&lt;/tt&gt; 时，在解决办法中看到的设置 PUPPETEER_SKIP_CHROMIUM_DOWNLOAD 其实是一个误导，
这个选项并不能帮助你安装 puppeteer，而是让你在更新时不必每次都下载 Chromium 二进制。&lt;/p&gt;
&lt;p&gt;PS: 这里还有一个手动安装办法，但不推荐：可以手动下载 chromium 安装包，放在 /node_modules/puppeteer/.local-chromium/ 下，例如:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
D:\code\wechaty-getting-started\node_modules\_puppeteer&amp;#64;1.6.0&amp;#64;puppeteer\.local-chromium\win64-571375
&lt;/pre&gt;
&lt;p&gt;这个地址在 macOS 上如下，其中的数字可能不同:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
~/node_modules/puppeteer/.local-chromium/mac-526987/chrome-mac
&lt;/pre&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;.NET Framework 4.5.1 [仅 Windows Vista / 7 需要]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果 Windows Vista / 7 版本，则需要手动安装 .Net Framework&lt;/p&gt;
&lt;ol class="arabic" start="5"&gt;
&lt;li&gt;&lt;p class="first"&gt;如果使用的是 PadChat 组件的 Wechaty，且已有相应 token 则还需要设置以下几个环境变量:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
WECHATY_LOG=silly
WECHATY_PUPPET=padchat
WECHATY_PUPPET_PADCHAT_TOKEN=*YOUR-TOKEN*
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;至此，应该可以顺利运行起步项目:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
npm install &amp;amp; npm start
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;运行后，程序会在控制台窗口打开一个文本的二维码，在二维码下方是该二维码的网址。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你对扫描控制台的文本二维码遇到问题，可以参考我的 &lt;a class="reference external" href="https://kaffa.im/a-story-about-text-qrcode.html"&gt;一篇关于二维码的博文&lt;/a&gt;。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;由于已成功启动项目，所以我并没有在 Windows 7 系统 或 32 位机上进行配置，主要问题应该差不多。
解决办法基本上一一查阅上述出现错误的软件的文档，应该可以独立解决。&lt;/p&gt;
&lt;p&gt;当然，如果你遇到了任何其他问题，也欢迎 &lt;a class="reference external" href="https://github.com/kaffa"&gt;我的Github&lt;/a&gt; 上联系我。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technology"></category><category term="Wechaty"></category><category term="Node"></category><category term="Node.js"></category><category term="Open Source"></category></entry><entry><title>用 VSCode 预览 reStructureText 文件</title><link href="https://kaffa.im/preview-restructuretext-file-in-vscode.html" rel="alternate"></link><published>2018-07-18T12:30:00+08:00</published><updated>2018-07-18T12:30:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-07-18:/preview-restructuretext-file-in-vscode.html</id><summary type="html">&lt;p class="first last"&gt;本文描述用 VSCode 预览 reStructureText 文件的配置办法&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;通识&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;得益于拥抱开源，微软 VSCode 成为了最热门的 IDE，广泛用于各种场景的编程，比如编辑 reStructureText 文件。&lt;/li&gt;
&lt;li&gt;reStructureText 是 Python 官方文档的格式，属于 Sphinx 项目的一部分，Sphinx 是 Python 文档生成器。&lt;/li&gt;
&lt;li&gt;从 reStructureText 的文件格式 rst，方便转化为各种文件格式。&lt;/li&gt;
&lt;li&gt;MS Code 自带 reStructureText 插件，类似于 Markdown，安装后可以用于预览 rst 格式。&lt;/li&gt;
&lt;li&gt;可安装后并不能直接预览，还需要配置一番，于是就有了下面的部分&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;配置&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;依据 reStructureText 文档，先 pip 安装 doc8 和 sphinx&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;再上 MSCode 配置:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
// Points to the doc8 exectuable.
&amp;quot;restructuredtext.linter.executablePath&amp;quot;: &amp;quot;doc8&amp;quot;,
// Extra arguments to doc8.
&amp;quot;restructuredtext.linter.extraArgs&amp;quot;: [&amp;quot;--max-line-length 1024&amp;quot;],
// The full path of sphinx-build utility. This is an absolute path, and you can use ${workspaceRoot} to represent workspace root folder.
&amp;quot;restructuredtext.sphinxBuildPath&amp;quot;: &amp;quot;sphinx-build&amp;quot;,
// Flag to control whether text changed event triggers preview update.
&amp;quot;restructuredtext.updateOnTextChanged&amp;quot;: &amp;quot;true&amp;quot;,
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;在项目根目录下运行:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sphinx-quickstart
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一路回车下去，即生成了如下文件:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
_build
_static
_templates
conf.py
index.rst
make.bat
Makefile
&lt;/pre&gt;
&lt;p&gt;此时可以通过 Ctrl+Shift+R 来预览了&lt;/p&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;最后提供一份快速参考 &lt;a class="reference external" href="http://www.pythondoc.com/sphinx/rest.html"&gt;sphinx-rest&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="Technology"></category><category term="VSCode"></category><category term="reStructureText"></category></entry><entry><title>Windows 下安装 Wechaty 的注意点(keng)</title><link href="https://kaffa.im/install-wechaty-on-windows.html" rel="alternate"></link><published>2018-07-17T12:00:00+08:00</published><updated>2018-07-17T12:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-07-17:/install-wechaty-on-windows.html</id><summary type="html">&lt;p class="first last"&gt;本文描述 Windows 下安装 Wechaty 的注意点(keng)&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;摘要&lt;/h2&gt;
&lt;p&gt;本文对于在 Windows 下安装 &lt;a class="reference external" href="https://github.com/Chatie/wechaty"&gt;Wechaty&lt;/a&gt; 的坑作个临时记录，但其中涉及的处理方式随着项目的升级或依赖软件的升级可能会变得不再需要。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;说明&lt;/h2&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;升级到 Node 10&lt;/dt&gt;
&lt;dd&gt;与 node 有关的问题，那可能是因为 node 没有升级到 10 以上的版本，解决办法是在 nodejs.org 官方下载 10 以上的新版本。&lt;/dd&gt;
&lt;dt&gt;安装 Python 2.7&lt;/dt&gt;
&lt;dd&gt;因为 node-gyp 依赖 Python 2.7 和 windows-build-tools，node 在安装中多采用源代码编译安装，这种的好处是跨平台。
安装好 Python 2.7 以后，需要设置环境变量
PYTHON=c:\Python27\python.exe&lt;/dd&gt;
&lt;dt&gt;文本二维码&lt;/dt&gt;
&lt;dd&gt;QR 在移动世界盛行，但 Windows 依然缺少官方提供的文本二维码方案，控制台的文本二维码支持的不好，启动二维码以后，也许格式错乱无法扫描，此时可以复制张贴到记事本中，采用合适的等宽字体进行 &lt;strong&gt;反选&lt;/strong&gt; 扫描登录。&lt;/dd&gt;
&lt;dt&gt;puppeteer&lt;/dt&gt;
&lt;dd&gt;puppeteer 是 Google Chrome？&lt;/dd&gt;
&lt;dt&gt;ts-node&lt;/dt&gt;
&lt;dd&gt;如果采用 TypeScript 版本的 Wechaty，那么 ts-node 的路径在 wechaty\node_modules\.bin\ts-node 下。&lt;/dd&gt;
&lt;dt&gt;docker Wechaty&lt;/dt&gt;
&lt;dd&gt;如果使用 docker 版本的 Wechaty，那么需要升级 Windows 到 Proffesional 版。&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;吐槽&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;一般生产推荐使用 LTS 版本的 node ，可能很多人都不会安装 node 最新版，所以此处算是一坑，官方虽有提示，但不够醒目；&lt;/li&gt;
&lt;li&gt;已经 2018 年了，大部分库都用 six 支持了 Python 2 和 3 版本，很多人都转到 Python 3.6+，对于安装时出现 Python 相关的错误时，可能不会想到是 node-gyp 依赖 Python 2.7 的原因。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="Technology"></category><category term="Wechaty"></category><category term="Node"></category><category term="Node.js"></category></entry><entry><title>升级 CentOS Linux Kernel</title><link href="https://kaffa.im/update-centos-linux-kernel.html" rel="alternate"></link><published>2018-07-06T13:00:00+08:00</published><updated>2018-07-06T13:00:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-07-06:/update-centos-linux-kernel.html</id><summary type="html">&lt;p class="first last"&gt;本文描述升级 CentOS Linux Kernel 的方法&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;升级 CentOS Linux Kernel 的方法&lt;/h2&gt;
&lt;p&gt;升级命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
yum clean all
yum update
&lt;/pre&gt;
&lt;p&gt;查看 Kernel 版本命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
cat /etc/redhat-release
&lt;/pre&gt;
&lt;p&gt;升级前:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CentOS Linux release 7.4.1708 (Core)
&lt;/pre&gt;
&lt;p&gt;升级后:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CentOS Linux release 7.5.1804 (Core)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;升级 CentOS Linux Kernel 后要做的事&lt;/h2&gt;
&lt;p&gt;升级完成后，我的开机菜单变成了:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CentOS Linux (3.10.0-862.6.3.e17.x86_64) 7 (Core)
CentOS Linux (3.10.0-693.21.1.e17.x86_64) 7 (Core)
CentOS Linux (3.10.0-693.e17.x86_64) 7 (Core)
CentOS Linux (0-rescue-4a8a974112aw410ea531fd24c60220bf) 7 (Core)
&lt;/pre&gt;
&lt;p&gt;可以看到多出了一个选项外，依然包括旧版本 Kernel，少数几个也不妨碍什么，只是多占用一点硬盘空间。&lt;/p&gt;
&lt;p&gt;如果想清理，可以先查看待删除的内核，命令如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rpm -qa | grep kernel
&lt;/pre&gt;
&lt;p&gt;再删除旧版本的内核包:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
yum autoremove kernel-.el7.x86_64
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;闲话几句&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Linux &lt;a class="reference external" href="https://www.kernel.org/"&gt;Kernel&lt;/a&gt; 即操作系统核心软件。有数据表示50%+的互联网服务器是 Linux，加上移动时代的 Android 占据半壁江山。可以这么说，&lt;em&gt;一半以上大部分计算设备内都运行了一份 Linux 核心&lt;/em&gt;。&lt;/li&gt;
&lt;li&gt;论贡献，豪不夸张，这个由神级人物 Linus Torvalds 领导开发了27年的软件，是现代文明的重度的坚实依赖，它是实用者的胜利，也是 Linus Torvalds 价值观的成功检验；&lt;/li&gt;
&lt;li&gt;Linux 的历史和文化值得慢慢了解、品位和思考，但现在大多情况下，云端机器 Linux 内核都是 3.x 版本，是不用升级的，除非你知道为什么要升级，或者你认为升级内核不重启机器的能力确实很酷；&lt;/li&gt;
&lt;li&gt;在国内，除非天时地利人和，研究 Linux Kernel 并没什么太多商业价值，只是领域情怀或“我乐意”；&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.elrepo.org"&gt;https://www.elrepo.org&lt;/a&gt; 和 &lt;a class="reference external" href="https://kernelnewbies.org"&gt;https://kernelnewbies.org&lt;/a&gt; 可能对你有用。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="Technology"></category><category term="CentOS"></category><category term="Linux Kernel"></category></entry><entry><title>在 Linux 上安装 VSCode 遇到的问题和解决思路</title><link href="https://kaffa.im/install-vscode-on-linux-error.html" rel="alternate"></link><published>2018-07-05T12:30:00+08:00</published><updated>2018-07-05T12:30:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-07-05:/install-vscode-on-linux-error.html</id><summary type="html">&lt;p class="first last"&gt;本文描述在 Linux 上安装 VSCode 遇到的问题和解决思路&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;为什么在 Linux 上安装 VSCode？&lt;/h2&gt;
&lt;p&gt;近期计划使用搭建 telegram bot，了解原理后，发现是基本的 http 开发。&lt;/p&gt;
&lt;p&gt;计划使用轻量级 Web 框架，就项目需求来说，选择 Python 微框架 或 Go 语言比较适宜，加上前不久了解到类似 &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; 的框架 &lt;a class="reference external" href="https://vibora.io/"&gt;Vibora&lt;/a&gt;，其官方介绍中的性能基准测试结果惊人难以置信，于是选择尝试，饶有兴致运行官方 hello world&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;vibora&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Vibora&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vibora&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;却发现无法在 Windows 下运行，提示:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Traceback (most recent call last):
File &amp;quot;test_vibora.py&amp;quot;, line 1, in &amp;lt;module&amp;gt;
    from vibora import Vibora, JsonResponse
File &amp;quot;C:\Python36\lib\site-packages\vibora\__init__.py&amp;quot;, line 7, in &amp;lt;module&amp;gt;
    from .server import *
File &amp;quot;C:\Python36\lib\site-packages\vibora\server.py&amp;quot;, line 5, in &amp;lt;module&amp;gt;
    from signal import pause
ImportError: cannot import name 'pause'
&lt;/pre&gt;
&lt;p&gt;查看源代码，是因为 vibora 使用了 Linux signal 的原因，看来，虽然其文档中称支持 Windows 是其目标，但目前还不支持。&lt;/p&gt;
&lt;p&gt;由于服务器是 CentOS，于是选择在本地虚机装上桌面，直接采用 VSCode 或 PyCharm 进行开发调试。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;遇到的问题&lt;/h2&gt;
&lt;p&gt;按照微软官方 &lt;cite&gt;VSCode 的 Linux 安装帮助&lt;/cite&gt;，本应该四个命令就可以搞定:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
sudo sh -c 'echo -e &amp;quot;[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc&amp;quot; &amp;gt; /etc/yum.repos.d/vscode.repo'
yum check-update
sudo yum install code
&lt;/pre&gt;
&lt;p&gt;可是在执行最后一个命令时，出现了一系列的 404 错误，安装终止了，提示:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Error downloading packages:  libXScrnSaver-1.2.2-6.1.el7.x86_64
&lt;/pre&gt;
&lt;p&gt;看样子是因为VSCode所依赖的某个软件包，提示资源不存在，yum 命令没能下载成功。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;解决思路&lt;/h2&gt;
&lt;p&gt;笼统的说，之前写过一篇 &lt;a class="reference external" href="http://kaffa.im/the-effective-way-to-find-answers-to-programming-questions.html"&gt;解决编程领域难题的有效方法&lt;/a&gt;，提到 StackOverflow，但此问题并不能很直接搜索到解决思路，所以只能自己思考。&lt;/p&gt;
&lt;p&gt;按照 yum 的提示去对应 &lt;a class="reference external" href="http://mirror.centos.org/centos-7/"&gt;CentOS 7&lt;/a&gt; 目录才发现，原来是 &lt;a class="reference external" href="http://mirror.centos.org/centos-7/7.5.1804/"&gt;CentOS 7.5.1804&lt;/a&gt; 到 Main Line 版本了。&lt;/p&gt;
&lt;p&gt;于是这个包依赖问题可以从 &lt;a class="reference external" href="http://mirror.centos.org/centos-7/7.4.1708/readme"&gt;CentOS 7.4.1708 readme&lt;/a&gt; 得到解答，即 &lt;a class="reference external" href="https://kaffa.im/update-centos-linux-kernel/"&gt;升级 CentOS 7.4 到 CentOS 7.5&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;升级完成后，再次运行 &lt;tt class="docutils literal"&gt;sudo yum install code&lt;/tt&gt;，即成功。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technology"></category><category term="CentOS"></category><category term="VSCode"></category><category term="Linux"></category></entry><entry><title>数据与信息的描述与差别</title><link href="https://kaffa.im/data-vs-information.html" rel="alternate"></link><published>2018-06-28T10:55:00+08:00</published><updated>2018-06-28T10:55:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-06-28:/data-vs-information.html</id><summary type="html">&lt;p class="first last"&gt;本文描述数据和信息两个概念的差别&lt;/p&gt;
</summary><content type="html">&lt;p&gt;编写文档时，大家常把 &lt;strong&gt;数据&lt;/strong&gt; 和 &lt;strong&gt;信息&lt;/strong&gt; 两个词混用，如管理信息系统（Management Information System）、数据导入（Data Import）等，可见，日常大家并不太在意两者的区别。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;描述&lt;/h2&gt;
&lt;p&gt;数据是原始的、未经组织的、待处理的客观事实，数据在组织前，可能是简单的、看起来随机的和无用的，当把数据处理、组织或在上下文中呈现而变得有用后，数据就成为信息。&lt;/p&gt;
&lt;p&gt;举个例子，每隔 1 小时记录某地点的气温，可以得到 24 个数据，而连续记录很多天后计算这个地点的平均气温，或将这些数据画在一张分布图上用来做什么时，就可称之为信息。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;起源&lt;/h2&gt;
&lt;p&gt;“数据”这个词来源于拉丁语 datum 的单数形式, 最初表示“已知数”，最早被用于 17 世纪，后来 &amp;quot;数据&amp;quot; 变迁为 datum 的复数形式。&lt;/p&gt;
&lt;p&gt;“信息” 是一个更老的词汇，最早可以追溯到 14 世纪的法国和英国中部，通常指 “通知行为” 本身, 经常用在教育和知识领域。&lt;/p&gt;
&lt;p&gt;在语言的发展中，可能有一些约定的说法，比如“大数据时代”、“信息大爆炸”，从这些词也可以大概分出，由原始的数据可以组织出更可观的信息。&lt;/p&gt;
&lt;p&gt;数据和信息是讨论很多问题时的基础，因此有此篇。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technology"></category><category term="Data"></category><category term="Information"></category></entry><entry><title>Windows 下使用 VSCode 编辑 *.rst 文件的错误提示</title><link href="https://kaffa.im/vscode-restructuredtext.html" rel="alternate"></link><published>2018-06-20T02:52:00+08:00</published><updated>2018-06-20T02:52:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-06-20:/vscode-restructuredtext.html</id><summary type="html">&lt;p class="first last"&gt;本文提供消除 Windows 下使用 VSCode 编辑 *.rst 文件的错误提示的方法&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;问题出现的场景&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;使用 VSCode 编辑 *.rst 文件时，会提示安装 doc8 ，于是使用 pip 安装 doc8，执行:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install doc8
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;重新打开文件，全文会出现两条警告 D002 和 D004，如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'D002 Trailing whitespace'
'D004 Found literal carriage return'
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;D002 信息按字面意思是行尾有空格，稍作思考，感觉可能和 Windows 的换行符 CRLF 有关，
于是点击 VSCode 状态栏，修改 &lt;tt class="docutils literal"&gt;CRLF&lt;/tt&gt; 为 &lt;tt class="docutils literal"&gt;LF&lt;/tt&gt;，之后错误提示消失。请参考：&lt;a class="reference external" href="https://github.com/vscode-restructuredtext/vscode-restructuredtext/issues/84"&gt;issues-84&lt;/a&gt;&lt;/p&gt;
&lt;ol class="arabic" start="3"&gt;
&lt;li&gt;&lt;p class="first"&gt;又产生新的警告 D001，如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
'D001 Line Too Long'
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 &lt;a class="reference external" href="https://github.com/vscode-restructuredtext/vscode-restructuredtext/issues/83"&gt;issues-83&lt;/a&gt; 中给的解决方法是，在 VSCode 的用户配置中提供一个更大的行宽度值。
于是 &lt;tt class="docutils literal"&gt;Ctrl + P&lt;/tt&gt;，选择 &lt;tt class="docutils literal"&gt;Preferences: Open Settings&lt;/tt&gt;，在 &lt;tt class="docutils literal"&gt;User Settings&lt;/tt&gt; 标签页，
也就是 &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;C:\Users\username\AppData\Roaming\Code\User\settings.json&lt;/span&gt;&lt;/tt&gt; 文件加入如下配置:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;restructuredtext.linter.extraArgs&amp;quot;: [
    &amp;quot;--max-line-length 80&amp;quot;
]
&lt;/pre&gt;
&lt;p&gt;我的理解是，这个最大行宽在 *.rst 文件中不建议设置太大，大约每行最多 80 个字符就差不多了，
这个和可维护性代码的最佳实践是一致的。&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technology"></category><category term="VSCode"></category><category term="reStructuredText"></category><category term="rst"></category></entry><entry><title>为 GitHub Pages 站点添加独立域名</title><link href="https://kaffa.im/custom-domain-of-github-pages-site.html" rel="alternate"></link><published>2018-06-19T17:17:00+08:00</published><updated>2018-06-19T17:17:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-06-19:/custom-domain-of-github-pages-site.html</id><summary type="html">&lt;p class="first last"&gt;本文记录为 GitHub Pages 站点添加独立域名的步骤和遇到的问题&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;添加独立域名的步骤&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;注册一个域名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选择你喜欢的域名商注册一个域名。
例如，我注册的是 kaffa.im&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;域名解析&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在域名配置中添加一条 CNAME 记录。
例如，将 kaffa.im 指向 kaffa.github.io，此时，访问 kaffa.im 会得到 Github 反馈的 404 错误页面&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;添加 CNAME 文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 Github 仓库 master 的根目录下添加一个名称为 &lt;strong&gt;CNAME&lt;/strong&gt; 的文件，文件内容为你注册的域名。
例如，在 kaffa.github.io 仓库 master 的根目录新建一个 &lt;a class="reference external" href="https://github.com/kaffa/kaffa.github.io/blob/master/CNAME"&gt;CNAME&lt;/a&gt; 文件，文件内容为 kaffa.im，刷新刚才的 404 页面即打开了原先的 kaffa.github.io 站点&lt;/p&gt;
&lt;/div&gt;
</content><category term="Technology"></category><category term="Custom Domain"></category><category term="GitHub Pages"></category></entry><entry><title>解决编程领域难题的有效方法</title><link href="https://kaffa.im/the-effective-way-to-find-answers-to-programming-problems.html" rel="alternate"></link><published>2018-06-18T02:22:00+08:00</published><updated>2018-06-18T02:22:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-06-18:/the-effective-way-to-find-answers-to-programming-problems.html</id><summary type="html">&lt;p&gt;解决编程领域难题的有效方法是推演和搜索&lt;/p&gt;</summary><content type="html">&lt;h2&gt;为什么会有编程领域的难题？&lt;/h2&gt;
&lt;p&gt;现实世界很复杂，编程是世界的抽象和理想模型，理想和现实的差距存在于细节上，编程经常会遇到这些细节带来的鸿沟。&lt;/p&gt;
&lt;h2&gt;解决编程领域难题的有效方法是什么？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;独立思考&lt;/p&gt;
&lt;p&gt;一般来讲，大多数问题都是读的太少而想的太多带来的。在允许的情况下，推荐独立阅读思考的方式来解决问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向外部求助&lt;/p&gt;
&lt;p&gt;为了解决一个具体问题，第一步是将问题定义清楚，第二步将问题复杂度降维，例如采用正交的方式分解。
在决定向外部求助时，首选当然是浏览官方网站文档，毫无疑问，这是最新一手参考资料。
如果再推荐一个有效而快速的解决，无疑是 &lt;a href="https://www.stackoverflow.com"&gt;Stack OverFlow&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;编程领域问题两种分类维度：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;按平台和设备&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;桌面系统&lt;ul&gt;
&lt;li&gt;Windows：最佳效率桌面系统&lt;/li&gt;
&lt;li&gt;macOS：与 Windows 相比，有所长，有所短&lt;/li&gt;
&lt;li&gt;GUN/Linux：建议玩 CentOS 或 Debian&lt;ul&gt;
&lt;li&gt;Debian：以服务稳定闻名&lt;/li&gt;
&lt;li&gt;Ubuntu：最流行易用&lt;/li&gt;
&lt;li&gt;openSUSE：界面好看&lt;/li&gt;
&lt;li&gt;Fedora：RHEL创新实验田&lt;/li&gt;
&lt;li&gt;CentOS：RHEL换商标版，一个靠谱的服务器版选择&lt;/li&gt;
&lt;li&gt;Arch Linux：功能全定制&lt;/li&gt;
&lt;li&gt;Gentoo：功能定制靠编译&lt;/li&gt;
&lt;li&gt;Raspbian：极客爱玩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix&lt;ul&gt;
&lt;li&gt;FreeBSD：玩BSD桌面首选&lt;/li&gt;
&lt;li&gt;OpenBSD：可能是世界上最安全的系统&lt;/li&gt;
&lt;li&gt;NetBSD：多CPU架构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chrome OS：基于浏览器的计算环境&lt;/li&gt;
&lt;li&gt;Xfce：轻量级多媒体桌面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移动设备&lt;ul&gt;
&lt;li&gt;Android：移动设备半边天&lt;/li&gt;
&lt;li&gt;iOS：先进的移动OS&lt;/li&gt;
&lt;li&gt;Windows Phone：输在移动OS的设计&lt;/li&gt;
&lt;li&gt;Firefox OS：低端机好用&lt;/li&gt;
&lt;li&gt;Sailfish/Meego：寄予厚望却错过时代&lt;/li&gt;
&lt;li&gt;Sybian/WinCE/PalmOS/NucleusOS：历史&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;穿戴设备&lt;ul&gt;
&lt;li&gt;watchOS：目前最成功的手表OS&lt;/li&gt;
&lt;li&gt;Android Wear：没有机会用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;平板设备&lt;ul&gt;
&lt;li&gt;iPad：打破PC思维，基于场景的资讯、娱乐和媒体平台&lt;/li&gt;
&lt;li&gt;Android Tablet：生产力平板&lt;/li&gt;
&lt;li&gt;Kindle：读书人最好&lt;/li&gt;
&lt;li&gt;Windows RT：不能运行传统程序的 Windows 大家不买单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浏览器&lt;ul&gt;
&lt;li&gt;Trident：作古&lt;/li&gt;
&lt;li&gt;Webkit：将作古&lt;/li&gt;
&lt;li&gt;Gecko：作古&lt;/li&gt;
&lt;li&gt;Presto：有前景&lt;/li&gt;
&lt;li&gt;Servo：有前景&lt;/li&gt;
&lt;li&gt;Blink：有前景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按语言：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按类型模型&lt;ul&gt;
&lt;li&gt;强类型&lt;/li&gt;
&lt;li&gt;弱类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按范式&lt;ul&gt;
&lt;li&gt;面向对象&lt;/li&gt;
&lt;li&gt;函数式&lt;/li&gt;
&lt;li&gt;过程式&lt;/li&gt;
&lt;li&gt;多范式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按交互&lt;ul&gt;
&lt;li&gt;编译型&lt;/li&gt;
&lt;li&gt;解释型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按热度&lt;ul&gt;
&lt;li&gt;不会不好意思打招呼系列&lt;ul&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大公司都用系列&lt;ul&gt;
&lt;li&gt;C/C++&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;聪明系列&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;li&gt;Delphi&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快系列&lt;ul&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有Qian景系列&lt;ul&gt;
&lt;li&gt;Swift&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;Kotlin&lt;/li&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;科研系列&lt;ul&gt;
&lt;li&gt;F#&lt;/li&gt;
&lt;li&gt;R&lt;/li&gt;
&lt;li&gt;Matlab&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;极客系列&lt;ul&gt;
&lt;li&gt;Clojure&lt;/li&gt;
&lt;li&gt;Perl&lt;/li&gt;
&lt;li&gt;Rust&lt;/li&gt;
&lt;li&gt;Assembly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;编程领域问题的根本难度&lt;/h2&gt;
&lt;p&gt;编程领域问题不仅仅只有分类，根据金字塔原理，分类是一种局部但重要的思维模式，解决问题最终依赖的是网状的知识图谱。
从长远来看问题的解决最终依赖于自我的学习力，而决定编程领域问题的根本难度可能在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;语言障碍
    因为语言学习本身不是短时间能解决的问题，所以如果当待解决的问题所依赖的知识与提问的人之间存在语言障碍，那么解决此问题将会面临一个较高难度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自我认知
    有一本书叫做《提问的艺术》，可以参考。从测试的角度上，一个好提问，需给回答的人创造一个条件，方便回答者重现或进入问题的场景，一个自我认知好的人容易提好问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;解决编程领域难题的有效方法是推演和搜索&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;推演
    即依赖自我认知&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;搜索
    除了依赖自我，更多的是依赖外部&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="Technology"></category><category term="Technology Category"></category><category term="Problems Solving"></category></entry><entry><title>新博客</title><link href="https://kaffa.im/about-my-new-blog.html" rel="alternate"></link><published>2018-06-06T10:20:00+08:00</published><updated>2018-06-06T10:20:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.im,2018-06-06:/about-my-new-blog.html</id><summary type="html">&lt;p class="first last"&gt;我的新博客&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id2"&gt;
&lt;h2&gt;关于本博客&lt;/h2&gt;
&lt;p&gt;2016-06-06，新的一天，新博客，这里将主要记录我的笔记和想法，以及兴趣。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;本博客采用的技术&lt;/h2&gt;
&lt;p&gt;本博客采用基于 &lt;a class="reference external" href="https://www.python.org/"&gt;Python&lt;/a&gt; 语言的 &lt;a class="reference external" href="https://getpelican.com/"&gt;Pelican&lt;/a&gt; 库的 &lt;a class="reference external" href="https://github.com/MrSenko/pelican-octopress-theme"&gt;octopress 主题&lt;/a&gt; 来生成。&lt;/p&gt;
&lt;p&gt;一般来说，静态博客就是一堆按目录存放的 html/css/js 及图片等静态文件组成的页面。在互联网刚兴起的那些年，第一批互联网站长利用 Microsoft FrontPage 和 Adobe Dreamweaver 等开发工具制作网站，随着 Web 的发展，几乎每一种语言都有人编写了专门的库用来维护这样的 &lt;a class="reference external" href="https://staticsitegenerators.net/"&gt;静态站点&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;我近些年主要用 Python 完成一些代码，因此选用了 Python 语言的 Pelican 库，类似的托管在 Github Pages 的默认库是基于 &lt;a class="reference external" href="https://www.ruby-lang.org/"&gt;Ruby&lt;/a&gt; 语言的 &lt;a class="reference external" href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;，而 Pelican 更有优势的地方是除了支持 &lt;a class="reference external" href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;，还支持 &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reStructuredText&lt;/a&gt; 和 &lt;a class="reference external" href="http://www.methods.co.nz/asciidoc/"&gt;AsciiDoc&lt;/a&gt; 格式。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;本博客采用的技术的相关链接&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://blog.getpelican.com/"&gt;Pelican blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/getpelican"&gt;Pelican dev team&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;Pelican plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;Pelican themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="todo"&gt;
&lt;h2&gt;和很多静态博客一样也留下 TODO 吧&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;采用渐进增强添加国家地理的 &lt;a class="reference external" href="https://www.nationalgeographic.com/photography/photo-of-the-day/?source=sitenavpod"&gt;每日一图&lt;/a&gt; 作为随机背景&lt;/li&gt;
&lt;li&gt;将 Jekyll 的 &lt;a class="reference external" href="https://taylantatli.github.io/Moon/"&gt;Moon 主题&lt;/a&gt; 迁移到 Pelican&lt;/li&gt;
&lt;li&gt;添加一些需要 &lt;a class="reference external" href="https://github.com/getpelican/pelican-plugins"&gt;Pelican plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="Life"></category><category term="My Blog"></category></entry></feed>
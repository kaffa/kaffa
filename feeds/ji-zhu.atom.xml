<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>kaFFa fORest - 技术</title><link href="http://kaffa.github.io/" rel="alternate"></link><link href="http://kaffa.github.io/feeds/ji-zhu.atom.xml" rel="self"></link><id>http://kaffa.github.io/</id><updated>2018-06-19T17:17:00+08:00</updated><entry><title>为 GitHub Pages 站点添加独立域名</title><link href="http://kaffa.github.io/custom-domain-of-github-pages-site.html" rel="alternate"></link><published>2018-06-19T17:17:00+08:00</published><updated>2018-06-19T17:17:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.github.io,2018-06-19:/custom-domain-of-github-pages-site.html</id><summary type="html">&lt;p class="first last"&gt;本文记录为 GitHub Pages 站点添加独立域名的步骤和遇到的问题&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;添加独立域名的步骤&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;注册一个域名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;选择你喜欢的域名商注册一个域名。
例如，我注册的是 kaffa.im&lt;/p&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;域名解析&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在域名配置中添加一条 CNAME 记录。
例如，将 kaffa.im 指向 kaffa.github.io，此时，访问 kaffa.im 会得到 Github 反馈的 404 错误页面&lt;/p&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;添加 CNAME 文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 Github 仓库 master 的根目录下添加一个名称为 &lt;strong&gt;CNAME&lt;/strong&gt; 的文件，文件内容为你注册的域名。
例如，在 kaffa.github.io 仓库 master 的根目录新建一个 &lt;a class="reference external" href="https://github.com/kaffa/kaffa.github.io/blob/master/CNAME"&gt;CNAME&lt;/a&gt; 文件，文件内容为 kaffa.im，刷新刚才的 404 页面即打开了原先的 kaffa.github.io 站点&lt;/p&gt;
&lt;/div&gt;
</content><category term="technology"></category></entry><entry><title>解决编程领域难题的有效方法</title><link href="http://kaffa.github.io/the-effective-way-to-find-answers-to-programming-questions.html" rel="alternate"></link><published>2018-06-18T02:22:00+08:00</published><updated>2018-06-18T02:22:00+08:00</updated><author><name>Kaffa</name></author><id>tag:kaffa.github.io,2018-06-18:/the-effective-way-to-find-answers-to-programming-questions.html</id><summary type="html">&lt;p&gt;解决编程领域难题的有效方法是推演和搜索&lt;/p&gt;</summary><content type="html">&lt;h2&gt;为什么会有编程领域的难题？&lt;/h2&gt;
&lt;p&gt;现实世界很复杂，编程是世界的抽象和理想模型，理想和现实的差距存在于细节上，编程经常会遇到这些细节带来的鸿沟。&lt;/p&gt;
&lt;h2&gt;解决编程领域难题的有效方法是什么？&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;独立思考&lt;/p&gt;
&lt;p&gt;一般来讲，大多数问题都是读的太少而想的太多带来的。在允许的情况下，推荐独立阅读思考的方式来解决问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;向外部求助&lt;/p&gt;
&lt;p&gt;为了解决一个具体问题，第一步是将问题定义清楚，第二步将问题复杂度降维，例如采用正交的方式分解。
在决定向外部求助时，首选当然是浏览官方网站文档，毫无疑问，这是最新一手参考资料。
如果再推荐一个有效而快速的解决，无疑是 &lt;a href="https://www.stackoverflow.com"&gt;Stack OverFlow&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;编程领域问题两种分类维度：&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;按平台和设备&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;桌面系统&lt;ul&gt;
&lt;li&gt;Windows：最佳效率桌面系统&lt;/li&gt;
&lt;li&gt;macOS：与 Windows 相比，有所长，有所短&lt;/li&gt;
&lt;li&gt;GUN/Linux：建议玩 CentOS 或 Debian&lt;ul&gt;
&lt;li&gt;Debian：以服务稳定闻名&lt;/li&gt;
&lt;li&gt;Ubuntu：最流行易用&lt;/li&gt;
&lt;li&gt;openSUSE：界面好看&lt;/li&gt;
&lt;li&gt;Fedora：RHEL创新实验田&lt;/li&gt;
&lt;li&gt;CentOS：RHEL换商标版，一个靠谱的服务器版选择&lt;/li&gt;
&lt;li&gt;Arch Linux：功能全定制&lt;/li&gt;
&lt;li&gt;Gentoo：功能定制靠编译&lt;/li&gt;
&lt;li&gt;Raspbian：极客爱玩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unix&lt;ul&gt;
&lt;li&gt;FreeBSD：玩BSD桌面首选&lt;/li&gt;
&lt;li&gt;OpenBSD：可能是世界上最安全的系统&lt;/li&gt;
&lt;li&gt;NetBSD：多CPU架构&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Chrome OS：基于浏览器的计算环境&lt;/li&gt;
&lt;li&gt;Xfce：轻量级多媒体桌面&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移动设备&lt;ul&gt;
&lt;li&gt;Android：移动设备半边天&lt;/li&gt;
&lt;li&gt;iOS：先进的移动OS&lt;/li&gt;
&lt;li&gt;Windows Phone：输在移动OS的设计&lt;/li&gt;
&lt;li&gt;Firefox OS：低端机好用&lt;/li&gt;
&lt;li&gt;Sailfish/Meego：寄予厚望却错过时代&lt;/li&gt;
&lt;li&gt;Sybian/WinCE/PalmOS/NucleusOS：历史&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;穿戴设备&lt;ul&gt;
&lt;li&gt;watchOS：目前最成功的手表OS&lt;/li&gt;
&lt;li&gt;Android Wear：没有机会用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;平板设备&lt;ul&gt;
&lt;li&gt;iPad：打破PC思维，基于场景的资讯、娱乐和媒体平台&lt;/li&gt;
&lt;li&gt;Android Tablet：生产力平板&lt;/li&gt;
&lt;li&gt;Kindle：读书人最好&lt;/li&gt;
&lt;li&gt;Windows RT：不能运行传统程序的 Windows 大家不买单&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浏览器&lt;ul&gt;
&lt;li&gt;Trident：作古&lt;/li&gt;
&lt;li&gt;Webkit：将作古&lt;/li&gt;
&lt;li&gt;Gecko：作古&lt;/li&gt;
&lt;li&gt;Presto：有前景&lt;/li&gt;
&lt;li&gt;Servo：有前景&lt;/li&gt;
&lt;li&gt;Blink：有前景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按语言：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按类型模型&lt;ul&gt;
&lt;li&gt;强类型&lt;/li&gt;
&lt;li&gt;弱类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按范式&lt;ul&gt;
&lt;li&gt;面向对象&lt;/li&gt;
&lt;li&gt;函数式&lt;/li&gt;
&lt;li&gt;过程式&lt;/li&gt;
&lt;li&gt;多范式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按交互&lt;ul&gt;
&lt;li&gt;编译型&lt;/li&gt;
&lt;li&gt;解释型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按热度&lt;ul&gt;
&lt;li&gt;不会不好意思打招呼系列&lt;ul&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大公司都用系列&lt;ul&gt;
&lt;li&gt;C/C++&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;聪明系列&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;li&gt;Delphi&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;快系列&lt;ul&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有Qian景系列&lt;ul&gt;
&lt;li&gt;Swift&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;Kotlin&lt;/li&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;科研系列&lt;ul&gt;
&lt;li&gt;F#&lt;/li&gt;
&lt;li&gt;R&lt;/li&gt;
&lt;li&gt;Matlab&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;极客系列&lt;ul&gt;
&lt;li&gt;Clojure&lt;/li&gt;
&lt;li&gt;Perl&lt;/li&gt;
&lt;li&gt;Rust&lt;/li&gt;
&lt;li&gt;Assembly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;编程领域问题的根本难度&lt;/h2&gt;
&lt;p&gt;编程领域问题不仅仅只有分类，根据金字塔原理，分类是一种局部但重要的思维模式，解决问题最终依赖的是网状的知识图谱。
从长远来问题的解决最终依赖于自我的学习力，而决定编程领域问题的根本难度可能在于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;语言障碍
    因为语言学习本身不是短时间能解决的问题，所以如果当待解决的问题所依赖的知识与提问的人之间存在语言障碍，那么解决此问题将会面临一个较高难度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自我认知
    有一本书叫做《提问的艺术》，可以参考。从测试的角度上，一个好提问，需给回答的人创造一个条件，方便回答者重现或进入问题的场景，一个自我认知好的人容易提好问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;解决编程领域难题的有效方法是推演和搜索&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;推演
    即依赖自我认知&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;搜索
    除了依赖自我，更多的是依赖外部&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="technology"></category></entry></feed>